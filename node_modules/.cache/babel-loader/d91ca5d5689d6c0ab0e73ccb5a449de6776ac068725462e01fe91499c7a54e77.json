{"ast":null,"code":"// services/ai/anthropic.service.ts\nimport axios from 'axios';\nconst ANTHROPIC_API_KEY = process.env.REACT_APP_ANTHROPIC_API_KEY;\nconst ANTHROPIC_API_URL = 'https://api.anthropic.com/v1/messages';\nexport class AnthropicService {\n  async makeRequest(messages, maxTokens = 4096) {\n    try {\n      console.time('Anthropic API Call');\n      const response = await axios.post(ANTHROPIC_API_URL, {\n        model: 'claude-3-opus-20240229',\n        // Best quality\n        // model: 'claude-3-sonnet-20240229', // Faster, still excellent\n        messages,\n        max_tokens: maxTokens,\n        temperature: 0.7\n      }, {\n        headers: {\n          'x-api-key': ANTHROPIC_API_KEY,\n          'anthropic-version': '2023-06-01',\n          'Content-Type': 'application/json'\n        }\n      });\n      console.timeEnd('Anthropic API Call');\n      return response.data.content[0].text;\n    } catch (error) {\n      var _error$response, _error$response2, _error$response2$data, _error$response2$data2;\n      console.error('Anthropic API error:', ((_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.data) || error.message);\n      throw new Error(((_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : (_error$response2$data = _error$response2.data) === null || _error$response2$data === void 0 ? void 0 : (_error$response2$data2 = _error$response2$data.error) === null || _error$response2$data2 === void 0 ? void 0 : _error$response2$data2.message) || 'Failed to generate content');\n    }\n  }\n  async generateBlog(keyword, research) {\n    console.log('Generating SEO-optimized blog for:', keyword);\n    console.log('Research data type:', typeof research);\n    console.log('Research keys:', research ? Object.keys(research) : 'No research');\n    const systemPrompt = `You are an expert SEO content writer who creates highly engaging, authoritative content that ranks well on Google. \n    You follow E-E-A-T principles and write content that demonstrates real expertise, experience, authority, and trustworthiness.\n    Your content is comprehensive, well-structured, and naturally incorporates keywords for optimal SEO performance.`;\n\n    // Build the research summary from whatever data we have\n    let researchSummary = '';\n\n    // Try to extract whatever data is available\n    if (research) {\n      if (research.definition) {\n        researchSummary += `\\nDefinition: ${research.definition}`;\n      }\n      if (research.overview) {\n        researchSummary += `\\nOverview: ${research.overview}`;\n      }\n      if (research.currentTrends && Array.isArray(research.currentTrends)) {\n        researchSummary += `\\nCurrent Trends: ${research.currentTrends.join(', ')}`;\n      }\n      if (research.statistics && Array.isArray(research.statistics)) {\n        researchSummary += `\\nKey Statistics: ${JSON.stringify(research.statistics.slice(0, 5))}`;\n      }\n      if (research.commonQuestions && Array.isArray(research.commonQuestions)) {\n        researchSummary += `\\nCommon Questions: ${research.commonQuestions.map(q => typeof q === 'string' ? q : q.question).join(', ')}`;\n      }\n      if (research.applications && Array.isArray(research.applications)) {\n        researchSummary += `\\nApplications: ${research.applications.join(', ')}`;\n      }\n      if (research.challenges && Array.isArray(research.challenges)) {\n        researchSummary += `\\nChallenges: ${research.challenges.join(', ')}`;\n      }\n      if (research.opportunities && Array.isArray(research.opportunities)) {\n        researchSummary += `\\nOpportunities: ${research.opportunities.join(', ')}`;\n      }\n    }\n\n    // If we couldn't extract structured data, just stringify what we have\n    if (!researchSummary) {\n      researchSummary = JSON.stringify(research, null, 2).slice(0, 3000);\n    }\n    const userPrompt = `Create a comprehensive, SEO-optimized blog post about \"${keyword}\" using the provided research data.\n\nRESEARCH DATA:${researchSummary}\n\nBLOG POST REQUIREMENTS:\n\n1. Create a blog post that is 1,500-2,000 words long\n2. Include an SEO-optimized title that naturally includes \"${keyword}\"\n3. Write a compelling meta description (155-160 characters)\n4. Structure with:\n   - Engaging introduction with a hook\n   - 5-7 main sections with H2 headings\n   - Subsections with H3 headings where appropriate\n   - Conclusion with clear call-to-action\n\n5. SEO Optimization:\n   - Use \"${keyword}\" naturally 5-7 times throughout\n   - Include semantic variations and related terms\n   - Target potential featured snippets with clear, concise answers\n   - Write in an easy-to-read style (8th-grade level)\n\n6. Demonstrate E-E-A-T:\n   - Show expertise through accurate information\n   - Include statistics and data points from the research\n   - Reference authoritative sources\n   - Provide practical, actionable advice\n\n7. Engagement:\n   - Use short paragraphs (2-3 sentences)\n   - Include bullet points and lists\n   - Add examples and analogies\n   - Keep the tone conversational but professional\n\nFORMAT YOUR RESPONSE AS JSON:\n{\n  \"title\": \"SEO-optimized title with keyword\",\n  \"metaDescription\": \"Compelling meta description 155-160 characters with keyword\",\n  \"content\": \"Full blog post in Markdown format with ## for H2 and ### for H3 headings\",\n  \"wordCount\": 1800,\n  \"readingTime\": 8,\n  \"targetKeywords\": [\"main keyword\", \"related keyword 1\", \"related keyword 2\"]\n}\n\nWrite an exceptional blog post that would rank well on Google and provide genuine value to readers.`;\n    const messages = [{\n      role: 'system',\n      content: systemPrompt\n    }, {\n      role: 'user',\n      content: userPrompt\n    }];\n    try {\n      const response = await this.makeRequest(messages);\n\n      // Try to parse the response\n      try {\n        const blogData = JSON.parse(response);\n\n        // Ensure we have the required fields\n        if (!blogData.wordCount) {\n          blogData.wordCount = blogData.content ? blogData.content.split(/\\s+/).length : 1500;\n        }\n        if (!blogData.readingTime) {\n          blogData.readingTime = Math.ceil(blogData.wordCount / 200);\n        }\n        return blogData;\n      } catch (parseError) {\n        console.error('Failed to parse JSON response, attempting to extract...');\n\n        // Try to extract JSON from the response\n        const jsonMatch = response.match(/\\{[\\s\\S]*\\}/);\n        if (jsonMatch) {\n          const extracted = JSON.parse(jsonMatch[0]);\n          if (!extracted.wordCount) {\n            extracted.wordCount = extracted.content ? extracted.content.split(/\\s+/).length : 1500;\n          }\n          if (!extracted.readingTime) {\n            extracted.readingTime = Math.ceil(extracted.wordCount / 200);\n          }\n          return extracted;\n        }\n\n        // If all else fails, create a basic structure\n        throw new Error('Could not parse blog response');\n      }\n    } catch (error) {\n      console.error('Blog generation error:', error);\n      throw error;\n    }\n  }\n\n  // We'll add podcast and social methods later\n  async generatePodcastScript(keyword, research, blog) {\n    // Implementation coming next\n    throw new Error('Not implemented yet');\n  }\n  async generateSocialCaptions(keyword, blog, images) {\n    // Implementation coming next\n    throw new Error('Not implemented yet');\n  }\n}\nexport const anthropicService = new AnthropicService();","map":{"version":3,"names":["axios","ANTHROPIC_API_KEY","process","env","REACT_APP_ANTHROPIC_API_KEY","ANTHROPIC_API_URL","AnthropicService","makeRequest","messages","maxTokens","console","time","response","post","model","max_tokens","temperature","headers","timeEnd","data","content","text","error","_error$response","_error$response2","_error$response2$data","_error$response2$data2","message","Error","generateBlog","keyword","research","log","Object","keys","systemPrompt","researchSummary","definition","overview","currentTrends","Array","isArray","join","statistics","JSON","stringify","slice","commonQuestions","map","q","question","applications","challenges","opportunities","userPrompt","role","blogData","parse","wordCount","split","length","readingTime","Math","ceil","parseError","jsonMatch","match","extracted","generatePodcastScript","blog","generateSocialCaptions","images","anthropicService"],"sources":["/Users/will/Content Creation App/src/services/ai/anthropic.service.ts"],"sourcesContent":["// services/ai/anthropic.service.ts\nimport axios from 'axios';\nimport { ResearchContent, BlogContent, PodcastContent, SocialContent } from '../../types/project.types';\n\nconst ANTHROPIC_API_KEY = process.env.REACT_APP_ANTHROPIC_API_KEY;\nconst ANTHROPIC_API_URL = 'https://api.anthropic.com/v1/messages';\n\nexport class AnthropicService {\n  private async makeRequest(messages: any[], maxTokens: number = 4096): Promise<string> {\n    try {\n      console.time('Anthropic API Call');\n      \n      const response = await axios.post(\n        ANTHROPIC_API_URL,\n        {\n          model: 'claude-3-opus-20240229', // Best quality\n          // model: 'claude-3-sonnet-20240229', // Faster, still excellent\n          messages,\n          max_tokens: maxTokens,\n          temperature: 0.7,\n        },\n        {\n          headers: {\n            'x-api-key': ANTHROPIC_API_KEY,\n            'anthropic-version': '2023-06-01',\n            'Content-Type': 'application/json',\n          },\n        }\n      );\n\n      console.timeEnd('Anthropic API Call');\n      return response.data.content[0].text;\n    } catch (error: any) {\n      console.error('Anthropic API error:', error.response?.data || error.message);\n      throw new Error(error.response?.data?.error?.message || 'Failed to generate content');\n    }\n  }\n\n  async generateBlog(keyword: string, research: any): Promise<BlogContent> {\n    console.log('Generating SEO-optimized blog for:', keyword);\n    console.log('Research data type:', typeof research);\n    console.log('Research keys:', research ? Object.keys(research) : 'No research');\n\n    const systemPrompt = `You are an expert SEO content writer who creates highly engaging, authoritative content that ranks well on Google. \n    You follow E-E-A-T principles and write content that demonstrates real expertise, experience, authority, and trustworthiness.\n    Your content is comprehensive, well-structured, and naturally incorporates keywords for optimal SEO performance.`;\n\n    // Build the research summary from whatever data we have\n    let researchSummary = '';\n    \n    // Try to extract whatever data is available\n    if (research) {\n      if (research.definition) {\n        researchSummary += `\\nDefinition: ${research.definition}`;\n      }\n      if (research.overview) {\n        researchSummary += `\\nOverview: ${research.overview}`;\n      }\n      if (research.currentTrends && Array.isArray(research.currentTrends)) {\n        researchSummary += `\\nCurrent Trends: ${research.currentTrends.join(', ')}`;\n      }\n      if (research.statistics && Array.isArray(research.statistics)) {\n        researchSummary += `\\nKey Statistics: ${JSON.stringify(research.statistics.slice(0, 5))}`;\n      }\n      if (research.commonQuestions && Array.isArray(research.commonQuestions)) {\n        researchSummary += `\\nCommon Questions: ${research.commonQuestions.map((q: any) => \n          typeof q === 'string' ? q : q.question\n        ).join(', ')}`;\n      }\n      if (research.applications && Array.isArray(research.applications)) {\n        researchSummary += `\\nApplications: ${research.applications.join(', ')}`;\n      }\n      if (research.challenges && Array.isArray(research.challenges)) {\n        researchSummary += `\\nChallenges: ${research.challenges.join(', ')}`;\n      }\n      if (research.opportunities && Array.isArray(research.opportunities)) {\n        researchSummary += `\\nOpportunities: ${research.opportunities.join(', ')}`;\n      }\n    }\n\n    // If we couldn't extract structured data, just stringify what we have\n    if (!researchSummary) {\n      researchSummary = JSON.stringify(research, null, 2).slice(0, 3000);\n    }\n\n    const userPrompt = `Create a comprehensive, SEO-optimized blog post about \"${keyword}\" using the provided research data.\n\nRESEARCH DATA:${researchSummary}\n\nBLOG POST REQUIREMENTS:\n\n1. Create a blog post that is 1,500-2,000 words long\n2. Include an SEO-optimized title that naturally includes \"${keyword}\"\n3. Write a compelling meta description (155-160 characters)\n4. Structure with:\n   - Engaging introduction with a hook\n   - 5-7 main sections with H2 headings\n   - Subsections with H3 headings where appropriate\n   - Conclusion with clear call-to-action\n\n5. SEO Optimization:\n   - Use \"${keyword}\" naturally 5-7 times throughout\n   - Include semantic variations and related terms\n   - Target potential featured snippets with clear, concise answers\n   - Write in an easy-to-read style (8th-grade level)\n\n6. Demonstrate E-E-A-T:\n   - Show expertise through accurate information\n   - Include statistics and data points from the research\n   - Reference authoritative sources\n   - Provide practical, actionable advice\n\n7. Engagement:\n   - Use short paragraphs (2-3 sentences)\n   - Include bullet points and lists\n   - Add examples and analogies\n   - Keep the tone conversational but professional\n\nFORMAT YOUR RESPONSE AS JSON:\n{\n  \"title\": \"SEO-optimized title with keyword\",\n  \"metaDescription\": \"Compelling meta description 155-160 characters with keyword\",\n  \"content\": \"Full blog post in Markdown format with ## for H2 and ### for H3 headings\",\n  \"wordCount\": 1800,\n  \"readingTime\": 8,\n  \"targetKeywords\": [\"main keyword\", \"related keyword 1\", \"related keyword 2\"]\n}\n\nWrite an exceptional blog post that would rank well on Google and provide genuine value to readers.`;\n\n    const messages = [\n      { role: 'system', content: systemPrompt },\n      { role: 'user', content: userPrompt }\n    ];\n\n    try {\n      const response = await this.makeRequest(messages);\n      \n      // Try to parse the response\n      try {\n        const blogData = JSON.parse(response);\n        \n        // Ensure we have the required fields\n        if (!blogData.wordCount) {\n          blogData.wordCount = blogData.content ? blogData.content.split(/\\s+/).length : 1500;\n        }\n        if (!blogData.readingTime) {\n          blogData.readingTime = Math.ceil(blogData.wordCount / 200);\n        }\n        \n        return blogData as BlogContent;\n      } catch (parseError) {\n        console.error('Failed to parse JSON response, attempting to extract...');\n        \n        // Try to extract JSON from the response\n        const jsonMatch = response.match(/\\{[\\s\\S]*\\}/);\n        if (jsonMatch) {\n          const extracted = JSON.parse(jsonMatch[0]);\n          if (!extracted.wordCount) {\n            extracted.wordCount = extracted.content ? extracted.content.split(/\\s+/).length : 1500;\n          }\n          if (!extracted.readingTime) {\n            extracted.readingTime = Math.ceil(extracted.wordCount / 200);\n          }\n          return extracted as BlogContent;\n        }\n        \n        // If all else fails, create a basic structure\n        throw new Error('Could not parse blog response');\n      }\n    } catch (error: any) {\n      console.error('Blog generation error:', error);\n      throw error;\n    }\n  }\n\n  // We'll add podcast and social methods later\n  async generatePodcastScript(\n    keyword: string, \n    research: ResearchContent, \n    blog: BlogContent\n  ): Promise<PodcastContent> {\n    // Implementation coming next\n    throw new Error('Not implemented yet');\n  }\n\n  async generateSocialCaptions(\n    keyword: string,\n    blog: BlogContent,\n    images: any\n  ): Promise<SocialContent> {\n    // Implementation coming next\n    throw new Error('Not implemented yet');\n  }\n}\n\nexport const anthropicService = new AnthropicService();"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}