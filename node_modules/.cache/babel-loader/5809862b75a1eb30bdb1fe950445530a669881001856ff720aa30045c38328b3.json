{"ast":null,"code":"// services/ai/anthropic.service.ts\nimport axios from 'axios';\nconst ANTHROPIC_API_KEY = process.env.REACT_APP_ANTHROPIC_API_KEY;\nconst ANTHROPIC_API_URL = 'https://api.anthropic.com/v1/messages';\nexport class AnthropicService {\n  async makeRequest(messages, maxTokens = 4096) {\n    try {\n      console.time('Anthropic API Call');\n      const response = await axios.post(ANTHROPIC_API_URL, {\n        model: 'claude-3-opus-20240229',\n        // Best quality\n        // model: 'claude-3-sonnet-20240229', // Faster, still excellent\n        messages,\n        max_tokens: maxTokens,\n        temperature: 0.7\n      }, {\n        headers: {\n          'x-api-key': ANTHROPIC_API_KEY,\n          'anthropic-version': '2023-06-01',\n          'Content-Type': 'application/json'\n        }\n      });\n      console.timeEnd('Anthropic API Call');\n      return response.data.content[0].text;\n    } catch (error) {\n      var _error$response, _error$response2, _error$response2$data, _error$response2$data2;\n      console.error('Anthropic API error:', ((_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.data) || error.message);\n      throw new Error(((_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : (_error$response2$data = _error$response2.data) === null || _error$response2$data === void 0 ? void 0 : (_error$response2$data2 = _error$response2$data.error) === null || _error$response2$data2 === void 0 ? void 0 : _error$response2$data2.message) || 'Failed to generate content');\n    }\n  }\n  async generateBlog(keyword, research) {\n    console.log('Generating SEO-optimized blog for:', keyword);\n    const systemPrompt = `You are an expert SEO content writer who creates highly engaging, authoritative content that ranks well on Google. \n    You follow E-E-A-T principles and write content that demonstrates real expertise, experience, authority, and trustworthiness.\n    Your content is comprehensive, well-structured, and naturally incorporates keywords for optimal SEO performance.`;\n    const userPrompt = `Create a comprehensive, SEO-optimized blog post about \"${keyword}\" using the provided research data.\n\nRESEARCH DATA:\nSearch Intent: ${research.searchIntent.primary}\nUser Goals: ${research.searchIntent.userGoals.join(', ')}\nQuestions to Answer: ${research.searchIntent.questionsToAnswer.join(', ')}\n\nKey Statistics: ${JSON.stringify(research.authoritativeData.slice(0, 5))}\nExpert Insights: ${research.expertiseIndicators.industryStandards.join(', ')}\nTrust Signals: ${research.trustSignals.bestPractices.join(', ')}\nContent Gaps: ${research.competitiveLandscape.contentGaps.join(', ')}\nLSI Keywords: ${research.semanticSEO.lsiKeywords.join(', ')}\n\nFeatured Snippet Opportunities:\n${research.featuredSnippetOpps.map(opp => `Q: ${opp.question} A: ${opp.optimalAnswer}`).join('\\n')}\n\nBLOG POST REQUIREMENTS:\n\n1. LENGTH & STRUCTURE:\n   - 1,500-2,000 words\n   - SEO-optimized title with keyword\n   - Meta description (155-160 chars)\n   - Introduction with hook\n   - 5-7 main sections with H2 headings\n   - Subsections with H3 headings where appropriate\n   - Conclusion with CTA\n\n2. SEO OPTIMIZATION:\n   - Use \"${keyword}\" naturally 5-7 times\n   - Include LSI keywords throughout\n   - Answer featured snippet opportunities\n   - Use semantic variations\n   - Internal linking opportunities\n\n3. E-E-A-T DEMONSTRATION:\n   - Show expertise through technical accuracy\n   - Include real statistics with sources\n   - Reference industry standards\n   - Address trust signals\n   - Show first-hand experience\n\n4. ENGAGEMENT FACTORS:\n   - Use storytelling where appropriate\n   - Include examples and case studies\n   - Add actionable tips\n   - Use lists and bullet points\n   - Keep paragraphs short (2-3 sentences)\n\n5. CONTENT GAPS TO FILL:\n   ${research.competitiveLandscape.contentGaps.map(gap => `- ${gap}`).join('\\n')}\n\nFORMAT YOUR RESPONSE AS JSON:\n{\n  \"title\": \"SEO-optimized title with keyword\",\n  \"metaDescription\": \"Compelling meta description 155-160 characters\",\n  \"content\": \"Full blog post in Markdown with ## for H2 and ### for H3\",\n  \"wordCount\": 1800,\n  \"readingTime\": 8,\n  \"seoScore\": {\n    \"keywordDensity\": \"0.8%\",\n    \"readabilityScore\": \"Grade 8\",\n    \"featuredSnippets\": [\"snippet1\", \"snippet2\"]\n  },\n  \"internalLinks\": [\n    {\"anchor\": \"text to link\", \"suggestion\": \"link to related content about X\"}\n  ],\n  \"images\": [\n    {\"alt\": \"descriptive alt text\", \"caption\": \"image caption\", \"placement\": \"after section X\"}\n  ]\n}`;\n    const messages = [{\n      role: 'system',\n      content: systemPrompt\n    }, {\n      role: 'user',\n      content: userPrompt\n    }];\n    const response = await this.makeRequest(messages);\n    try {\n      const blogData = JSON.parse(response);\n      return blogData;\n    } catch (parseError) {\n      console.error('Failed to parse blog response:', parseError);\n      // Try to extract JSON from the response\n      const jsonMatch = response.match(/\\{[\\s\\S]*\\}/);\n      if (jsonMatch) {\n        return JSON.parse(jsonMatch[0]);\n      }\n      throw new Error('Failed to parse blog data');\n    }\n  }\n\n  // We'll add podcast and social methods later\n  async generatePodcastScript(keyword, research, blog) {\n    // Implementation coming next\n    throw new Error('Not implemented yet');\n  }\n  async generateSocialCaptions(keyword, blog, images) {\n    // Implementation coming next\n    throw new Error('Not implemented yet');\n  }\n}\nexport const anthropicService = new AnthropicService();","map":{"version":3,"names":["axios","ANTHROPIC_API_KEY","process","env","REACT_APP_ANTHROPIC_API_KEY","ANTHROPIC_API_URL","AnthropicService","makeRequest","messages","maxTokens","console","time","response","post","model","max_tokens","temperature","headers","timeEnd","data","content","text","error","_error$response","_error$response2","_error$response2$data","_error$response2$data2","message","Error","generateBlog","keyword","research","log","systemPrompt","userPrompt","searchIntent","primary","userGoals","join","questionsToAnswer","JSON","stringify","authoritativeData","slice","expertiseIndicators","industryStandards","trustSignals","bestPractices","competitiveLandscape","contentGaps","semanticSEO","lsiKeywords","featuredSnippetOpps","map","opp","question","optimalAnswer","gap","role","blogData","parse","parseError","jsonMatch","match","generatePodcastScript","blog","generateSocialCaptions","images","anthropicService"],"sources":["/Users/will/Content Creation App/src/services/ai/anthropic.service.ts"],"sourcesContent":["// services/ai/anthropic.service.ts\nimport axios from 'axios';\nimport { ResearchContent, BlogContent, PodcastContent, SocialContent } from '../../types/project.types';\n\nconst ANTHROPIC_API_KEY = process.env.REACT_APP_ANTHROPIC_API_KEY;\nconst ANTHROPIC_API_URL = 'https://api.anthropic.com/v1/messages';\n\nexport class AnthropicService {\n  private async makeRequest(messages: any[], maxTokens: number = 4096): Promise<string> {\n    try {\n      console.time('Anthropic API Call');\n      \n      const response = await axios.post(\n        ANTHROPIC_API_URL,\n        {\n          model: 'claude-3-opus-20240229', // Best quality\n          // model: 'claude-3-sonnet-20240229', // Faster, still excellent\n          messages,\n          max_tokens: maxTokens,\n          temperature: 0.7,\n        },\n        {\n          headers: {\n            'x-api-key': ANTHROPIC_API_KEY,\n            'anthropic-version': '2023-06-01',\n            'Content-Type': 'application/json',\n          },\n        }\n      );\n\n      console.timeEnd('Anthropic API Call');\n      return response.data.content[0].text;\n    } catch (error: any) {\n      console.error('Anthropic API error:', error.response?.data || error.message);\n      throw new Error(error.response?.data?.error?.message || 'Failed to generate content');\n    }\n  }\n\n  async generateBlog(keyword: string, research: ResearchContent): Promise<BlogContent> {\n    console.log('Generating SEO-optimized blog for:', keyword);\n\n    const systemPrompt = `You are an expert SEO content writer who creates highly engaging, authoritative content that ranks well on Google. \n    You follow E-E-A-T principles and write content that demonstrates real expertise, experience, authority, and trustworthiness.\n    Your content is comprehensive, well-structured, and naturally incorporates keywords for optimal SEO performance.`;\n\n    const userPrompt = `Create a comprehensive, SEO-optimized blog post about \"${keyword}\" using the provided research data.\n\nRESEARCH DATA:\nSearch Intent: ${research.searchIntent.primary}\nUser Goals: ${research.searchIntent.userGoals.join(', ')}\nQuestions to Answer: ${research.searchIntent.questionsToAnswer.join(', ')}\n\nKey Statistics: ${JSON.stringify(research.authoritativeData.slice(0, 5))}\nExpert Insights: ${research.expertiseIndicators.industryStandards.join(', ')}\nTrust Signals: ${research.trustSignals.bestPractices.join(', ')}\nContent Gaps: ${research.competitiveLandscape.contentGaps.join(', ')}\nLSI Keywords: ${research.semanticSEO.lsiKeywords.join(', ')}\n\nFeatured Snippet Opportunities:\n${research.featuredSnippetOpps.map(opp => `Q: ${opp.question} A: ${opp.optimalAnswer}`).join('\\n')}\n\nBLOG POST REQUIREMENTS:\n\n1. LENGTH & STRUCTURE:\n   - 1,500-2,000 words\n   - SEO-optimized title with keyword\n   - Meta description (155-160 chars)\n   - Introduction with hook\n   - 5-7 main sections with H2 headings\n   - Subsections with H3 headings where appropriate\n   - Conclusion with CTA\n\n2. SEO OPTIMIZATION:\n   - Use \"${keyword}\" naturally 5-7 times\n   - Include LSI keywords throughout\n   - Answer featured snippet opportunities\n   - Use semantic variations\n   - Internal linking opportunities\n\n3. E-E-A-T DEMONSTRATION:\n   - Show expertise through technical accuracy\n   - Include real statistics with sources\n   - Reference industry standards\n   - Address trust signals\n   - Show first-hand experience\n\n4. ENGAGEMENT FACTORS:\n   - Use storytelling where appropriate\n   - Include examples and case studies\n   - Add actionable tips\n   - Use lists and bullet points\n   - Keep paragraphs short (2-3 sentences)\n\n5. CONTENT GAPS TO FILL:\n   ${research.competitiveLandscape.contentGaps.map(gap => `- ${gap}`).join('\\n')}\n\nFORMAT YOUR RESPONSE AS JSON:\n{\n  \"title\": \"SEO-optimized title with keyword\",\n  \"metaDescription\": \"Compelling meta description 155-160 characters\",\n  \"content\": \"Full blog post in Markdown with ## for H2 and ### for H3\",\n  \"wordCount\": 1800,\n  \"readingTime\": 8,\n  \"seoScore\": {\n    \"keywordDensity\": \"0.8%\",\n    \"readabilityScore\": \"Grade 8\",\n    \"featuredSnippets\": [\"snippet1\", \"snippet2\"]\n  },\n  \"internalLinks\": [\n    {\"anchor\": \"text to link\", \"suggestion\": \"link to related content about X\"}\n  ],\n  \"images\": [\n    {\"alt\": \"descriptive alt text\", \"caption\": \"image caption\", \"placement\": \"after section X\"}\n  ]\n}`;\n\n    const messages = [\n      { role: 'system', content: systemPrompt },\n      { role: 'user', content: userPrompt }\n    ];\n\n    const response = await this.makeRequest(messages);\n    \n    try {\n      const blogData = JSON.parse(response);\n      return blogData as BlogContent;\n    } catch (parseError) {\n      console.error('Failed to parse blog response:', parseError);\n      // Try to extract JSON from the response\n      const jsonMatch = response.match(/\\{[\\s\\S]*\\}/);\n      if (jsonMatch) {\n        return JSON.parse(jsonMatch[0]) as BlogContent;\n      }\n      throw new Error('Failed to parse blog data');\n    }\n  }\n\n  // We'll add podcast and social methods later\n  async generatePodcastScript(\n    keyword: string, \n    research: ResearchContent, \n    blog: BlogContent\n  ): Promise<PodcastContent> {\n    // Implementation coming next\n    throw new Error('Not implemented yet');\n  }\n\n  async generateSocialCaptions(\n    keyword: string,\n    blog: BlogContent,\n    images: any\n  ): Promise<SocialContent> {\n    // Implementation coming next\n    throw new Error('Not implemented yet');\n  }\n}\n\nexport const anthropicService = new AnthropicService();"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}