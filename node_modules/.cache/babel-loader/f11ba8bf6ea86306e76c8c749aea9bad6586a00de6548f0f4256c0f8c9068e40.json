{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState, useCallback } from 'react';\nimport { toast } from 'react-toastify';\nimport { supabase } from '../services/supabase.service';\nimport { contentService } from '../services/content.service';\nconst LOCAL_STORAGE_KEY = 'currentProjectId';\nexport const useProject = () => {\n  _s();\n  const [project, setProject] = useState(null);\n  const [currentStage, setCurrentStage] = useState('research');\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState(null);\n\n  // Remove or comment out this auto-load effect\n  // useEffect(() => {\n  //   const savedProjectId = localStorage.getItem(LOCAL_STORAGE_KEY);\n  //   if (savedProjectId) {\n  //     loadProject(savedProjectId);\n  //   }\n  // }, []);\n\n  const loadProject = async projectId => {\n    try {\n      setIsLoading(true);\n      const {\n        data,\n        error\n      } = await supabase.from('projects').select('*').eq('id', projectId).single();\n      if (error) throw error;\n      setProject(data);\n      setCurrentStage(data.status);\n    } catch (err) {\n      setError(err instanceof Error ? err.message : 'Failed to load project');\n      toast.error('Failed to load project');\n    } finally {\n      setIsLoading(false);\n    }\n  };\n  const createProject = async keyword => {\n    try {\n      setIsLoading(true);\n      setError(null);\n      const newProject = {\n        keyword,\n        status: 'research',\n        created_at: new Date().toISOString(),\n        updated_at: new Date().toISOString()\n      };\n      const {\n        data,\n        error\n      } = await supabase.from('projects').insert([newProject]).select().single();\n      if (error) throw error;\n      setProject(data);\n      setCurrentStage(data.status);\n      localStorage.setItem(LOCAL_STORAGE_KEY, data.id);\n      toast.success('Project created successfully!');\n      return data;\n    } catch (err) {\n      const errorMessage = err instanceof Error ? err.message : 'Failed to create project';\n      setError(errorMessage);\n      toast.error(errorMessage);\n      return null;\n    } finally {\n      setIsLoading(false);\n    }\n  };\n  const updateStage = async (projectId, newStage) => {\n    try {\n      setIsLoading(true);\n      setError(null);\n      const {\n        error\n      } = await supabase.from('projects').update({\n        status: newStage,\n        updated_at: new Date().toISOString()\n      }).eq('id', projectId);\n      if (error) throw error;\n      setCurrentStage(newStage);\n      if (project) {\n        setProject({\n          ...project,\n          status: newStage\n        });\n      }\n      toast.success(`Stage updated to ${newStage}`);\n      return true;\n    } catch (err) {\n      const errorMessage = err instanceof Error ? err.message : 'Failed to update stage';\n      setError(errorMessage);\n      toast.error(errorMessage);\n      return false;\n    } finally {\n      setIsLoading(false);\n    }\n  };\n  const getStageContent = useCallback(async (projectId, stageType) => {\n    try {\n      setIsLoading(true);\n      setError(null);\n      const {\n        data,\n        error\n      } = await supabase.from('content_stages').select('*').eq('project_id', projectId).eq('stage_type', stageType).eq('is_current', true).single();\n      if (error && error.code !== 'PGRST116') {\n        // PGRST116 is \"no rows found\"\n        throw error;\n      }\n      return (data === null || data === void 0 ? void 0 : data.content) || null;\n    } catch (err) {\n      const errorMessage = err instanceof Error ? err.message : 'Failed to get content';\n      setError(errorMessage);\n      console.error(`Failed to fetch ${stageType} content:`, err);\n      return null;\n    } finally {\n      setIsLoading(false);\n    }\n  }, []);\n  const regenerateContent = useCallback(async (projectId, stageType, params) => {\n    setIsLoading(true);\n    setError(null);\n    try {\n      let response;\n      switch (stageType) {\n        case 'research':\n          response = await contentService.generateResearch(projectId, params.keyword);\n          break;\n        case 'blog':\n          response = await contentService.generateBlog(projectId, params.keyword, params.research);\n          break;\n        case 'podcast_script':\n          response = await contentService.generatePodcastScript(projectId, params.keyword, params.research, params.blog);\n          break;\n        default:\n          throw new Error('Invalid stage type');\n      }\n      toast.success(`${stageType.replace('_', ' ')} generated successfully!`);\n      return response;\n    } catch (err) {\n      setError(err.message || `Failed to generate ${stageType}`);\n      toast.error(err.message || `Failed to generate ${stageType}`);\n      return null;\n    } finally {\n      setIsLoading(false);\n    }\n  }, []);\n  const clearProject = useCallback(() => {\n    setProject(null);\n    setCurrentStage('research');\n    localStorage.removeItem(LOCAL_STORAGE_KEY);\n  }, []);\n  return {\n    project,\n    currentStage,\n    isLoading,\n    error,\n    createProject,\n    updateStage,\n    getStageContent,\n    regenerateContent,\n    clearProject\n  };\n};\n_s(useProject, \"znBzUcNHlK/mZLFzDaOZgRI4bEw=\");","map":{"version":3,"names":["useState","useCallback","toast","supabase","contentService","LOCAL_STORAGE_KEY","useProject","_s","project","setProject","currentStage","setCurrentStage","isLoading","setIsLoading","error","setError","loadProject","projectId","data","from","select","eq","single","status","err","Error","message","createProject","keyword","newProject","created_at","Date","toISOString","updated_at","insert","localStorage","setItem","id","success","errorMessage","updateStage","newStage","update","getStageContent","stageType","code","content","console","regenerateContent","params","response","generateResearch","generateBlog","research","generatePodcastScript","blog","replace","clearProject","removeItem"],"sources":["/Users/will/Content Creation App/src/hooks/useProject.ts"],"sourcesContent":["import { useState, useCallback } from 'react';\nimport { toast } from 'react-toastify';\nimport { supabase } from '../services/supabase.service';\nimport { contentService } from '../services/content.service';\nimport { Project, ProjectStage } from '../types/project.types';\n\nconst LOCAL_STORAGE_KEY = 'currentProjectId';\n\nexport const useProject = () => {\n  const [project, setProject] = useState<Project | null>(null);\n  const [currentStage, setCurrentStage] = useState<ProjectStage>('research');\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState<string | null>(null);\n\n  // Remove or comment out this auto-load effect\n  // useEffect(() => {\n  //   const savedProjectId = localStorage.getItem(LOCAL_STORAGE_KEY);\n  //   if (savedProjectId) {\n  //     loadProject(savedProjectId);\n  //   }\n  // }, []);\n\n  const loadProject = async (projectId: string) => {\n    try {\n      setIsLoading(true);\n      const { data, error } = await supabase\n        .from('projects')\n        .select('*')\n        .eq('id', projectId)\n        .single();\n\n      if (error) throw error;\n\n      setProject(data);\n      setCurrentStage(data.status);\n    } catch (err) {\n      setError(err instanceof Error ? err.message : 'Failed to load project');\n      toast.error('Failed to load project');\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const createProject = async (keyword: string): Promise<Project | null> => {\n    try {\n      setIsLoading(true);\n      setError(null);\n\n      const newProject = {\n        keyword,\n        status: 'research' as ProjectStage,\n        created_at: new Date().toISOString(),\n        updated_at: new Date().toISOString(),\n      };\n\n      const { data, error } = await supabase\n        .from('projects')\n        .insert([newProject])\n        .select()\n        .single();\n\n      if (error) throw error;\n\n      setProject(data);\n      setCurrentStage(data.status);\n      localStorage.setItem(LOCAL_STORAGE_KEY, data.id);\n      toast.success('Project created successfully!');\n      return data;\n    } catch (err) {\n      const errorMessage = err instanceof Error ? err.message : 'Failed to create project';\n      setError(errorMessage);\n      toast.error(errorMessage);\n      return null;\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const updateStage = async (projectId: string, newStage: ProjectStage): Promise<boolean> => {\n    try {\n      setIsLoading(true);\n      setError(null);\n\n      const { error } = await supabase\n        .from('projects')\n        .update({ \n          status: newStage,\n          updated_at: new Date().toISOString()\n        })\n        .eq('id', projectId);\n\n      if (error) throw error;\n\n      setCurrentStage(newStage);\n      if (project) {\n        setProject({ ...project, status: newStage });\n      }\n      toast.success(`Stage updated to ${newStage}`);\n      return true;\n    } catch (err) {\n      const errorMessage = err instanceof Error ? err.message : 'Failed to update stage';\n      setError(errorMessage);\n      toast.error(errorMessage);\n      return false;\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const getStageContent = useCallback(async (projectId: string, stageType: ProjectStage): Promise<any> => {\n    try {\n      setIsLoading(true);\n      setError(null);\n\n      const { data, error } = await supabase\n        .from('content_stages')\n        .select('*')\n        .eq('project_id', projectId)\n        .eq('stage_type', stageType)\n        .eq('is_current', true)\n        .single();\n\n      if (error && error.code !== 'PGRST116') { // PGRST116 is \"no rows found\"\n        throw error;\n      }\n\n      return data?.content || null;\n    } catch (err) {\n      const errorMessage = err instanceof Error ? err.message : 'Failed to get content';\n      setError(errorMessage);\n      console.error(`Failed to fetch ${stageType} content:`, err);\n      return null;\n    } finally {\n      setIsLoading(false);\n    }\n  }, []);\n\n  const regenerateContent = useCallback(async (\n    projectId: string,\n    stageType: ProjectStage,\n    params: any\n  ): Promise<any> => {\n    setIsLoading(true);\n    setError(null);\n\n    try {\n      let response;\n      \n      switch (stageType) {\n        case 'research':\n          response = await contentService.generateResearch(projectId, params.keyword);\n          break;\n          \n        case 'blog':\n          response = await contentService.generateBlog(\n            projectId, \n            params.keyword, \n            params.research\n          );\n          break;\n          \n        case 'podcast_script':\n          response = await contentService.generatePodcastScript(\n            projectId,\n            params.keyword,\n            params.research,\n            params.blog\n          );\n          break;\n          \n        default:\n          throw new Error('Invalid stage type');\n      }\n      \n      toast.success(`${stageType.replace('_', ' ')} generated successfully!`);\n      return response;\n    } catch (err: any) {\n      setError(err.message || `Failed to generate ${stageType}`);\n      toast.error(err.message || `Failed to generate ${stageType}`);\n      return null;\n    } finally {\n      setIsLoading(false);\n    }\n  }, []);\n\n  const clearProject = useCallback(() => {\n    setProject(null);\n    setCurrentStage('research');\n    localStorage.removeItem(LOCAL_STORAGE_KEY);\n  }, []);\n\n  return {\n    project,\n    currentStage,\n    isLoading,\n    error,\n    createProject,\n    updateStage,\n    getStageContent,\n    regenerateContent,\n    clearProject,\n  };\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}