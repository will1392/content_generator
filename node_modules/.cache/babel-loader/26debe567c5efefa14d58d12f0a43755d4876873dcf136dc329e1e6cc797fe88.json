{"ast":null,"code":"// services/ai/anthropic.service.ts\nimport axios from 'axios';\nconst ANTHROPIC_API_KEY = process.env.REACT_APP_ANTHROPIC_API_KEY;\nconst ANTHROPIC_API_URL = 'https://api.anthropic.com/v1/messages';\nexport class AnthropicService {\n  async makeRequest(messages, maxTokens = 4096) {\n    console.log('=== ANTHROPIC API REQUEST ===');\n    console.log('API Key exists:', !!ANTHROPIC_API_KEY);\n    console.log('API URL:', ANTHROPIC_API_URL);\n    console.log('Messages length:', messages.length);\n    console.log('Max tokens:', maxTokens);\n    if (!ANTHROPIC_API_KEY) {\n      throw new Error('Anthropic API key is not configured');\n    }\n    try {\n      console.time('Anthropic API Call');\n      const requestBody = {\n        model: 'claude-3-opus-20240229',\n        messages,\n        max_tokens: maxTokens,\n        temperature: 0.7\n      };\n      console.log('Request body keys:', Object.keys(requestBody));\n      const response = await axios.post(ANTHROPIC_API_URL, requestBody, {\n        headers: {\n          'x-api-key': ANTHROPIC_API_KEY,\n          'anthropic-version': '2023-06-01',\n          'Content-Type': 'application/json'\n        },\n        timeout: 120000 // 2 minute timeout\n      });\n      console.timeEnd('Anthropic API Call');\n      console.log('API response status:', response.status);\n      console.log('API response data keys:', Object.keys(response.data));\n      if (!response.data.content || !response.data.content[0]) {\n        throw new Error('Invalid API response structure');\n      }\n      return response.data.content[0].text;\n    } catch (error) {\n      var _error$response, _error$response2, _error$response3, _error$response3$data, _error$response3$data2;\n      console.error('=== ANTHROPIC API ERROR ===');\n      console.error('Error message:', error.message);\n      console.error('Error code:', error.code);\n      console.error('Response status:', (_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.status);\n      console.error('Response data:', (_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : _error$response2.data);\n      console.error('Is timeout:', error.code === 'ECONNABORTED');\n      console.error('===========================');\n      if (error.code === 'ECONNABORTED') {\n        throw new Error('Request timed out - please try again');\n      }\n      throw new Error(((_error$response3 = error.response) === null || _error$response3 === void 0 ? void 0 : (_error$response3$data = _error$response3.data) === null || _error$response3$data === void 0 ? void 0 : (_error$response3$data2 = _error$response3$data.error) === null || _error$response3$data2 === void 0 ? void 0 : _error$response3$data2.message) || error.message || 'Failed to generate content');\n    }\n  }\n  async generateBlog(keyword, research) {\n    console.log('Generating SEO-optimized blog for:', keyword);\n    console.log('Research data type:', typeof research);\n    console.log('Research keys:', research ? Object.keys(research) : 'No research');\n    const systemPrompt = `You are an expert SEO content writer who creates highly engaging, authoritative content that ranks well on Google. \n    You follow E-E-A-T principles and write content that demonstrates real expertise, experience, authority, and trustworthiness.\n    Your content is comprehensive, well-structured, and naturally incorporates keywords for optimal SEO performance.`;\n\n    // Build the research summary from whatever data we have\n    let researchSummary = '';\n\n    // Try to extract whatever data is available\n    if (research) {\n      if (research.definition) {\n        researchSummary += `\\nDefinition: ${research.definition}`;\n      }\n      if (research.overview) {\n        researchSummary += `\\nOverview: ${research.overview}`;\n      }\n      if (research.currentTrends && Array.isArray(research.currentTrends)) {\n        researchSummary += `\\nCurrent Trends: ${research.currentTrends.join(', ')}`;\n      }\n      if (research.statistics && Array.isArray(research.statistics)) {\n        researchSummary += `\\nKey Statistics: ${JSON.stringify(research.statistics.slice(0, 5))}`;\n      }\n      if (research.commonQuestions && Array.isArray(research.commonQuestions)) {\n        researchSummary += `\\nCommon Questions: ${research.commonQuestions.map(q => typeof q === 'string' ? q : q.question).join(', ')}`;\n      }\n      if (research.applications && Array.isArray(research.applications)) {\n        researchSummary += `\\nApplications: ${research.applications.join(', ')}`;\n      }\n      if (research.challenges && Array.isArray(research.challenges)) {\n        researchSummary += `\\nChallenges: ${research.challenges.join(', ')}`;\n      }\n      if (research.opportunities && Array.isArray(research.opportunities)) {\n        researchSummary += `\\nOpportunities: ${research.opportunities.join(', ')}`;\n      }\n    }\n\n    // If we couldn't extract structured data, just stringify what we have\n    if (!researchSummary) {\n      researchSummary = JSON.stringify(research, null, 2).slice(0, 3000);\n    }\n    const userPrompt = `Create a comprehensive, SEO-optimized blog post about \"${keyword}\" using the provided research data.\n\nRESEARCH DATA:${researchSummary}\n\nBLOG POST REQUIREMENTS:\n\n1. Create a blog post that is 1,500-2,000 words long\n2. Include an SEO-optimized title that naturally includes \"${keyword}\"\n3. Write a compelling meta description (155-160 characters)\n4. Structure with:\n   - Engaging introduction with a hook\n   - 5-7 main sections with H2 headings\n   - Subsections with H3 headings where appropriate\n   - Conclusion with clear call-to-action\n\n5. SEO Optimization:\n   - Use \"${keyword}\" naturally 5-7 times throughout\n   - Include semantic variations and related terms\n   - Target potential featured snippets with clear, concise answers\n   - Write in an easy-to-read style (8th-grade level)\n\n6. Demonstrate E-E-A-T:\n   - Show expertise through accurate information\n   - Include statistics and data points from the research\n   - Reference authoritative sources\n   - Provide practical, actionable advice\n\n7. Engagement:\n   - Use short paragraphs (2-3 sentences)\n   - Include bullet points and lists\n   - Add examples and analogies\n   - Keep the tone conversational but professional\n\nFORMAT YOUR RESPONSE AS JSON:\n{\n  \"title\": \"SEO-optimized title with keyword\",\n  \"metaDescription\": \"Compelling meta description 155-160 characters with keyword\",\n  \"content\": \"Full blog post in Markdown format with ## for H2 and ### for H3 headings\",\n  \"wordCount\": 1800,\n  \"readingTime\": 8,\n  \"targetKeywords\": [\"main keyword\", \"related keyword 1\", \"related keyword 2\"]\n}\n\nWrite an exceptional blog post that would rank well on Google and provide genuine value to readers.`;\n    const messages = [{\n      role: 'system',\n      content: systemPrompt\n    }, {\n      role: 'user',\n      content: userPrompt\n    }];\n    try {\n      const response = await this.makeRequest(messages);\n\n      // Try to parse the response\n      try {\n        const blogData = JSON.parse(response);\n\n        // Ensure we have the required fields\n        if (!blogData.wordCount) {\n          blogData.wordCount = blogData.content ? blogData.content.split(/\\s+/).length : 1500;\n        }\n        if (!blogData.readingTime) {\n          blogData.readingTime = Math.ceil(blogData.wordCount / 200);\n        }\n        return blogData;\n      } catch (parseError) {\n        console.error('Failed to parse JSON response, attempting to extract...');\n\n        // Try to extract JSON from the response\n        const jsonMatch = response.match(/\\{[\\s\\S]*\\}/);\n        if (jsonMatch) {\n          const extracted = JSON.parse(jsonMatch[0]);\n          if (!extracted.wordCount) {\n            extracted.wordCount = extracted.content ? extracted.content.split(/\\s+/).length : 1500;\n          }\n          if (!extracted.readingTime) {\n            extracted.readingTime = Math.ceil(extracted.wordCount / 200);\n          }\n          return extracted;\n        }\n\n        // If all else fails, create a basic structure\n        throw new Error('Could not parse blog response');\n      }\n    } catch (error) {\n      console.error('Blog generation error:', error);\n      throw error;\n    }\n  }\n  async generatePodcastScript(keyword, research, blog) {\n    var _blog$content;\n    console.log('Generating podcast script for:', keyword);\n    console.log('Blog content length:', ((_blog$content = blog.content) === null || _blog$content === void 0 ? void 0 : _blog$content.length) || 0);\n    console.log('Research keys:', research ? Object.keys(research) : 'No research');\n    const systemPrompt = `You are an expert podcast script writer who creates engaging, conversational, and informative podcast episodes. \n    You specialize in transforming written content into compelling audio experiences that keep listeners engaged throughout.\n    Your scripts are well-structured, include natural transitions, and maintain an conversational yet professional tone.`;\n\n    // Extract key points from the blog content\n    const blogSummary = blog.content ? blog.content.substring(0, 2000) : '';\n\n    // Build research insights\n    let researchInsights = '';\n    if (research) {\n      if (research.definition) researchInsights += `\\nKey Definition: ${research.definition}`;\n      if (research.currentTrends) researchInsights += `\\nTrends: ${Array.isArray(research.currentTrends) ? research.currentTrends.join(', ') : research.currentTrends}`;\n      if (research.statistics && Array.isArray(research.statistics)) {\n        researchInsights += `\\nStatistics: ${research.statistics.slice(0, 3).map(stat => typeof stat === 'object' ? `${stat.metric}: ${stat.value}` : stat).join(', ')}`;\n      }\n      if (research.applications) researchInsights += `\\nApplications: ${Array.isArray(research.applications) ? research.applications.join(', ') : research.applications}`;\n    }\n    const userPrompt = `Create an engaging podcast script about \"${keyword}\" based on the provided blog content and research.\n\nBLOG CONTENT SUMMARY:\n${blogSummary}\n\nRESEARCH INSIGHTS:${researchInsights}\n\nPODCAST SCRIPT REQUIREMENTS:\n\n1. **Format**: Create a solo podcast episode (single host format)\n2. **Duration**: 15-20 minutes (approximately 2,500-3,500 words)\n3. **Structure**:\n   - Engaging hook/intro (30-60 seconds)\n   - Welcome and episode overview\n   - 4-6 main segments with natural transitions\n   - Key takeaways/summary\n   - Call-to-action and outro\n\n4. **Tone & Style**:\n   - Conversational and approachable\n   - Professional but not stuffy\n   - Use \"you\" to connect with listeners\n   - Include natural pauses and emphasis cues\n   - Add occasional rhetorical questions\n\n5. **Content Guidelines**:\n   - Transform blog content into spoken format\n   - Include specific examples and stories\n   - Add transitions like \"Now here's what's interesting...\" or \"But wait, there's more...\"\n   - Include listener engagement phrases\n   - Add emphasis cues like [PAUSE], [EMPHASIS], [SLOW DOWN]\n\n6. **Engagement Elements**:\n   - Ask rhetorical questions to keep listeners thinking\n   - Include \"Did you know?\" moments\n   - Reference current trends and relatable examples\n   - Add preview teasers: \"We'll cover that in just a moment\"\n\nFORMAT YOUR RESPONSE AS JSON:\n{\n  \"title\": \"Engaging podcast episode title with keyword\",\n  \"script\": \"Full podcast script with speaker cues, pauses, and emphasis markers in markdown format\",\n  \"duration\": 18,\n  \"outline\": [\n    \"Introduction and hook\",\n    \"Main topic overview\", \n    \"Key point 1\",\n    \"Key point 2\", \n    \"Key point 3\",\n    \"Takeaways and conclusion\"\n  ]\n}\n\nCreate a script that would keep listeners engaged from start to finish while delivering valuable insights about ${keyword}.`;\n    const messages = [{\n      role: 'system',\n      content: systemPrompt\n    }, {\n      role: 'user',\n      content: userPrompt\n    }];\n    try {\n      const response = await this.makeRequest(messages, 4096);\n\n      // Try to parse the response\n      try {\n        const podcastData = JSON.parse(response);\n\n        // Ensure we have required fields\n        if (!podcastData.duration) {\n          podcastData.duration = 18; // Default 18 minutes\n        }\n        if (!podcastData.outline || !Array.isArray(podcastData.outline)) {\n          podcastData.outline = [\"Introduction and overview\", \"Main content discussion\", \"Key insights and examples\", \"Conclusion and takeaways\"];\n        }\n        return podcastData;\n      } catch (parseError) {\n        console.error('Failed to parse podcast JSON response, attempting to extract...');\n\n        // Try to extract JSON from the response\n        const jsonMatch = response.match(/\\{[\\s\\S]*\\}/);\n        if (jsonMatch) {\n          const extracted = JSON.parse(jsonMatch[0]);\n          if (!extracted.duration) extracted.duration = 18;\n          if (!extracted.outline) extracted.outline = [\"Introduction\", \"Main content\", \"Conclusion\"];\n          return extracted;\n        }\n\n        // Fallback: create basic structure from response\n        return {\n          title: `${keyword} Podcast Episode`,\n          script: response,\n          duration: 18,\n          outline: [\"Introduction\", \"Main discussion\", \"Key insights\", \"Conclusion\"]\n        };\n      }\n    } catch (error) {\n      console.error('Podcast generation error:', error);\n      throw error;\n    }\n  }\n  async generateSocialCaptions(keyword, blog, images) {\n    // Implementation coming next\n    throw new Error('Not implemented yet');\n  }\n}\nexport const anthropicService = new AnthropicService();","map":{"version":3,"names":["axios","ANTHROPIC_API_KEY","process","env","REACT_APP_ANTHROPIC_API_KEY","ANTHROPIC_API_URL","AnthropicService","makeRequest","messages","maxTokens","console","log","length","Error","time","requestBody","model","max_tokens","temperature","Object","keys","response","post","headers","timeout","timeEnd","status","data","content","text","error","_error$response","_error$response2","_error$response3","_error$response3$data","_error$response3$data2","message","code","generateBlog","keyword","research","systemPrompt","researchSummary","definition","overview","currentTrends","Array","isArray","join","statistics","JSON","stringify","slice","commonQuestions","map","q","question","applications","challenges","opportunities","userPrompt","role","blogData","parse","wordCount","split","readingTime","Math","ceil","parseError","jsonMatch","match","extracted","generatePodcastScript","blog","_blog$content","blogSummary","substring","researchInsights","stat","metric","value","podcastData","duration","outline","title","script","generateSocialCaptions","images","anthropicService"],"sources":["/Users/will/Content Creation App/src/services/ai/anthropic.service.ts"],"sourcesContent":["// services/ai/anthropic.service.ts\nimport axios from 'axios';\nimport { ResearchContent, BlogContent, PodcastContent, SocialContent } from '../../types/project.types';\n\nconst ANTHROPIC_API_KEY = process.env.REACT_APP_ANTHROPIC_API_KEY;\nconst ANTHROPIC_API_URL = 'https://api.anthropic.com/v1/messages';\n\nexport class AnthropicService {\n  private async makeRequest(messages: any[], maxTokens: number = 4096): Promise<string> {\n    console.log('=== ANTHROPIC API REQUEST ===');\n    console.log('API Key exists:', !!ANTHROPIC_API_KEY);\n    console.log('API URL:', ANTHROPIC_API_URL);\n    console.log('Messages length:', messages.length);\n    console.log('Max tokens:', maxTokens);\n    \n    if (!ANTHROPIC_API_KEY) {\n      throw new Error('Anthropic API key is not configured');\n    }\n    \n    try {\n      console.time('Anthropic API Call');\n      \n      const requestBody = {\n        model: 'claude-3-opus-20240229',\n        messages,\n        max_tokens: maxTokens,\n        temperature: 0.7,\n      };\n      \n      console.log('Request body keys:', Object.keys(requestBody));\n      \n      const response = await axios.post(\n        ANTHROPIC_API_URL,\n        requestBody,\n        {\n          headers: {\n            'x-api-key': ANTHROPIC_API_KEY,\n            'anthropic-version': '2023-06-01',\n            'Content-Type': 'application/json',\n          },\n          timeout: 120000, // 2 minute timeout\n        }\n      );\n\n      console.timeEnd('Anthropic API Call');\n      console.log('API response status:', response.status);\n      console.log('API response data keys:', Object.keys(response.data));\n      \n      if (!response.data.content || !response.data.content[0]) {\n        throw new Error('Invalid API response structure');\n      }\n      \n      return response.data.content[0].text;\n    } catch (error: any) {\n      console.error('=== ANTHROPIC API ERROR ===');\n      console.error('Error message:', error.message);\n      console.error('Error code:', error.code);\n      console.error('Response status:', error.response?.status);\n      console.error('Response data:', error.response?.data);\n      console.error('Is timeout:', error.code === 'ECONNABORTED');\n      console.error('===========================');\n      \n      if (error.code === 'ECONNABORTED') {\n        throw new Error('Request timed out - please try again');\n      }\n      \n      throw new Error(error.response?.data?.error?.message || error.message || 'Failed to generate content');\n    }\n  }\n\n  async generateBlog(keyword: string, research: any): Promise<BlogContent> {\n    console.log('Generating SEO-optimized blog for:', keyword);\n    console.log('Research data type:', typeof research);\n    console.log('Research keys:', research ? Object.keys(research) : 'No research');\n\n    const systemPrompt = `You are an expert SEO content writer who creates highly engaging, authoritative content that ranks well on Google. \n    You follow E-E-A-T principles and write content that demonstrates real expertise, experience, authority, and trustworthiness.\n    Your content is comprehensive, well-structured, and naturally incorporates keywords for optimal SEO performance.`;\n\n    // Build the research summary from whatever data we have\n    let researchSummary = '';\n    \n    // Try to extract whatever data is available\n    if (research) {\n      if (research.definition) {\n        researchSummary += `\\nDefinition: ${research.definition}`;\n      }\n      if (research.overview) {\n        researchSummary += `\\nOverview: ${research.overview}`;\n      }\n      if (research.currentTrends && Array.isArray(research.currentTrends)) {\n        researchSummary += `\\nCurrent Trends: ${research.currentTrends.join(', ')}`;\n      }\n      if (research.statistics && Array.isArray(research.statistics)) {\n        researchSummary += `\\nKey Statistics: ${JSON.stringify(research.statistics.slice(0, 5))}`;\n      }\n      if (research.commonQuestions && Array.isArray(research.commonQuestions)) {\n        researchSummary += `\\nCommon Questions: ${research.commonQuestions.map((q: any) => \n          typeof q === 'string' ? q : q.question\n        ).join(', ')}`;\n      }\n      if (research.applications && Array.isArray(research.applications)) {\n        researchSummary += `\\nApplications: ${research.applications.join(', ')}`;\n      }\n      if (research.challenges && Array.isArray(research.challenges)) {\n        researchSummary += `\\nChallenges: ${research.challenges.join(', ')}`;\n      }\n      if (research.opportunities && Array.isArray(research.opportunities)) {\n        researchSummary += `\\nOpportunities: ${research.opportunities.join(', ')}`;\n      }\n    }\n\n    // If we couldn't extract structured data, just stringify what we have\n    if (!researchSummary) {\n      researchSummary = JSON.stringify(research, null, 2).slice(0, 3000);\n    }\n\n    const userPrompt = `Create a comprehensive, SEO-optimized blog post about \"${keyword}\" using the provided research data.\n\nRESEARCH DATA:${researchSummary}\n\nBLOG POST REQUIREMENTS:\n\n1. Create a blog post that is 1,500-2,000 words long\n2. Include an SEO-optimized title that naturally includes \"${keyword}\"\n3. Write a compelling meta description (155-160 characters)\n4. Structure with:\n   - Engaging introduction with a hook\n   - 5-7 main sections with H2 headings\n   - Subsections with H3 headings where appropriate\n   - Conclusion with clear call-to-action\n\n5. SEO Optimization:\n   - Use \"${keyword}\" naturally 5-7 times throughout\n   - Include semantic variations and related terms\n   - Target potential featured snippets with clear, concise answers\n   - Write in an easy-to-read style (8th-grade level)\n\n6. Demonstrate E-E-A-T:\n   - Show expertise through accurate information\n   - Include statistics and data points from the research\n   - Reference authoritative sources\n   - Provide practical, actionable advice\n\n7. Engagement:\n   - Use short paragraphs (2-3 sentences)\n   - Include bullet points and lists\n   - Add examples and analogies\n   - Keep the tone conversational but professional\n\nFORMAT YOUR RESPONSE AS JSON:\n{\n  \"title\": \"SEO-optimized title with keyword\",\n  \"metaDescription\": \"Compelling meta description 155-160 characters with keyword\",\n  \"content\": \"Full blog post in Markdown format with ## for H2 and ### for H3 headings\",\n  \"wordCount\": 1800,\n  \"readingTime\": 8,\n  \"targetKeywords\": [\"main keyword\", \"related keyword 1\", \"related keyword 2\"]\n}\n\nWrite an exceptional blog post that would rank well on Google and provide genuine value to readers.`;\n\n    const messages = [\n      { role: 'system', content: systemPrompt },\n      { role: 'user', content: userPrompt }\n    ];\n\n    try {\n      const response = await this.makeRequest(messages);\n      \n      // Try to parse the response\n      try {\n        const blogData = JSON.parse(response);\n        \n        // Ensure we have the required fields\n        if (!blogData.wordCount) {\n          blogData.wordCount = blogData.content ? blogData.content.split(/\\s+/).length : 1500;\n        }\n        if (!blogData.readingTime) {\n          blogData.readingTime = Math.ceil(blogData.wordCount / 200);\n        }\n        \n        return blogData as BlogContent;\n      } catch (parseError) {\n        console.error('Failed to parse JSON response, attempting to extract...');\n        \n        // Try to extract JSON from the response\n        const jsonMatch = response.match(/\\{[\\s\\S]*\\}/);\n        if (jsonMatch) {\n          const extracted = JSON.parse(jsonMatch[0]);\n          if (!extracted.wordCount) {\n            extracted.wordCount = extracted.content ? extracted.content.split(/\\s+/).length : 1500;\n          }\n          if (!extracted.readingTime) {\n            extracted.readingTime = Math.ceil(extracted.wordCount / 200);\n          }\n          return extracted as BlogContent;\n        }\n        \n        // If all else fails, create a basic structure\n        throw new Error('Could not parse blog response');\n      }\n    } catch (error: any) {\n      console.error('Blog generation error:', error);\n      throw error;\n    }\n  }\n\n  async generatePodcastScript(\n    keyword: string, \n    research: ResearchContent, \n    blog: BlogContent\n  ): Promise<PodcastContent> {\n    console.log('Generating podcast script for:', keyword);\n    console.log('Blog content length:', blog.content?.length || 0);\n    console.log('Research keys:', research ? Object.keys(research) : 'No research');\n\n    const systemPrompt = `You are an expert podcast script writer who creates engaging, conversational, and informative podcast episodes. \n    You specialize in transforming written content into compelling audio experiences that keep listeners engaged throughout.\n    Your scripts are well-structured, include natural transitions, and maintain an conversational yet professional tone.`;\n\n    // Extract key points from the blog content\n    const blogSummary = blog.content ? blog.content.substring(0, 2000) : '';\n    \n    // Build research insights\n    let researchInsights = '';\n    if (research) {\n      if (research.definition) researchInsights += `\\nKey Definition: ${research.definition}`;\n      if (research.currentTrends) researchInsights += `\\nTrends: ${Array.isArray(research.currentTrends) ? research.currentTrends.join(', ') : research.currentTrends}`;\n      if (research.statistics && Array.isArray(research.statistics)) {\n        researchInsights += `\\nStatistics: ${research.statistics.slice(0, 3).map(stat => \n          typeof stat === 'object' ? `${stat.metric}: ${stat.value}` : stat\n        ).join(', ')}`;\n      }\n      if (research.applications) researchInsights += `\\nApplications: ${Array.isArray(research.applications) ? research.applications.join(', ') : research.applications}`;\n    }\n\n    const userPrompt = `Create an engaging podcast script about \"${keyword}\" based on the provided blog content and research.\n\nBLOG CONTENT SUMMARY:\n${blogSummary}\n\nRESEARCH INSIGHTS:${researchInsights}\n\nPODCAST SCRIPT REQUIREMENTS:\n\n1. **Format**: Create a solo podcast episode (single host format)\n2. **Duration**: 15-20 minutes (approximately 2,500-3,500 words)\n3. **Structure**:\n   - Engaging hook/intro (30-60 seconds)\n   - Welcome and episode overview\n   - 4-6 main segments with natural transitions\n   - Key takeaways/summary\n   - Call-to-action and outro\n\n4. **Tone & Style**:\n   - Conversational and approachable\n   - Professional but not stuffy\n   - Use \"you\" to connect with listeners\n   - Include natural pauses and emphasis cues\n   - Add occasional rhetorical questions\n\n5. **Content Guidelines**:\n   - Transform blog content into spoken format\n   - Include specific examples and stories\n   - Add transitions like \"Now here's what's interesting...\" or \"But wait, there's more...\"\n   - Include listener engagement phrases\n   - Add emphasis cues like [PAUSE], [EMPHASIS], [SLOW DOWN]\n\n6. **Engagement Elements**:\n   - Ask rhetorical questions to keep listeners thinking\n   - Include \"Did you know?\" moments\n   - Reference current trends and relatable examples\n   - Add preview teasers: \"We'll cover that in just a moment\"\n\nFORMAT YOUR RESPONSE AS JSON:\n{\n  \"title\": \"Engaging podcast episode title with keyword\",\n  \"script\": \"Full podcast script with speaker cues, pauses, and emphasis markers in markdown format\",\n  \"duration\": 18,\n  \"outline\": [\n    \"Introduction and hook\",\n    \"Main topic overview\", \n    \"Key point 1\",\n    \"Key point 2\", \n    \"Key point 3\",\n    \"Takeaways and conclusion\"\n  ]\n}\n\nCreate a script that would keep listeners engaged from start to finish while delivering valuable insights about ${keyword}.`;\n\n    const messages = [\n      { role: 'system', content: systemPrompt },\n      { role: 'user', content: userPrompt }\n    ];\n\n    try {\n      const response = await this.makeRequest(messages, 4096);\n      \n      // Try to parse the response\n      try {\n        const podcastData = JSON.parse(response);\n        \n        // Ensure we have required fields\n        if (!podcastData.duration) {\n          podcastData.duration = 18; // Default 18 minutes\n        }\n        if (!podcastData.outline || !Array.isArray(podcastData.outline)) {\n          podcastData.outline = [\n            \"Introduction and overview\",\n            \"Main content discussion\", \n            \"Key insights and examples\",\n            \"Conclusion and takeaways\"\n          ];\n        }\n        \n        return podcastData as PodcastContent;\n      } catch (parseError) {\n        console.error('Failed to parse podcast JSON response, attempting to extract...');\n        \n        // Try to extract JSON from the response\n        const jsonMatch = response.match(/\\{[\\s\\S]*\\}/);\n        if (jsonMatch) {\n          const extracted = JSON.parse(jsonMatch[0]);\n          if (!extracted.duration) extracted.duration = 18;\n          if (!extracted.outline) extracted.outline = [\"Introduction\", \"Main content\", \"Conclusion\"];\n          return extracted as PodcastContent;\n        }\n        \n        // Fallback: create basic structure from response\n        return {\n          title: `${keyword} Podcast Episode`,\n          script: response,\n          duration: 18,\n          outline: [\"Introduction\", \"Main discussion\", \"Key insights\", \"Conclusion\"]\n        } as PodcastContent;\n      }\n    } catch (error: any) {\n      console.error('Podcast generation error:', error);\n      throw error;\n    }\n  }\n\n  async generateSocialCaptions(\n    keyword: string,\n    blog: BlogContent,\n    images: any\n  ): Promise<SocialContent> {\n    // Implementation coming next\n    throw new Error('Not implemented yet');\n  }\n}\n\nexport const anthropicService = new AnthropicService();"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}