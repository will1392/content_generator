{"ast":null,"code":"// services/content.service.ts\nimport { perplexityService } from './ai/perplexity.service';\nimport { supabase } from './supabase.service';\nexport class ContentService {\n  async generateResearch(projectId, keyword) {\n    try {\n      console.log('ContentService: Starting research generation for:', keyword);\n      console.log('ContentService: Project ID:', projectId);\n\n      // Call Perplexity API\n      console.log('ContentService: Calling Perplexity API...');\n      const research = await perplexityService.generateResearch(keyword);\n      console.log('ContentService: Research received from Perplexity');\n\n      // Save to Supabase\n      console.log('ContentService: Saving to Supabase...');\n      await this.saveContent(projectId, 'research', research);\n      console.log('ContentService: Successfully saved to Supabase');\n      return research;\n    } catch (error) {\n      console.error('ContentService: Research generation failed:', error);\n      console.error('ContentService: Error details:', {\n        message: error.message,\n        stack: error.stack,\n        name: error.name\n      });\n      throw new Error(error.message || 'Failed to generate research');\n    }\n  }\n  async generateBlog(projectId, keyword, research) {\n    try {\n      console.log('ContentService: Starting blog generation for:', keyword);\n      console.log('ContentService: Project ID:', projectId);\n\n      // Use Perplexity API for blog generation (Anthropic has CORS issues)\n      console.log('ContentService: Calling Perplexity API for blog...');\n      const blog = await perplexityService.generateBlog(keyword, research);\n      console.log('ContentService: Blog received from Perplexity');\n\n      // Save to Supabase\n      console.log('ContentService: Saving blog to Supabase...');\n      await this.saveContent(projectId, 'blog', blog);\n      console.log('ContentService: Successfully saved blog to Supabase');\n      return blog;\n    } catch (error) {\n      console.error('ContentService: Blog generation failed:', error);\n      console.error('ContentService: Error details:', {\n        message: error.message,\n        stack: error.stack,\n        name: error.name,\n        isCORSError: error.message.includes('CORS') || error.message.includes('Network Error')\n      });\n\n      // If it's a CORS/Network error, provide helpful message\n      if (error.message.includes('CORS') || error.message.includes('Network Error')) {\n        throw new Error('Cannot connect to AI service due to browser security restrictions. A backend proxy is needed for this feature.');\n      }\n      throw new Error(error.message || 'Failed to generate blog');\n    }\n  }\n  async saveContent(projectId, stageType, content) {\n    console.log('ContentService: Saving content to database...');\n    console.log('ContentService: Content keys:', Object.keys(content || {}));\n    try {\n      var _data$;\n      // Mark previous versions as not current\n      console.log('ContentService: Marking previous versions as not current...');\n      const {\n        error: updateError\n      } = await supabase.from('content_stages').update({\n        is_current: false\n      }).eq('project_id', projectId).eq('stage_type', stageType);\n      if (updateError) {\n        console.warn('ContentService: Error updating old content (this is okay if no old content exists):', updateError);\n      }\n\n      // Insert new version\n      console.log('ContentService: Inserting new content version...');\n      const {\n        data,\n        error\n      } = await supabase.from('content_stages').insert({\n        project_id: projectId,\n        stage_type: stageType,\n        content,\n        is_current: true,\n        created_at: new Date().toISOString()\n      }).select();\n      if (error) {\n        console.error('ContentService: Database insert error:', error);\n        throw error;\n      }\n      console.log('ContentService: Content saved successfully, record ID:', data === null || data === void 0 ? void 0 : (_data$ = data[0]) === null || _data$ === void 0 ? void 0 : _data$.id);\n    } catch (error) {\n      console.error('ContentService: Save content error:', error);\n      throw error;\n    }\n  }\n}\nexport const contentService = new ContentService();","map":{"version":3,"names":["perplexityService","supabase","ContentService","generateResearch","projectId","keyword","console","log","research","saveContent","error","message","stack","name","Error","generateBlog","blog","isCORSError","includes","stageType","content","Object","keys","_data$","updateError","from","update","is_current","eq","warn","data","insert","project_id","stage_type","created_at","Date","toISOString","select","id","contentService"],"sources":["/Users/will/Content Creation App/src/services/content.service.ts"],"sourcesContent":["// services/content.service.ts\nimport { perplexityService } from './ai/perplexity.service';\nimport { anthropicService } from './ai/anthropic.service';\nimport { supabase } from './supabase.service';\nimport { ResearchContent, BlogContent } from '../types/project.types';\n\nexport class ContentService {\n  async generateResearch(projectId: string, keyword: string): Promise<ResearchContent> {\n    try {\n      console.log('ContentService: Starting research generation for:', keyword);\n      console.log('ContentService: Project ID:', projectId);\n      \n      // Call Perplexity API\n      console.log('ContentService: Calling Perplexity API...');\n      const research = await perplexityService.generateResearch(keyword);\n      console.log('ContentService: Research received from Perplexity');\n      \n      // Save to Supabase\n      console.log('ContentService: Saving to Supabase...');\n      await this.saveContent(projectId, 'research', research);\n      console.log('ContentService: Successfully saved to Supabase');\n      \n      return research;\n    } catch (error: any) {\n      console.error('ContentService: Research generation failed:', error);\n      console.error('ContentService: Error details:', {\n        message: error.message,\n        stack: error.stack,\n        name: error.name\n      });\n      throw new Error(error.message || 'Failed to generate research');\n    }\n  }\n\n  async generateBlog(projectId: string, keyword: string, research: ResearchContent): Promise<BlogContent> {\n    try {\n      console.log('ContentService: Starting blog generation for:', keyword);\n      console.log('ContentService: Project ID:', projectId);\n      \n      // Use Perplexity API for blog generation (Anthropic has CORS issues)\n      console.log('ContentService: Calling Perplexity API for blog...');\n      const blog = await perplexityService.generateBlog(keyword, research);\n      console.log('ContentService: Blog received from Perplexity');\n      \n      // Save to Supabase\n      console.log('ContentService: Saving blog to Supabase...');\n      await this.saveContent(projectId, 'blog', blog);\n      console.log('ContentService: Successfully saved blog to Supabase');\n      \n      return blog;\n    } catch (error: any) {\n      console.error('ContentService: Blog generation failed:', error);\n      console.error('ContentService: Error details:', {\n        message: error.message,\n        stack: error.stack,\n        name: error.name,\n        isCORSError: error.message.includes('CORS') || error.message.includes('Network Error')\n      });\n      \n      // If it's a CORS/Network error, provide helpful message\n      if (error.message.includes('CORS') || error.message.includes('Network Error')) {\n        throw new Error('Cannot connect to AI service due to browser security restrictions. A backend proxy is needed for this feature.');\n      }\n      \n      throw new Error(error.message || 'Failed to generate blog');\n    }\n  }\n\n  private async saveContent(\n    projectId: string,\n    stageType: string,\n    content: any\n  ): Promise<void> {\n    console.log('ContentService: Saving content to database...');\n    console.log('ContentService: Content keys:', Object.keys(content || {}));\n    \n    try {\n      // Mark previous versions as not current\n      console.log('ContentService: Marking previous versions as not current...');\n      const { error: updateError } = await supabase\n        .from('content_stages')\n        .update({ is_current: false })\n        .eq('project_id', projectId)\n        .eq('stage_type', stageType);\n\n      if (updateError) {\n        console.warn('ContentService: Error updating old content (this is okay if no old content exists):', updateError);\n      }\n\n      // Insert new version\n      console.log('ContentService: Inserting new content version...');\n      const { data, error } = await supabase\n        .from('content_stages')\n        .insert({\n          project_id: projectId,\n          stage_type: stageType,\n          content,\n          is_current: true,\n          created_at: new Date().toISOString()\n        })\n        .select();\n\n      if (error) {\n        console.error('ContentService: Database insert error:', error);\n        throw error;\n      }\n      \n      console.log('ContentService: Content saved successfully, record ID:', data?.[0]?.id);\n    } catch (error) {\n      console.error('ContentService: Save content error:', error);\n      throw error;\n    }\n  }\n}\n\nexport const contentService = new ContentService();"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}