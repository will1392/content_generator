{"ast":null,"code":"import { supabase } from './supabase.service';\nexport class ClientService {\n  // Client Management\n  async createClient(clientData) {\n    try {\n      const {\n        data,\n        error\n      } = await supabase.from('clients').insert([clientData]).select().single();\n      if (error) throw error;\n      return data;\n    } catch (error) {\n      console.error('Error creating client:', error);\n      throw error;\n    }\n  }\n  async getClients() {\n    try {\n      const {\n        data,\n        error\n      } = await supabase.from('clients').select('*').eq('is_active', true).order('name');\n      if (error) throw error;\n      return data || [];\n    } catch (error) {\n      console.error('Error fetching clients:', error);\n      throw error;\n    }\n  }\n  async getClient(clientId) {\n    try {\n      const {\n        data,\n        error\n      } = await supabase.from('clients').select('*').eq('id', clientId).single();\n      if (error) throw error;\n      return data;\n    } catch (error) {\n      console.error('Error fetching client:', error);\n      throw error;\n    }\n  }\n  async updateClient(clientId, updates) {\n    try {\n      const {\n        data,\n        error\n      } = await supabase.from('clients').update({\n        ...updates,\n        updated_at: new Date().toISOString()\n      }).eq('id', clientId).select().single();\n      if (error) throw error;\n      return data;\n    } catch (error) {\n      console.error('Error updating client:', error);\n      throw error;\n    }\n  }\n\n  // Project Management\n  async createClientProject(projectData) {\n    try {\n      const {\n        data,\n        error\n      } = await supabase.from('client_projects').insert([projectData]).select().single();\n      if (error) throw error;\n      return data;\n    } catch (error) {\n      console.error('Error creating client project:', error);\n      throw error;\n    }\n  }\n  async getClientProjects(clientId) {\n    try {\n      const {\n        data,\n        error\n      } = await supabase.from('client_projects').select('*').eq('client_id', clientId).order('created_at', {\n        ascending: false\n      });\n      if (error) throw error;\n      return data || [];\n    } catch (error) {\n      console.error('Error fetching client projects:', error);\n      throw error;\n    }\n  }\n\n  // Content Management\n  async createProjectContent(contentData) {\n    try {\n      const {\n        data,\n        error\n      } = await supabase.from('project_contents').insert([{\n        ...contentData,\n        stage: 'research',\n        stage_data: {}\n      }]).select().single();\n      if (error) throw error;\n      return data;\n    } catch (error) {\n      console.error('Error creating project content:', error);\n      throw error;\n    }\n  }\n  async getProjectContents(clientProjectId) {\n    try {\n      const {\n        data,\n        error\n      } = await supabase.from('project_contents').select('*').eq('client_project_id', clientProjectId).order('created_at', {\n        ascending: false\n      });\n      if (error) throw error;\n      return data || [];\n    } catch (error) {\n      console.error('Error fetching project contents:', error);\n      throw error;\n    }\n  }\n  async getProjectContent(contentId) {\n    try {\n      const {\n        data,\n        error\n      } = await supabase.from('project_contents').select('*').eq('id', contentId).single();\n      if (error) throw error;\n      return data;\n    } catch (error) {\n      console.error('Error fetching project content:', error);\n      throw error;\n    }\n  }\n\n  // Auto-save functionality\n  async autoSaveContent(contentId, stage, data) {\n    try {\n      // Update the main content record\n      const {\n        error: updateError\n      } = await supabase.from('project_contents').update({\n        stage,\n        stage_data: data,\n        last_saved_at: new Date().toISOString(),\n        updated_at: new Date().toISOString()\n      }).eq('id', contentId);\n      if (updateError) throw updateError;\n\n      // Save to auto_saves table for history\n      const {\n        error: saveError\n      } = await supabase.from('auto_saves').insert([{\n        content_id: contentId,\n        stage,\n        data\n      }]);\n      if (saveError) throw saveError;\n    } catch (error) {\n      console.error('Error auto-saving content:', error);\n      throw error;\n    }\n  }\n\n  // Dashboard data\n  async getClientDashboardData() {\n    try {\n      const {\n        data: clients,\n        error: clientError\n      } = await supabase.from('clients').select(`\n          *,\n          client_projects (\n            *,\n            project_contents (*)\n          )\n        `).eq('is_active', true).order('name');\n      if (clientError) throw clientError;\n\n      // Transform the data to match our TypeScript types\n      return (clients || []).map(client => ({\n        ...client,\n        projects: client.client_projects.map(project => ({\n          ...project,\n          contents: project.project_contents || []\n        }))\n      }));\n    } catch (error) {\n      console.error('Error fetching dashboard data:', error);\n      throw error;\n    }\n  }\n\n  // Search functionality\n  async searchContent(searchTerm) {\n    try {\n      const {\n        data,\n        error\n      } = await supabase.from('project_contents').select(`\n          *,\n          client_projects!inner (\n            *,\n            clients!inner (*)\n          )\n        `).or(`keyword.ilike.%${searchTerm}%,content_name.ilike.%${searchTerm}%`).order('updated_at', {\n        ascending: false\n      });\n      if (error) throw error;\n      return data || [];\n    } catch (error) {\n      console.error('Error searching content:', error);\n      throw error;\n    }\n  }\n}\nexport const clientService = new ClientService();","map":{"version":3,"names":["supabase","ClientService","createClient","clientData","data","error","from","insert","select","single","console","getClients","eq","order","getClient","clientId","updateClient","updates","update","updated_at","Date","toISOString","createClientProject","projectData","getClientProjects","ascending","createProjectContent","contentData","stage","stage_data","getProjectContents","clientProjectId","getProjectContent","contentId","autoSaveContent","updateError","last_saved_at","saveError","content_id","getClientDashboardData","clients","clientError","map","client","projects","client_projects","project","contents","project_contents","searchContent","searchTerm","or","clientService"],"sources":["/Users/will/Content Creation App/src/services/client.service.ts"],"sourcesContent":["import { supabase } from './supabase.service';\nimport { Client, ClientProject, ProjectContent, ClientWithProjects } from '../types/client.types';\nimport { ProjectStage } from '../types/project.types';\n\nexport class ClientService {\n  // Client Management\n  async createClient(clientData: Omit<Client, 'id' | 'created_at' | 'updated_at'>): Promise<Client | null> {\n    try {\n      const { data, error } = await supabase\n        .from('clients')\n        .insert([clientData])\n        .select()\n        .single();\n\n      if (error) throw error;\n      return data;\n    } catch (error) {\n      console.error('Error creating client:', error);\n      throw error;\n    }\n  }\n\n  async getClients(): Promise<Client[]> {\n    try {\n      const { data, error } = await supabase\n        .from('clients')\n        .select('*')\n        .eq('is_active', true)\n        .order('name');\n\n      if (error) throw error;\n      return data || [];\n    } catch (error) {\n      console.error('Error fetching clients:', error);\n      throw error;\n    }\n  }\n\n  async getClient(clientId: string): Promise<Client | null> {\n    try {\n      const { data, error } = await supabase\n        .from('clients')\n        .select('*')\n        .eq('id', clientId)\n        .single();\n\n      if (error) throw error;\n      return data;\n    } catch (error) {\n      console.error('Error fetching client:', error);\n      throw error;\n    }\n  }\n\n  async updateClient(clientId: string, updates: Partial<Client>): Promise<Client | null> {\n    try {\n      const { data, error } = await supabase\n        .from('clients')\n        .update({\n          ...updates,\n          updated_at: new Date().toISOString()\n        })\n        .eq('id', clientId)\n        .select()\n        .single();\n\n      if (error) throw error;\n      return data;\n    } catch (error) {\n      console.error('Error updating client:', error);\n      throw error;\n    }\n  }\n\n  // Project Management\n  async createClientProject(projectData: Omit<ClientProject, 'id' | 'created_at' | 'updated_at'>): Promise<ClientProject | null> {\n    try {\n      const { data, error } = await supabase\n        .from('client_projects')\n        .insert([projectData])\n        .select()\n        .single();\n\n      if (error) throw error;\n      return data;\n    } catch (error) {\n      console.error('Error creating client project:', error);\n      throw error;\n    }\n  }\n\n  async getClientProjects(clientId: string): Promise<ClientProject[]> {\n    try {\n      const { data, error } = await supabase\n        .from('client_projects')\n        .select('*')\n        .eq('client_id', clientId)\n        .order('created_at', { ascending: false });\n\n      if (error) throw error;\n      return data || [];\n    } catch (error) {\n      console.error('Error fetching client projects:', error);\n      throw error;\n    }\n  }\n\n  // Content Management\n  async createProjectContent(contentData: {\n    client_project_id: string;\n    content_name: string;\n    keyword: string;\n  }): Promise<ProjectContent | null> {\n    try {\n      const { data, error } = await supabase\n        .from('project_contents')\n        .insert([{\n          ...contentData,\n          stage: 'research',\n          stage_data: {}\n        }])\n        .select()\n        .single();\n\n      if (error) throw error;\n      return data;\n    } catch (error) {\n      console.error('Error creating project content:', error);\n      throw error;\n    }\n  }\n\n  async getProjectContents(clientProjectId: string): Promise<ProjectContent[]> {\n    try {\n      const { data, error } = await supabase\n        .from('project_contents')\n        .select('*')\n        .eq('client_project_id', clientProjectId)\n        .order('created_at', { ascending: false });\n\n      if (error) throw error;\n      return data || [];\n    } catch (error) {\n      console.error('Error fetching project contents:', error);\n      throw error;\n    }\n  }\n\n  async getProjectContent(contentId: string): Promise<ProjectContent | null> {\n    try {\n      const { data, error } = await supabase\n        .from('project_contents')\n        .select('*')\n        .eq('id', contentId)\n        .single();\n\n      if (error) throw error;\n      return data;\n    } catch (error) {\n      console.error('Error fetching project content:', error);\n      throw error;\n    }\n  }\n\n  // Auto-save functionality\n  async autoSaveContent(contentId: string, stage: ProjectStage, data: any): Promise<void> {\n    try {\n      // Update the main content record\n      const { error: updateError } = await supabase\n        .from('project_contents')\n        .update({\n          stage,\n          stage_data: data,\n          last_saved_at: new Date().toISOString(),\n          updated_at: new Date().toISOString()\n        })\n        .eq('id', contentId);\n\n      if (updateError) throw updateError;\n\n      // Save to auto_saves table for history\n      const { error: saveError } = await supabase\n        .from('auto_saves')\n        .insert([{\n          content_id: contentId,\n          stage,\n          data\n        }]);\n\n      if (saveError) throw saveError;\n    } catch (error) {\n      console.error('Error auto-saving content:', error);\n      throw error;\n    }\n  }\n\n  // Dashboard data\n  async getClientDashboardData(): Promise<ClientWithProjects[]> {\n    try {\n      const { data: clients, error: clientError } = await supabase\n        .from('clients')\n        .select(`\n          *,\n          client_projects (\n            *,\n            project_contents (*)\n          )\n        `)\n        .eq('is_active', true)\n        .order('name');\n\n      if (clientError) throw clientError;\n\n      // Transform the data to match our TypeScript types\n      return (clients || []).map(client => ({\n        ...client,\n        projects: client.client_projects.map((project: any) => ({\n          ...project,\n          contents: project.project_contents || []\n        }))\n      }));\n    } catch (error) {\n      console.error('Error fetching dashboard data:', error);\n      throw error;\n    }\n  }\n\n  // Search functionality\n  async searchContent(searchTerm: string): Promise<ProjectContent[]> {\n    try {\n      const { data, error } = await supabase\n        .from('project_contents')\n        .select(`\n          *,\n          client_projects!inner (\n            *,\n            clients!inner (*)\n          )\n        `)\n        .or(`keyword.ilike.%${searchTerm}%,content_name.ilike.%${searchTerm}%`)\n        .order('updated_at', { ascending: false });\n\n      if (error) throw error;\n      return data || [];\n    } catch (error) {\n      console.error('Error searching content:', error);\n      throw error;\n    }\n  }\n}\n\nexport const clientService = new ClientService();"],"mappings":"AAAA,SAASA,QAAQ,QAAQ,oBAAoB;AAI7C,OAAO,MAAMC,aAAa,CAAC;EACzB;EACA,MAAMC,YAAYA,CAACC,UAA4D,EAA0B;IACvG,IAAI;MACF,MAAM;QAAEC,IAAI;QAAEC;MAAM,CAAC,GAAG,MAAML,QAAQ,CACnCM,IAAI,CAAC,SAAS,CAAC,CACfC,MAAM,CAAC,CAACJ,UAAU,CAAC,CAAC,CACpBK,MAAM,CAAC,CAAC,CACRC,MAAM,CAAC,CAAC;MAEX,IAAIJ,KAAK,EAAE,MAAMA,KAAK;MACtB,OAAOD,IAAI;IACb,CAAC,CAAC,OAAOC,KAAK,EAAE;MACdK,OAAO,CAACL,KAAK,CAAC,wBAAwB,EAAEA,KAAK,CAAC;MAC9C,MAAMA,KAAK;IACb;EACF;EAEA,MAAMM,UAAUA,CAAA,EAAsB;IACpC,IAAI;MACF,MAAM;QAAEP,IAAI;QAAEC;MAAM,CAAC,GAAG,MAAML,QAAQ,CACnCM,IAAI,CAAC,SAAS,CAAC,CACfE,MAAM,CAAC,GAAG,CAAC,CACXI,EAAE,CAAC,WAAW,EAAE,IAAI,CAAC,CACrBC,KAAK,CAAC,MAAM,CAAC;MAEhB,IAAIR,KAAK,EAAE,MAAMA,KAAK;MACtB,OAAOD,IAAI,IAAI,EAAE;IACnB,CAAC,CAAC,OAAOC,KAAK,EAAE;MACdK,OAAO,CAACL,KAAK,CAAC,yBAAyB,EAAEA,KAAK,CAAC;MAC/C,MAAMA,KAAK;IACb;EACF;EAEA,MAAMS,SAASA,CAACC,QAAgB,EAA0B;IACxD,IAAI;MACF,MAAM;QAAEX,IAAI;QAAEC;MAAM,CAAC,GAAG,MAAML,QAAQ,CACnCM,IAAI,CAAC,SAAS,CAAC,CACfE,MAAM,CAAC,GAAG,CAAC,CACXI,EAAE,CAAC,IAAI,EAAEG,QAAQ,CAAC,CAClBN,MAAM,CAAC,CAAC;MAEX,IAAIJ,KAAK,EAAE,MAAMA,KAAK;MACtB,OAAOD,IAAI;IACb,CAAC,CAAC,OAAOC,KAAK,EAAE;MACdK,OAAO,CAACL,KAAK,CAAC,wBAAwB,EAAEA,KAAK,CAAC;MAC9C,MAAMA,KAAK;IACb;EACF;EAEA,MAAMW,YAAYA,CAACD,QAAgB,EAAEE,OAAwB,EAA0B;IACrF,IAAI;MACF,MAAM;QAAEb,IAAI;QAAEC;MAAM,CAAC,GAAG,MAAML,QAAQ,CACnCM,IAAI,CAAC,SAAS,CAAC,CACfY,MAAM,CAAC;QACN,GAAGD,OAAO;QACVE,UAAU,EAAE,IAAIC,IAAI,CAAC,CAAC,CAACC,WAAW,CAAC;MACrC,CAAC,CAAC,CACDT,EAAE,CAAC,IAAI,EAAEG,QAAQ,CAAC,CAClBP,MAAM,CAAC,CAAC,CACRC,MAAM,CAAC,CAAC;MAEX,IAAIJ,KAAK,EAAE,MAAMA,KAAK;MACtB,OAAOD,IAAI;IACb,CAAC,CAAC,OAAOC,KAAK,EAAE;MACdK,OAAO,CAACL,KAAK,CAAC,wBAAwB,EAAEA,KAAK,CAAC;MAC9C,MAAMA,KAAK;IACb;EACF;;EAEA;EACA,MAAMiB,mBAAmBA,CAACC,WAAoE,EAAiC;IAC7H,IAAI;MACF,MAAM;QAAEnB,IAAI;QAAEC;MAAM,CAAC,GAAG,MAAML,QAAQ,CACnCM,IAAI,CAAC,iBAAiB,CAAC,CACvBC,MAAM,CAAC,CAACgB,WAAW,CAAC,CAAC,CACrBf,MAAM,CAAC,CAAC,CACRC,MAAM,CAAC,CAAC;MAEX,IAAIJ,KAAK,EAAE,MAAMA,KAAK;MACtB,OAAOD,IAAI;IACb,CAAC,CAAC,OAAOC,KAAK,EAAE;MACdK,OAAO,CAACL,KAAK,CAAC,gCAAgC,EAAEA,KAAK,CAAC;MACtD,MAAMA,KAAK;IACb;EACF;EAEA,MAAMmB,iBAAiBA,CAACT,QAAgB,EAA4B;IAClE,IAAI;MACF,MAAM;QAAEX,IAAI;QAAEC;MAAM,CAAC,GAAG,MAAML,QAAQ,CACnCM,IAAI,CAAC,iBAAiB,CAAC,CACvBE,MAAM,CAAC,GAAG,CAAC,CACXI,EAAE,CAAC,WAAW,EAAEG,QAAQ,CAAC,CACzBF,KAAK,CAAC,YAAY,EAAE;QAAEY,SAAS,EAAE;MAAM,CAAC,CAAC;MAE5C,IAAIpB,KAAK,EAAE,MAAMA,KAAK;MACtB,OAAOD,IAAI,IAAI,EAAE;IACnB,CAAC,CAAC,OAAOC,KAAK,EAAE;MACdK,OAAO,CAACL,KAAK,CAAC,iCAAiC,EAAEA,KAAK,CAAC;MACvD,MAAMA,KAAK;IACb;EACF;;EAEA;EACA,MAAMqB,oBAAoBA,CAACC,WAI1B,EAAkC;IACjC,IAAI;MACF,MAAM;QAAEvB,IAAI;QAAEC;MAAM,CAAC,GAAG,MAAML,QAAQ,CACnCM,IAAI,CAAC,kBAAkB,CAAC,CACxBC,MAAM,CAAC,CAAC;QACP,GAAGoB,WAAW;QACdC,KAAK,EAAE,UAAU;QACjBC,UAAU,EAAE,CAAC;MACf,CAAC,CAAC,CAAC,CACFrB,MAAM,CAAC,CAAC,CACRC,MAAM,CAAC,CAAC;MAEX,IAAIJ,KAAK,EAAE,MAAMA,KAAK;MACtB,OAAOD,IAAI;IACb,CAAC,CAAC,OAAOC,KAAK,EAAE;MACdK,OAAO,CAACL,KAAK,CAAC,iCAAiC,EAAEA,KAAK,CAAC;MACvD,MAAMA,KAAK;IACb;EACF;EAEA,MAAMyB,kBAAkBA,CAACC,eAAuB,EAA6B;IAC3E,IAAI;MACF,MAAM;QAAE3B,IAAI;QAAEC;MAAM,CAAC,GAAG,MAAML,QAAQ,CACnCM,IAAI,CAAC,kBAAkB,CAAC,CACxBE,MAAM,CAAC,GAAG,CAAC,CACXI,EAAE,CAAC,mBAAmB,EAAEmB,eAAe,CAAC,CACxClB,KAAK,CAAC,YAAY,EAAE;QAAEY,SAAS,EAAE;MAAM,CAAC,CAAC;MAE5C,IAAIpB,KAAK,EAAE,MAAMA,KAAK;MACtB,OAAOD,IAAI,IAAI,EAAE;IACnB,CAAC,CAAC,OAAOC,KAAK,EAAE;MACdK,OAAO,CAACL,KAAK,CAAC,kCAAkC,EAAEA,KAAK,CAAC;MACxD,MAAMA,KAAK;IACb;EACF;EAEA,MAAM2B,iBAAiBA,CAACC,SAAiB,EAAkC;IACzE,IAAI;MACF,MAAM;QAAE7B,IAAI;QAAEC;MAAM,CAAC,GAAG,MAAML,QAAQ,CACnCM,IAAI,CAAC,kBAAkB,CAAC,CACxBE,MAAM,CAAC,GAAG,CAAC,CACXI,EAAE,CAAC,IAAI,EAAEqB,SAAS,CAAC,CACnBxB,MAAM,CAAC,CAAC;MAEX,IAAIJ,KAAK,EAAE,MAAMA,KAAK;MACtB,OAAOD,IAAI;IACb,CAAC,CAAC,OAAOC,KAAK,EAAE;MACdK,OAAO,CAACL,KAAK,CAAC,iCAAiC,EAAEA,KAAK,CAAC;MACvD,MAAMA,KAAK;IACb;EACF;;EAEA;EACA,MAAM6B,eAAeA,CAACD,SAAiB,EAAEL,KAAmB,EAAExB,IAAS,EAAiB;IACtF,IAAI;MACF;MACA,MAAM;QAAEC,KAAK,EAAE8B;MAAY,CAAC,GAAG,MAAMnC,QAAQ,CAC1CM,IAAI,CAAC,kBAAkB,CAAC,CACxBY,MAAM,CAAC;QACNU,KAAK;QACLC,UAAU,EAAEzB,IAAI;QAChBgC,aAAa,EAAE,IAAIhB,IAAI,CAAC,CAAC,CAACC,WAAW,CAAC,CAAC;QACvCF,UAAU,EAAE,IAAIC,IAAI,CAAC,CAAC,CAACC,WAAW,CAAC;MACrC,CAAC,CAAC,CACDT,EAAE,CAAC,IAAI,EAAEqB,SAAS,CAAC;MAEtB,IAAIE,WAAW,EAAE,MAAMA,WAAW;;MAElC;MACA,MAAM;QAAE9B,KAAK,EAAEgC;MAAU,CAAC,GAAG,MAAMrC,QAAQ,CACxCM,IAAI,CAAC,YAAY,CAAC,CAClBC,MAAM,CAAC,CAAC;QACP+B,UAAU,EAAEL,SAAS;QACrBL,KAAK;QACLxB;MACF,CAAC,CAAC,CAAC;MAEL,IAAIiC,SAAS,EAAE,MAAMA,SAAS;IAChC,CAAC,CAAC,OAAOhC,KAAK,EAAE;MACdK,OAAO,CAACL,KAAK,CAAC,4BAA4B,EAAEA,KAAK,CAAC;MAClD,MAAMA,KAAK;IACb;EACF;;EAEA;EACA,MAAMkC,sBAAsBA,CAAA,EAAkC;IAC5D,IAAI;MACF,MAAM;QAAEnC,IAAI,EAAEoC,OAAO;QAAEnC,KAAK,EAAEoC;MAAY,CAAC,GAAG,MAAMzC,QAAQ,CACzDM,IAAI,CAAC,SAAS,CAAC,CACfE,MAAM,CAAC;AAChB;AACA;AACA;AACA;AACA;AACA,SAAS,CAAC,CACDI,EAAE,CAAC,WAAW,EAAE,IAAI,CAAC,CACrBC,KAAK,CAAC,MAAM,CAAC;MAEhB,IAAI4B,WAAW,EAAE,MAAMA,WAAW;;MAElC;MACA,OAAO,CAACD,OAAO,IAAI,EAAE,EAAEE,GAAG,CAACC,MAAM,KAAK;QACpC,GAAGA,MAAM;QACTC,QAAQ,EAAED,MAAM,CAACE,eAAe,CAACH,GAAG,CAAEI,OAAY,KAAM;UACtD,GAAGA,OAAO;UACVC,QAAQ,EAAED,OAAO,CAACE,gBAAgB,IAAI;QACxC,CAAC,CAAC;MACJ,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,OAAO3C,KAAK,EAAE;MACdK,OAAO,CAACL,KAAK,CAAC,gCAAgC,EAAEA,KAAK,CAAC;MACtD,MAAMA,KAAK;IACb;EACF;;EAEA;EACA,MAAM4C,aAAaA,CAACC,UAAkB,EAA6B;IACjE,IAAI;MACF,MAAM;QAAE9C,IAAI;QAAEC;MAAM,CAAC,GAAG,MAAML,QAAQ,CACnCM,IAAI,CAAC,kBAAkB,CAAC,CACxBE,MAAM,CAAC;AAChB;AACA;AACA;AACA;AACA;AACA,SAAS,CAAC,CACD2C,EAAE,CAAC,kBAAkBD,UAAU,yBAAyBA,UAAU,GAAG,CAAC,CACtErC,KAAK,CAAC,YAAY,EAAE;QAAEY,SAAS,EAAE;MAAM,CAAC,CAAC;MAE5C,IAAIpB,KAAK,EAAE,MAAMA,KAAK;MACtB,OAAOD,IAAI,IAAI,EAAE;IACnB,CAAC,CAAC,OAAOC,KAAK,EAAE;MACdK,OAAO,CAACL,KAAK,CAAC,0BAA0B,EAAEA,KAAK,CAAC;MAChD,MAAMA,KAAK;IACb;EACF;AACF;AAEA,OAAO,MAAM+C,aAAa,GAAG,IAAInD,aAAa,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}