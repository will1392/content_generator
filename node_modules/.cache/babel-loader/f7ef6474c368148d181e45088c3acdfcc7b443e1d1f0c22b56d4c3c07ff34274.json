{"ast":null,"code":"// services/ai/perplexity.service.ts\nimport axios from 'axios';\nconst PERPLEXITY_API_KEY = process.env.REACT_APP_PERPLEXITY_API_KEY;\nconst PERPLEXITY_API_URL = 'https://api.perplexity.ai/chat/completions';\nexport class PerplexityService {\n  async makeRequest(messages) {\n    console.log('Making Perplexity API request...');\n    console.log('API Key exists:', !!PERPLEXITY_API_KEY);\n    console.log('Messages length:', messages.length);\n    if (!PERPLEXITY_API_KEY) {\n      throw new Error('Perplexity API key is not configured');\n    }\n    try {\n      const requestBody = {\n        model: 'sonar-pro',\n        messages,\n        temperature: 0.2,\n        max_tokens: 4000\n      };\n      console.log('Request body prepared, making API call...');\n      const response = await axios.post(PERPLEXITY_API_URL, requestBody, {\n        headers: {\n          'Authorization': `Bearer ${PERPLEXITY_API_KEY}`,\n          'Content-Type': 'application/json'\n        },\n        timeout: 120000 // 2 minute timeout\n      });\n      console.log('API response received, status:', response.status);\n      console.log('Response data structure:', Object.keys(response.data));\n      if (!response.data.choices || !response.data.choices[0]) {\n        throw new Error('Invalid API response structure');\n      }\n      return response.data.choices[0].message.content;\n    } catch (error) {\n      var _error$response, _error$response2, _error$response3, _error$response3$data, _error$response3$data2;\n      console.error('Perplexity API error details:', {\n        message: error.message,\n        response: (_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.data,\n        status: (_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : _error$response2.status,\n        isTimeout: error.code === 'ECONNABORTED'\n      });\n      if (error.code === 'ECONNABORTED') {\n        throw new Error('Request timed out - please try again');\n      }\n      throw new Error(((_error$response3 = error.response) === null || _error$response3 === void 0 ? void 0 : (_error$response3$data = _error$response3.data) === null || _error$response3$data === void 0 ? void 0 : (_error$response3$data2 = _error$response3$data.error) === null || _error$response3$data2 === void 0 ? void 0 : _error$response3$data2.message) || error.message || 'Failed to get research data');\n    }\n  }\n  async generateResearch(keyword) {\n    console.time('Perplexity Research Time');\n    console.log('Starting Perplexity research for:', keyword);\n    const systemPrompt = `You are an expert SEO research analyst focused on E-E-A-T (Experience, Expertise, Authoritativeness, Trustworthiness). \n    Your research will be used to create content that ranks well on Google by demonstrating real expertise and authority.\n    Always provide specific, verifiable data with sources. Focus on unique insights that demonstrate deep understanding.`;\n    const userPrompt = `Research \"${keyword}\" and provide comprehensive information in JSON format.\n\nInclude:\n1. Definition and overview\n2. Current trends and statistics\n3. Common questions people ask\n4. Related topics and applications\n5. Key challenges and opportunities\n\nFormat as JSON:\n{\n  \"definition\": \"Clear definition of ${keyword}\",\n  \"overview\": \"Comprehensive overview\",\n  \"currentTrends\": [\"trend1\", \"trend2\", \"trend3\"],\n  \"statistics\": [\"stat1 with source\", \"stat2 with source\"],\n  \"commonQuestions\": [\n    {\"question\": \"What is ${keyword}?\", \"answer\": \"detailed answer\"},\n    {\"question\": \"How does ${keyword} work?\", \"answer\": \"detailed answer\"}\n  ],\n  \"relatedTopics\": [\"topic1\", \"topic2\", \"topic3\"],\n  \"applications\": [\"application1\", \"application2\"],\n  \"challenges\": [\"challenge1\", \"challenge2\"],\n  \"opportunities\": [\"opportunity1\", \"opportunity2\"],\n  \"futureOutlook\": \"Analysis of future trends\"\n}\n\nReturn only valid JSON.`;\n    const messages = [{\n      role: 'system',\n      content: systemPrompt\n    }, {\n      role: 'user',\n      content: userPrompt\n    }];\n    const response = await this.makeRequest(messages);\n    console.timeEnd('Perplexity Research Time');\n    console.log('Perplexity response received, length:', response.length);\n    try {\n      const researchData = JSON.parse(response);\n      console.log('Research data parsed successfully');\n      return researchData;\n    } catch (parseError) {\n      console.timeEnd('Perplexity Research Time');\n      console.error('Failed to parse research response:', parseError);\n      console.log('Raw response:', response.substring(0, 500) + '...');\n      const jsonMatch = response.match(/\\{[\\s\\S]*\\}/);\n      if (jsonMatch) {\n        return JSON.parse(jsonMatch[0]);\n      }\n      throw new Error('Failed to parse research data');\n    }\n  }\n}\nexport const perplexityService = new PerplexityService();","map":{"version":3,"names":["axios","PERPLEXITY_API_KEY","process","env","REACT_APP_PERPLEXITY_API_KEY","PERPLEXITY_API_URL","PerplexityService","makeRequest","messages","console","log","length","Error","requestBody","model","temperature","max_tokens","response","post","headers","timeout","status","Object","keys","data","choices","message","content","error","_error$response","_error$response2","_error$response3","_error$response3$data","_error$response3$data2","isTimeout","code","generateResearch","keyword","time","systemPrompt","userPrompt","role","timeEnd","researchData","JSON","parse","parseError","substring","jsonMatch","match","perplexityService"],"sources":["/Users/will/Content Creation App/src/services/ai/perplexity.service.ts"],"sourcesContent":["// services/ai/perplexity.service.ts\nimport axios from 'axios';\nimport { ResearchContent } from '../../types/project.types';\n\nconst PERPLEXITY_API_KEY = process.env.REACT_APP_PERPLEXITY_API_KEY;\nconst PERPLEXITY_API_URL = 'https://api.perplexity.ai/chat/completions';\n\ninterface PerplexityResponse {\n  id: string;\n  model: string;\n  choices: Array<{\n    message: {\n      role: string;\n      content: string;\n    };\n    finish_reason: string;\n  }>;\n}\n\nexport class PerplexityService {\n  private async makeRequest(messages: any[]): Promise<string> {\n    console.log('Making Perplexity API request...');\n    console.log('API Key exists:', !!PERPLEXITY_API_KEY);\n    console.log('Messages length:', messages.length);\n    \n    if (!PERPLEXITY_API_KEY) {\n      throw new Error('Perplexity API key is not configured');\n    }\n    \n    try {\n      const requestBody = {\n        model: 'sonar-pro',\n        messages,\n        temperature: 0.2,\n        max_tokens: 4000,\n      };\n      \n      console.log('Request body prepared, making API call...');\n      \n      const response = await axios.post<PerplexityResponse>(\n        PERPLEXITY_API_URL,\n        requestBody,\n        {\n          headers: {\n            'Authorization': `Bearer ${PERPLEXITY_API_KEY}`,\n            'Content-Type': 'application/json',\n          },\n          timeout: 120000, // 2 minute timeout\n        }\n      );\n\n      console.log('API response received, status:', response.status);\n      console.log('Response data structure:', Object.keys(response.data));\n      \n      if (!response.data.choices || !response.data.choices[0]) {\n        throw new Error('Invalid API response structure');\n      }\n\n      return response.data.choices[0].message.content;\n    } catch (error: any) {\n      console.error('Perplexity API error details:', {\n        message: error.message,\n        response: error.response?.data,\n        status: error.response?.status,\n        isTimeout: error.code === 'ECONNABORTED'\n      });\n      \n      if (error.code === 'ECONNABORTED') {\n        throw new Error('Request timed out - please try again');\n      }\n      \n      throw new Error(error.response?.data?.error?.message || error.message || 'Failed to get research data');\n    }\n  }\n\n  async generateResearch(keyword: string): Promise<ResearchContent> {\n    console.time('Perplexity Research Time');\n    console.log('Starting Perplexity research for:', keyword);\n    \n    const systemPrompt = `You are an expert SEO research analyst focused on E-E-A-T (Experience, Expertise, Authoritativeness, Trustworthiness). \n    Your research will be used to create content that ranks well on Google by demonstrating real expertise and authority.\n    Always provide specific, verifiable data with sources. Focus on unique insights that demonstrate deep understanding.`;\n\n    const userPrompt = `Research \"${keyword}\" and provide comprehensive information in JSON format.\n\nInclude:\n1. Definition and overview\n2. Current trends and statistics\n3. Common questions people ask\n4. Related topics and applications\n5. Key challenges and opportunities\n\nFormat as JSON:\n{\n  \"definition\": \"Clear definition of ${keyword}\",\n  \"overview\": \"Comprehensive overview\",\n  \"currentTrends\": [\"trend1\", \"trend2\", \"trend3\"],\n  \"statistics\": [\"stat1 with source\", \"stat2 with source\"],\n  \"commonQuestions\": [\n    {\"question\": \"What is ${keyword}?\", \"answer\": \"detailed answer\"},\n    {\"question\": \"How does ${keyword} work?\", \"answer\": \"detailed answer\"}\n  ],\n  \"relatedTopics\": [\"topic1\", \"topic2\", \"topic3\"],\n  \"applications\": [\"application1\", \"application2\"],\n  \"challenges\": [\"challenge1\", \"challenge2\"],\n  \"opportunities\": [\"opportunity1\", \"opportunity2\"],\n  \"futureOutlook\": \"Analysis of future trends\"\n}\n\nReturn only valid JSON.`;\n\n    const messages = [\n      { role: 'system', content: systemPrompt },\n      { role: 'user', content: userPrompt }\n    ];\n\n    const response = await this.makeRequest(messages);\n    console.timeEnd('Perplexity Research Time');\n    console.log('Perplexity response received, length:', response.length);\n    \n    try {\n      const researchData = JSON.parse(response);\n      console.log('Research data parsed successfully');\n      return researchData as ResearchContent;\n    } catch (parseError) {\n      console.timeEnd('Perplexity Research Time');\n      console.error('Failed to parse research response:', parseError);\n      console.log('Raw response:', response.substring(0, 500) + '...');\n      const jsonMatch = response.match(/\\{[\\s\\S]*\\}/);\n      if (jsonMatch) {\n        return JSON.parse(jsonMatch[0]) as ResearchContent;\n      }\n      throw new Error('Failed to parse research data');\n    }\n  }\n}\n\nexport const perplexityService = new PerplexityService();"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}