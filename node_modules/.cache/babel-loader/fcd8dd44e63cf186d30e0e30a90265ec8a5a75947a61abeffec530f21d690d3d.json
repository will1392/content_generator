{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState, useCallback, useEffect } from 'react';\nimport { clientService } from '../services/client.service';\nimport { toast } from 'react-toastify';\nexport const useClientProject = () => {\n  _s();\n  const [selectedClient, setSelectedClient] = useState(null);\n  const [selectedProject, setSelectedProject] = useState(null);\n  const [selectedContent, setSelectedContent] = useState(null);\n  const [clients, setClients] = useState([]);\n  const [projects, setProjects] = useState([]);\n  const [contents, setContents] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState(null);\n\n  // Auto-save timer\n  const [autoSaveTimer, setAutoSaveTimer] = useState(null);\n  const loadClients = useCallback(async () => {\n    try {\n      setIsLoading(true);\n      const clientList = await clientService.getClients();\n      setClients(clientList);\n    } catch (err) {\n      setError(err instanceof Error ? err.message : 'Failed to load clients');\n      toast.error('Failed to load clients');\n    } finally {\n      setIsLoading(false);\n    }\n  }, []);\n  const selectClient = useCallback(async client => {\n    try {\n      setIsLoading(true);\n      setSelectedClient(client);\n      setSelectedProject(null);\n      setSelectedContent(null);\n      const projectList = await clientService.getClientProjects(client.id);\n      setProjects(projectList);\n      setContents([]);\n    } catch (err) {\n      setError(err instanceof Error ? err.message : 'Failed to load projects');\n      toast.error('Failed to load projects');\n    } finally {\n      setIsLoading(false);\n    }\n  }, []);\n  const selectProject = useCallback(async project => {\n    try {\n      setIsLoading(true);\n      setSelectedProject(project);\n      setSelectedContent(null);\n      const contentList = await clientService.getProjectContents(project.id);\n      setContents(contentList);\n    } catch (err) {\n      setError(err instanceof Error ? err.message : 'Failed to load contents');\n      toast.error('Failed to load contents');\n    } finally {\n      setIsLoading(false);\n    }\n  }, []);\n  const selectContent = useCallback(content => {\n    setSelectedContent(content);\n    // Store in localStorage for quick access\n    localStorage.setItem('currentContentId', content.id);\n  }, []);\n  const createClient = useCallback(async clientData => {\n    try {\n      setIsLoading(true);\n      const newClient = await clientService.createClient(clientData);\n      if (newClient) {\n        await loadClients();\n        toast.success('Client created successfully');\n      }\n      return newClient;\n    } catch (err) {\n      setError(err instanceof Error ? err.message : 'Failed to create client');\n      toast.error('Failed to create client');\n      return null;\n    } finally {\n      setIsLoading(false);\n    }\n  }, [loadClients]);\n  const createProject = useCallback(async (projectName, description) => {\n    if (!selectedClient) {\n      toast.error('Please select a client first');\n      return null;\n    }\n    try {\n      setIsLoading(true);\n      const newProject = await clientService.createClientProject({\n        client_id: selectedClient.id,\n        project_name: projectName,\n        description,\n        status: 'active'\n      });\n      if (newProject) {\n        await selectClient(selectedClient);\n        toast.success('Project created successfully');\n      }\n      return newProject;\n    } catch (err) {\n      setError(err instanceof Error ? err.message : 'Failed to create project');\n      toast.error('Failed to create project');\n      return null;\n    } finally {\n      setIsLoading(false);\n    }\n  }, [selectedClient, selectClient]);\n  const createContent = useCallback(async (contentName, keyword) => {\n    if (!selectedProject) {\n      toast.error('Please select a project first');\n      return null;\n    }\n    try {\n      setIsLoading(true);\n      const newContent = await clientService.createProjectContent({\n        client_project_id: selectedProject.id,\n        content_name: contentName,\n        keyword\n      });\n      if (newContent) {\n        await selectProject(selectedProject);\n        toast.success('Content created successfully');\n      }\n      return newContent;\n    } catch (err) {\n      setError(err instanceof Error ? err.message : 'Failed to create content');\n      toast.error('Failed to create content');\n      return null;\n    } finally {\n      setIsLoading(false);\n    }\n  }, [selectedProject, selectProject]);\n  const updateContentStage = useCallback(async (stage, data) => {\n    if (!selectedContent) return;\n    try {\n      await clientService.autoSaveContent(selectedContent.id, stage, {\n        ...selectedContent.stage_data,\n        [stage]: data\n      });\n\n      // Update local state\n      setSelectedContent({\n        ...selectedContent,\n        stage,\n        stage_data: {\n          ...selectedContent.stage_data,\n          [stage]: data\n        },\n        last_saved_at: new Date().toISOString()\n      });\n      toast.success('Progress saved');\n    } catch (err) {\n      console.error('Failed to save progress:', err);\n      toast.error('Failed to save progress');\n    }\n  }, [selectedContent]);\n  const autoSave = useCallback(async (stage, stageData) => {\n    // For App.tsx usage - we'll get the activeContent from the context\n    // This is a bit of a hack but necessary for the current architecture\n    console.log('AutoSave called with stage:', stage);\n    console.log('AutoSave stageData keys:', Object.keys(stageData || {}));\n\n    // We'll implement this as immediate save rather than delayed\n    // since the App.tsx is managing the activeContent\n    return Promise.resolve(); // Placeholder for now\n  }, []);\n\n  // Load saved content on mount - DISABLED to ensure dashboard starts fresh\n  // useEffect(() => {\n  //   const savedContentId = localStorage.getItem('currentContentId');\n  //   if (savedContentId) {\n  //     clientService.getProjectContent(savedContentId).then(content => {\n  //       if (content) {\n  //         setSelectedContent(content);\n  //       }\n  //     });\n  //   }\n  // }, []);\n\n  // Cleanup auto-save timer\n  useEffect(() => {\n    return () => {\n      if (autoSaveTimer) {\n        clearTimeout(autoSaveTimer);\n      }\n    };\n  }, [autoSaveTimer]);\n  return {\n    selectedClient,\n    selectedProject,\n    selectedContent,\n    clients,\n    projects,\n    contents,\n    isLoading,\n    error,\n    loadClients,\n    selectClient,\n    selectProject,\n    selectContent,\n    createClient,\n    createProject,\n    createContent,\n    updateContentStage,\n    autoSave\n  };\n};\n_s(useClientProject, \"YovG/ZQM+b45t3PPzSeT9603opI=\");","map":{"version":3,"names":["useState","useCallback","useEffect","clientService","toast","useClientProject","_s","selectedClient","setSelectedClient","selectedProject","setSelectedProject","selectedContent","setSelectedContent","clients","setClients","projects","setProjects","contents","setContents","isLoading","setIsLoading","error","setError","autoSaveTimer","setAutoSaveTimer","loadClients","clientList","getClients","err","Error","message","selectClient","client","projectList","getClientProjects","id","selectProject","project","contentList","getProjectContents","selectContent","content","localStorage","setItem","createClient","clientData","newClient","success","createProject","projectName","description","newProject","createClientProject","client_id","project_name","status","createContent","contentName","keyword","newContent","createProjectContent","client_project_id","content_name","updateContentStage","stage","data","autoSaveContent","stage_data","last_saved_at","Date","toISOString","console","autoSave","stageData","log","Object","keys","Promise","resolve","clearTimeout"],"sources":["/Users/will/Content Creation App/src/hooks/useClientProject.ts"],"sourcesContent":["import { useState, useCallback, useEffect } from 'react';\nimport { clientService } from '../services/client.service';\nimport { contentService } from '../services/content.service';\nimport { Client, ClientProject, ProjectContent } from '../types/client.types';\nimport { ProjectStage } from '../types/project.types';\nimport { toast } from 'react-toastify';\n\ninterface UseClientProjectReturn {\n  // State\n  selectedClient: Client | null;\n  selectedProject: ClientProject | null;\n  selectedContent: ProjectContent | null;\n  clients: Client[];\n  projects: ClientProject[];\n  contents: ProjectContent[];\n  isLoading: boolean;\n  error: string | null;\n  \n  // Actions\n  loadClients: () => Promise<void>;\n  selectClient: (client: Client) => Promise<void>;\n  selectProject: (project: ClientProject) => Promise<void>;\n  selectContent: (content: ProjectContent) => void;\n  createClient: (clientData: Omit<Client, 'id' | 'created_at' | 'updated_at'>) => Promise<Client | null>;\n  createProject: (projectName: string, description?: string) => Promise<ClientProject | null>;\n  createContent: (contentName: string, keyword: string) => Promise<ProjectContent | null>;\n  updateContentStage: (stage: ProjectStage, data: any) => Promise<void>;\n  autoSave: (stage: ProjectStage, data: any) => Promise<void>;\n}\n\nexport const useClientProject = (): UseClientProjectReturn => {\n  const [selectedClient, setSelectedClient] = useState<Client | null>(null);\n  const [selectedProject, setSelectedProject] = useState<ClientProject | null>(null);\n  const [selectedContent, setSelectedContent] = useState<ProjectContent | null>(null);\n  const [clients, setClients] = useState<Client[]>([]);\n  const [projects, setProjects] = useState<ClientProject[]>([]);\n  const [contents, setContents] = useState<ProjectContent[]>([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState<string | null>(null);\n\n  // Auto-save timer\n  const [autoSaveTimer, setAutoSaveTimer] = useState<NodeJS.Timeout | null>(null);\n\n  const loadClients = useCallback(async () => {\n    try {\n      setIsLoading(true);\n      const clientList = await clientService.getClients();\n      setClients(clientList);\n    } catch (err) {\n      setError(err instanceof Error ? err.message : 'Failed to load clients');\n      toast.error('Failed to load clients');\n    } finally {\n      setIsLoading(false);\n    }\n  }, []);\n\n  const selectClient = useCallback(async (client: Client) => {\n    try {\n      setIsLoading(true);\n      setSelectedClient(client);\n      setSelectedProject(null);\n      setSelectedContent(null);\n      \n      const projectList = await clientService.getClientProjects(client.id);\n      setProjects(projectList);\n      setContents([]);\n    } catch (err) {\n      setError(err instanceof Error ? err.message : 'Failed to load projects');\n      toast.error('Failed to load projects');\n    } finally {\n      setIsLoading(false);\n    }\n  }, []);\n\n  const selectProject = useCallback(async (project: ClientProject) => {\n    try {\n      setIsLoading(true);\n      setSelectedProject(project);\n      setSelectedContent(null);\n      \n      const contentList = await clientService.getProjectContents(project.id);\n      setContents(contentList);\n    } catch (err) {\n      setError(err instanceof Error ? err.message : 'Failed to load contents');\n      toast.error('Failed to load contents');\n    } finally {\n      setIsLoading(false);\n    }\n  }, []);\n\n  const selectContent = useCallback((content: ProjectContent) => {\n    setSelectedContent(content);\n    // Store in localStorage for quick access\n    localStorage.setItem('currentContentId', content.id);\n  }, []);\n\n  const createClient = useCallback(async (clientData: Omit<Client, 'id' | 'created_at' | 'updated_at'>) => {\n    try {\n      setIsLoading(true);\n      const newClient = await clientService.createClient(clientData);\n      if (newClient) {\n        await loadClients();\n        toast.success('Client created successfully');\n      }\n      return newClient;\n    } catch (err) {\n      setError(err instanceof Error ? err.message : 'Failed to create client');\n      toast.error('Failed to create client');\n      return null;\n    } finally {\n      setIsLoading(false);\n    }\n  }, [loadClients]);\n\n  const createProject = useCallback(async (projectName: string, description?: string) => {\n    if (!selectedClient) {\n      toast.error('Please select a client first');\n      return null;\n    }\n\n    try {\n      setIsLoading(true);\n      const newProject = await clientService.createClientProject({\n        client_id: selectedClient.id,\n        project_name: projectName,\n        description,\n        status: 'active'\n      });\n      \n      if (newProject) {\n        await selectClient(selectedClient);\n        toast.success('Project created successfully');\n      }\n      return newProject;\n    } catch (err) {\n      setError(err instanceof Error ? err.message : 'Failed to create project');\n      toast.error('Failed to create project');\n      return null;\n    } finally {\n      setIsLoading(false);\n    }\n  }, [selectedClient, selectClient]);\n\n  const createContent = useCallback(async (contentName: string, keyword: string) => {\n    if (!selectedProject) {\n      toast.error('Please select a project first');\n      return null;\n    }\n\n    try {\n      setIsLoading(true);\n      const newContent = await clientService.createProjectContent({\n        client_project_id: selectedProject.id,\n        content_name: contentName,\n        keyword\n      });\n      \n      if (newContent) {\n        await selectProject(selectedProject);\n        toast.success('Content created successfully');\n      }\n      return newContent;\n    } catch (err) {\n      setError(err instanceof Error ? err.message : 'Failed to create content');\n      toast.error('Failed to create content');\n      return null;\n    } finally {\n      setIsLoading(false);\n    }\n  }, [selectedProject, selectProject]);\n\n  const updateContentStage = useCallback(async (stage: ProjectStage, data: any) => {\n    if (!selectedContent) return;\n\n    try {\n      await clientService.autoSaveContent(selectedContent.id, stage, {\n        ...selectedContent.stage_data,\n        [stage]: data\n      });\n      \n      // Update local state\n      setSelectedContent({\n        ...selectedContent,\n        stage,\n        stage_data: {\n          ...selectedContent.stage_data,\n          [stage]: data\n        },\n        last_saved_at: new Date().toISOString()\n      });\n      \n      toast.success('Progress saved');\n    } catch (err) {\n      console.error('Failed to save progress:', err);\n      toast.error('Failed to save progress');\n    }\n  }, [selectedContent]);\n\n  const autoSave = useCallback(async (stage: ProjectStage, stageData: any) => {\n    // For App.tsx usage - we'll get the activeContent from the context\n    // This is a bit of a hack but necessary for the current architecture\n    console.log('AutoSave called with stage:', stage);\n    console.log('AutoSave stageData keys:', Object.keys(stageData || {}));\n    \n    // We'll implement this as immediate save rather than delayed\n    // since the App.tsx is managing the activeContent\n    return Promise.resolve(); // Placeholder for now\n  }, []);\n\n  // Load saved content on mount - DISABLED to ensure dashboard starts fresh\n  // useEffect(() => {\n  //   const savedContentId = localStorage.getItem('currentContentId');\n  //   if (savedContentId) {\n  //     clientService.getProjectContent(savedContentId).then(content => {\n  //       if (content) {\n  //         setSelectedContent(content);\n  //       }\n  //     });\n  //   }\n  // }, []);\n\n  // Cleanup auto-save timer\n  useEffect(() => {\n    return () => {\n      if (autoSaveTimer) {\n        clearTimeout(autoSaveTimer);\n      }\n    };\n  }, [autoSaveTimer]);\n\n  return {\n    selectedClient,\n    selectedProject,\n    selectedContent,\n    clients,\n    projects,\n    contents,\n    isLoading,\n    error,\n    loadClients,\n    selectClient,\n    selectProject,\n    selectContent,\n    createClient,\n    createProject,\n    createContent,\n    updateContentStage,\n    autoSave\n  };\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}