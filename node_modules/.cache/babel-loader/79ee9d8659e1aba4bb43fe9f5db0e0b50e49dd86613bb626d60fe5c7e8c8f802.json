{"ast":null,"code":"// services/content.service.ts\nimport { perplexityService } from './ai/perplexity.service';\nimport { anthropicService } from './ai/anthropic.service';\nimport { supabase } from './supabase.service';\nexport class ContentService {\n  async generateResearch(projectId, keyword) {\n    try {\n      console.log('ContentService: Starting research generation for:', keyword);\n      console.log('ContentService: Project ID:', projectId);\n\n      // Call Perplexity API\n      console.log('ContentService: Calling Perplexity API...');\n      const research = await perplexityService.generateResearch(keyword);\n      console.log('ContentService: Research received from Perplexity');\n\n      // Save to Supabase\n      console.log('ContentService: Saving to Supabase...');\n      await this.saveContent(projectId, 'research', research);\n      console.log('ContentService: Successfully saved to Supabase');\n      return research;\n    } catch (error) {\n      console.error('ContentService: Research generation failed:', error);\n      console.error('ContentService: Error details:', {\n        message: error.message,\n        stack: error.stack,\n        name: error.name\n      });\n      throw new Error(error.message || 'Failed to generate research');\n    }\n  }\n  async generateBlog(projectId, keyword, research) {\n    try {\n      console.log('ContentService: Starting blog generation for:', keyword);\n      console.log('ContentService: Project ID:', projectId);\n\n      // Use Perplexity API for blog generation (Anthropic has CORS issues)\n      console.log('ContentService: Calling Perplexity API for blog...');\n      const blog = await perplexityService.generateBlog(keyword, research);\n      console.log('ContentService: Blog received from Perplexity');\n\n      // Save to Supabase\n      console.log('ContentService: Saving blog to Supabase...');\n      await this.saveContent(projectId, 'blog', blog);\n      console.log('ContentService: Successfully saved blog to Supabase');\n      return blog;\n    } catch (error) {\n      console.error('ContentService: Blog generation failed:', error);\n      console.error('ContentService: Error details:', {\n        message: error.message,\n        stack: error.stack,\n        name: error.name,\n        isCORSError: error.message.includes('CORS') || error.message.includes('Network Error')\n      });\n\n      // If it's a CORS/Network error, provide helpful message\n      if (error.message.includes('CORS') || error.message.includes('Network Error')) {\n        throw new Error('Cannot connect to AI service due to browser security restrictions. A backend proxy is needed for this feature.');\n      }\n      throw new Error(error.message || 'Failed to generate blog');\n    }\n  }\n  async generatePodcastScript(projectId, keyword, research, blog) {\n    try {\n      console.log('ContentService: Starting podcast script generation for:', keyword);\n      console.log('ContentService: Project ID:', projectId);\n      console.log('ContentService: Has research:', !!research);\n      console.log('ContentService: Has blog:', !!blog);\n\n      // Try Anthropic API first\n      console.log('ContentService: Attempting Anthropic API for podcast...');\n      try {\n        const podcast = await anthropicService.generatePodcastScript(keyword, research, blog);\n        console.log('ContentService: Podcast script received from Anthropic');\n\n        // Save to Supabase\n        console.log('ContentService: Saving podcast to Supabase...');\n        await this.saveContent(projectId, 'podcast_script', podcast);\n        console.log('ContentService: Successfully saved podcast to Supabase');\n        return podcast;\n      } catch (anthropicError) {\n        console.warn('ContentService: Anthropic failed, trying Perplexity fallback...');\n        console.warn('ContentService: Anthropic error:', anthropicError.message);\n\n        // If Anthropic fails (likely CORS), use Perplexity as fallback\n        console.log('ContentService: Calling Perplexity API for podcast...');\n        const podcast = await perplexityService.generatePodcastScript(keyword, research, blog);\n        console.log('ContentService: Podcast script received from Perplexity');\n\n        // Save to Supabase\n        console.log('ContentService: Saving podcast to Supabase...');\n        await this.saveContent(projectId, 'podcast_script', podcast);\n        console.log('ContentService: Successfully saved podcast to Supabase');\n        return podcast;\n      }\n    } catch (error) {\n      console.error('ContentService: Podcast generation failed:', error);\n      console.error('ContentService: Error details:', {\n        message: error.message,\n        stack: error.stack,\n        name: error.name,\n        isCORSError: error.message.includes('CORS') || error.message.includes('Network Error')\n      });\n      throw new Error(error.message || 'Failed to generate podcast script');\n    }\n  }\n  async saveContent(projectId, stageType, content) {\n    console.log('ContentService: Saving content to database...');\n    console.log('ContentService: Project ID:', projectId);\n    console.log('ContentService: Stage Type:', stageType);\n    console.log('ContentService: Content keys:', Object.keys(content || {}));\n    try {\n      // Check if this is a project_contents ID or old projects ID\n      // First try to get the content record from project_contents\n      const {\n        data: existingContent,\n        error: fetchError\n      } = await supabase.from('project_contents').select('*').eq('id', projectId).single();\n      if (fetchError && fetchError.code !== 'PGRST116') {\n        console.error('ContentService: Error fetching existing content:', fetchError);\n        // Fallback to old content_stages table if project_contents doesn't work\n        await this.saveToOldStructure(projectId, stageType, content);\n        return;\n      }\n      if (existingContent) {\n        // New structure - update project_contents table\n        console.log('ContentService: Updating project_contents table...');\n        const updatedStageData = {\n          ...existingContent.stage_data,\n          [stageType]: content\n        };\n        const {\n          error: updateError\n        } = await supabase.from('project_contents').update({\n          stage: stageType,\n          stage_data: updatedStageData,\n          last_saved_at: new Date().toISOString(),\n          updated_at: new Date().toISOString()\n        }).eq('id', projectId);\n        if (updateError) {\n          console.error('ContentService: Database update error:', updateError);\n          throw updateError;\n        }\n        console.log('ContentService: Content saved successfully to project_contents');\n      } else {\n        // Fallback to old structure\n        await this.saveToOldStructure(projectId, stageType, content);\n      }\n    } catch (error) {\n      console.error('ContentService: Save content error:', error);\n      throw error;\n    }\n  }\n  async saveToOldStructure(projectId, stageType, content) {\n    console.log('ContentService: Using old structure fallback...');\n    try {\n      // Mark previous versions as not current\n      const {\n        error: updateError\n      } = await supabase.from('content_stages').update({\n        is_current: false\n      }).eq('project_id', projectId).eq('stage_type', stageType);\n      if (updateError) {\n        console.warn('ContentService: Error updating old content:', updateError);\n      }\n\n      // Insert new version\n      const {\n        data,\n        error\n      } = await supabase.from('content_stages').insert({\n        project_id: projectId,\n        stage_type: stageType,\n        content,\n        is_current: true,\n        created_at: new Date().toISOString()\n      }).select();\n      if (error) {\n        console.error('ContentService: Database insert error:', error);\n        throw error;\n      }\n      console.log('ContentService: Content saved successfully to content_stages');\n    } catch (error) {\n      console.error('ContentService: Old structure save error:', error);\n      throw error;\n    }\n  }\n}\nexport const contentService = new ContentService();","map":{"version":3,"names":["perplexityService","anthropicService","supabase","ContentService","generateResearch","projectId","keyword","console","log","research","saveContent","error","message","stack","name","Error","generateBlog","blog","isCORSError","includes","generatePodcastScript","podcast","anthropicError","warn","stageType","content","Object","keys","data","existingContent","fetchError","from","select","eq","single","code","saveToOldStructure","updatedStageData","stage_data","updateError","update","stage","last_saved_at","Date","toISOString","updated_at","is_current","insert","project_id","stage_type","created_at","contentService"],"sources":["/Users/will/Content Creation App/src/services/content.service.ts"],"sourcesContent":["// services/content.service.ts\nimport { perplexityService } from './ai/perplexity.service';\nimport { anthropicService } from './ai/anthropic.service';\nimport { supabase } from './supabase.service';\nimport { ResearchContent, BlogContent, PodcastContent } from '../types/project.types';\n\nexport class ContentService {\n  async generateResearch(projectId: string, keyword: string): Promise<ResearchContent> {\n    try {\n      console.log('ContentService: Starting research generation for:', keyword);\n      console.log('ContentService: Project ID:', projectId);\n      \n      // Call Perplexity API\n      console.log('ContentService: Calling Perplexity API...');\n      const research = await perplexityService.generateResearch(keyword);\n      console.log('ContentService: Research received from Perplexity');\n      \n      // Save to Supabase\n      console.log('ContentService: Saving to Supabase...');\n      await this.saveContent(projectId, 'research', research);\n      console.log('ContentService: Successfully saved to Supabase');\n      \n      return research;\n    } catch (error: any) {\n      console.error('ContentService: Research generation failed:', error);\n      console.error('ContentService: Error details:', {\n        message: error.message,\n        stack: error.stack,\n        name: error.name\n      });\n      throw new Error(error.message || 'Failed to generate research');\n    }\n  }\n\n  async generateBlog(projectId: string, keyword: string, research: ResearchContent): Promise<BlogContent> {\n    try {\n      console.log('ContentService: Starting blog generation for:', keyword);\n      console.log('ContentService: Project ID:', projectId);\n      \n      // Use Perplexity API for blog generation (Anthropic has CORS issues)\n      console.log('ContentService: Calling Perplexity API for blog...');\n      const blog = await perplexityService.generateBlog(keyword, research);\n      console.log('ContentService: Blog received from Perplexity');\n      \n      // Save to Supabase\n      console.log('ContentService: Saving blog to Supabase...');\n      await this.saveContent(projectId, 'blog', blog);\n      console.log('ContentService: Successfully saved blog to Supabase');\n      \n      return blog;\n    } catch (error: any) {\n      console.error('ContentService: Blog generation failed:', error);\n      console.error('ContentService: Error details:', {\n        message: error.message,\n        stack: error.stack,\n        name: error.name,\n        isCORSError: error.message.includes('CORS') || error.message.includes('Network Error')\n      });\n      \n      // If it's a CORS/Network error, provide helpful message\n      if (error.message.includes('CORS') || error.message.includes('Network Error')) {\n        throw new Error('Cannot connect to AI service due to browser security restrictions. A backend proxy is needed for this feature.');\n      }\n      \n      throw new Error(error.message || 'Failed to generate blog');\n    }\n  }\n\n  async generatePodcastScript(\n    projectId: string, \n    keyword: string, \n    research: ResearchContent, \n    blog: BlogContent\n  ): Promise<PodcastContent> {\n    try {\n      console.log('ContentService: Starting podcast script generation for:', keyword);\n      console.log('ContentService: Project ID:', projectId);\n      console.log('ContentService: Has research:', !!research);\n      console.log('ContentService: Has blog:', !!blog);\n      \n      // Try Anthropic API first\n      console.log('ContentService: Attempting Anthropic API for podcast...');\n      try {\n        const podcast = await anthropicService.generatePodcastScript(keyword, research, blog);\n        console.log('ContentService: Podcast script received from Anthropic');\n        \n        // Save to Supabase\n        console.log('ContentService: Saving podcast to Supabase...');\n        await this.saveContent(projectId, 'podcast_script', podcast);\n        console.log('ContentService: Successfully saved podcast to Supabase');\n        \n        return podcast;\n      } catch (anthropicError: any) {\n        console.warn('ContentService: Anthropic failed, trying Perplexity fallback...');\n        console.warn('ContentService: Anthropic error:', anthropicError.message);\n        \n        // If Anthropic fails (likely CORS), use Perplexity as fallback\n        console.log('ContentService: Calling Perplexity API for podcast...');\n        const podcast = await perplexityService.generatePodcastScript(keyword, research, blog);\n        console.log('ContentService: Podcast script received from Perplexity');\n        \n        // Save to Supabase\n        console.log('ContentService: Saving podcast to Supabase...');\n        await this.saveContent(projectId, 'podcast_script', podcast);\n        console.log('ContentService: Successfully saved podcast to Supabase');\n        \n        return podcast;\n      }\n    } catch (error: any) {\n      console.error('ContentService: Podcast generation failed:', error);\n      console.error('ContentService: Error details:', {\n        message: error.message,\n        stack: error.stack,\n        name: error.name,\n        isCORSError: error.message.includes('CORS') || error.message.includes('Network Error')\n      });\n      \n      \n      throw new Error(error.message || 'Failed to generate podcast script');\n    }\n  }\n\n  private async saveContent(\n    projectId: string,\n    stageType: string,\n    content: any\n  ): Promise<void> {\n    console.log('ContentService: Saving content to database...');\n    console.log('ContentService: Project ID:', projectId);\n    console.log('ContentService: Stage Type:', stageType);\n    console.log('ContentService: Content keys:', Object.keys(content || {}));\n    \n    try {\n      // Check if this is a project_contents ID or old projects ID\n      // First try to get the content record from project_contents\n      const { data: existingContent, error: fetchError } = await supabase\n        .from('project_contents')\n        .select('*')\n        .eq('id', projectId)\n        .single();\n\n      if (fetchError && fetchError.code !== 'PGRST116') {\n        console.error('ContentService: Error fetching existing content:', fetchError);\n        // Fallback to old content_stages table if project_contents doesn't work\n        await this.saveToOldStructure(projectId, stageType, content);\n        return;\n      }\n\n      if (existingContent) {\n        // New structure - update project_contents table\n        console.log('ContentService: Updating project_contents table...');\n        const updatedStageData = {\n          ...existingContent.stage_data,\n          [stageType]: content\n        };\n\n        const { error: updateError } = await supabase\n          .from('project_contents')\n          .update({\n            stage: stageType,\n            stage_data: updatedStageData,\n            last_saved_at: new Date().toISOString(),\n            updated_at: new Date().toISOString()\n          })\n          .eq('id', projectId);\n\n        if (updateError) {\n          console.error('ContentService: Database update error:', updateError);\n          throw updateError;\n        }\n\n        console.log('ContentService: Content saved successfully to project_contents');\n      } else {\n        // Fallback to old structure\n        await this.saveToOldStructure(projectId, stageType, content);\n      }\n    } catch (error) {\n      console.error('ContentService: Save content error:', error);\n      throw error;\n    }\n  }\n\n  private async saveToOldStructure(\n    projectId: string,\n    stageType: string,\n    content: any\n  ): Promise<void> {\n    console.log('ContentService: Using old structure fallback...');\n    \n    try {\n      // Mark previous versions as not current\n      const { error: updateError } = await supabase\n        .from('content_stages')\n        .update({ is_current: false })\n        .eq('project_id', projectId)\n        .eq('stage_type', stageType);\n\n      if (updateError) {\n        console.warn('ContentService: Error updating old content:', updateError);\n      }\n\n      // Insert new version\n      const { data, error } = await supabase\n        .from('content_stages')\n        .insert({\n          project_id: projectId,\n          stage_type: stageType,\n          content,\n          is_current: true,\n          created_at: new Date().toISOString()\n        })\n        .select();\n\n      if (error) {\n        console.error('ContentService: Database insert error:', error);\n        throw error;\n      }\n      \n      console.log('ContentService: Content saved successfully to content_stages');\n    } catch (error) {\n      console.error('ContentService: Old structure save error:', error);\n      throw error;\n    }\n  }\n}\n\nexport const contentService = new ContentService();"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}