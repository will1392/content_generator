{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState, useCallback } from 'react';\nimport { toast } from 'react-toastify';\nimport { supabase } from '../services/supabase.service';\nimport { n8nService } from '../services/n8n.service';\nconst LOCAL_STORAGE_KEY = 'currentProjectId';\nexport const useProject = () => {\n  _s();\n  const [project, setProject] = useState(null);\n  const [currentStage, setCurrentStage] = useState('research');\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState(null);\n\n  // Remove or comment out this auto-load effect\n  // useEffect(() => {\n  //   const savedProjectId = localStorage.getItem(LOCAL_STORAGE_KEY);\n  //   if (savedProjectId) {\n  //     loadProject(savedProjectId);\n  //   }\n  // }, []);\n\n  const loadProject = async projectId => {\n    try {\n      setIsLoading(true);\n      const {\n        data,\n        error\n      } = await supabase.from('projects').select('*').eq('id', projectId).single();\n      if (error) throw error;\n      setProject(data);\n      setCurrentStage(data.status);\n    } catch (err) {\n      setError(err instanceof Error ? err.message : 'Failed to load project');\n      toast.error('Failed to load project');\n    } finally {\n      setIsLoading(false);\n    }\n  };\n  const createProject = async keyword => {\n    try {\n      setIsLoading(true);\n      setError(null);\n      const newProject = {\n        keyword,\n        status: 'research',\n        created_at: new Date().toISOString(),\n        updated_at: new Date().toISOString()\n      };\n      const {\n        data,\n        error\n      } = await supabase.from('projects').insert([newProject]).select().single();\n      if (error) throw error;\n      setProject(data);\n      setCurrentStage(data.status);\n      localStorage.setItem(LOCAL_STORAGE_KEY, data.id);\n      toast.success('Project created successfully!');\n      return data;\n    } catch (err) {\n      const errorMessage = err instanceof Error ? err.message : 'Failed to create project';\n      setError(errorMessage);\n      toast.error(errorMessage);\n      return null;\n    } finally {\n      setIsLoading(false);\n    }\n  };\n  const updateStage = async (projectId, newStage) => {\n    try {\n      setIsLoading(true);\n      setError(null);\n      const {\n        error\n      } = await supabase.from('projects').update({\n        status: newStage,\n        updated_at: new Date().toISOString()\n      }).eq('id', projectId);\n      if (error) throw error;\n      setCurrentStage(newStage);\n      if (project) {\n        setProject({\n          ...project,\n          status: newStage\n        });\n      }\n      toast.success(`Stage updated to ${newStage}`);\n      return true;\n    } catch (err) {\n      const errorMessage = err instanceof Error ? err.message : 'Failed to update stage';\n      setError(errorMessage);\n      toast.error(errorMessage);\n      return false;\n    } finally {\n      setIsLoading(false);\n    }\n  };\n  const getStageContent = async (projectId, stageType) => {\n    try {\n      setIsLoading(true);\n      setError(null);\n      const tableName = `${stageType}_content`;\n      const {\n        data,\n        error\n      } = await supabase.from(tableName).select('*').eq('project_id', projectId).single();\n      if (error && error.code !== 'PGRST116') {\n        // PGRST116 is \"no rows found\"\n        throw error;\n      }\n      return data;\n    } catch (err) {\n      const errorMessage = err instanceof Error ? err.message : 'Failed to get content';\n      setError(errorMessage);\n      toast.error(errorMessage);\n      return null;\n    } finally {\n      setIsLoading(false);\n    }\n  };\n  const regenerateContent = async (projectId, stageType, params) => {\n    try {\n      setIsLoading(true);\n      setError(null);\n      if (!project) {\n        throw new Error('No project loaded');\n      }\n      let response;\n      const baseParams = {\n        keyword: project.keyword,\n        ...params\n      };\n      switch (stageType) {\n        case 'research':\n          response = await n8nService.generateResearch(project.keyword, projectId);\n          break;\n        case 'blog':\n          response = await n8nService.generateBlog(project.keyword, projectId, params === null || params === void 0 ? void 0 : params.researchData);\n          break;\n        case 'podcast_script':\n          response = await n8nService.generatePodcast(project.keyword, projectId, params === null || params === void 0 ? void 0 : params.blogContent);\n          break;\n        case 'audio':\n          response = await n8nService.generateAudio(project.keyword, projectId, params === null || params === void 0 ? void 0 : params.podcastScript);\n          break;\n        case 'images':\n          response = await n8nService.generateImages(project.keyword, projectId, params === null || params === void 0 ? void 0 : params.content);\n          break;\n        case 'social':\n          response = await n8nService.generateSocial(project.keyword, projectId, params === null || params === void 0 ? void 0 : params.content);\n          break;\n        default:\n          throw new Error(`Unknown stage type: ${stageType}`);\n      }\n      if (!response.success) {\n        throw new Error(response.error || 'Failed to generate content');\n      }\n\n      // Save to database\n      const tableName = `${stageType}_content`;\n      const contentData = {\n        project_id: projectId,\n        ...response.data,\n        created_at: new Date().toISOString(),\n        updated_at: new Date().toISOString()\n      };\n      const {\n        data,\n        error\n      } = await supabase.from(tableName).upsert([contentData]).select().single();\n      if (error) throw error;\n      toast.success(`${stageType} content generated successfully!`);\n      return data;\n    } catch (err) {\n      const errorMessage = err instanceof Error ? err.message : 'Failed to regenerate content';\n      setError(errorMessage);\n      toast.error(errorMessage);\n      return null;\n    } finally {\n      setIsLoading(false);\n    }\n  };\n  const clearProject = useCallback(() => {\n    setProject(null);\n    setCurrentStage('research');\n    localStorage.removeItem(LOCAL_STORAGE_KEY);\n  }, []);\n  return {\n    project,\n    currentStage,\n    isLoading,\n    error,\n    createProject,\n    updateStage,\n    getStageContent,\n    regenerateContent,\n    clearProject\n  };\n};\n_s(useProject, \"zcxWGrrjuNKevcOFau6rzYnoqnQ=\");","map":{"version":3,"names":["useState","useCallback","toast","supabase","n8nService","LOCAL_STORAGE_KEY","useProject","_s","project","setProject","currentStage","setCurrentStage","isLoading","setIsLoading","error","setError","loadProject","projectId","data","from","select","eq","single","status","err","Error","message","createProject","keyword","newProject","created_at","Date","toISOString","updated_at","insert","localStorage","setItem","id","success","errorMessage","updateStage","newStage","update","getStageContent","stageType","tableName","code","regenerateContent","params","response","baseParams","generateResearch","generateBlog","researchData","generatePodcast","blogContent","generateAudio","podcastScript","generateImages","content","generateSocial","contentData","project_id","upsert","clearProject","removeItem"],"sources":["/Users/will/Content Creation App/src/hooks/useProject.ts"],"sourcesContent":["import { useState, useEffect, useCallback } from 'react';\nimport { toast } from 'react-toastify';\nimport { supabase } from '../services/supabase.service';\nimport { n8nService } from '../services/n8n.service';\nimport { Project, ProjectStage } from '../types/project.types';\n\nconst LOCAL_STORAGE_KEY = 'currentProjectId';\n\nexport const useProject = () => {\n  const [project, setProject] = useState<Project | null>(null);\n  const [currentStage, setCurrentStage] = useState<ProjectStage>('research');\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState<string | null>(null);\n\n  // Remove or comment out this auto-load effect\n  // useEffect(() => {\n  //   const savedProjectId = localStorage.getItem(LOCAL_STORAGE_KEY);\n  //   if (savedProjectId) {\n  //     loadProject(savedProjectId);\n  //   }\n  // }, []);\n\n  const loadProject = async (projectId: string) => {\n    try {\n      setIsLoading(true);\n      const { data, error } = await supabase\n        .from('projects')\n        .select('*')\n        .eq('id', projectId)\n        .single();\n\n      if (error) throw error;\n\n      setProject(data);\n      setCurrentStage(data.status);\n    } catch (err) {\n      setError(err instanceof Error ? err.message : 'Failed to load project');\n      toast.error('Failed to load project');\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const createProject = async (keyword: string): Promise<Project | null> => {\n    try {\n      setIsLoading(true);\n      setError(null);\n\n      const newProject = {\n        keyword,\n        status: 'research' as ProjectStage,\n        created_at: new Date().toISOString(),\n        updated_at: new Date().toISOString(),\n      };\n\n      const { data, error } = await supabase\n        .from('projects')\n        .insert([newProject])\n        .select()\n        .single();\n\n      if (error) throw error;\n\n      setProject(data);\n      setCurrentStage(data.status);\n      localStorage.setItem(LOCAL_STORAGE_KEY, data.id);\n      toast.success('Project created successfully!');\n      return data;\n    } catch (err) {\n      const errorMessage = err instanceof Error ? err.message : 'Failed to create project';\n      setError(errorMessage);\n      toast.error(errorMessage);\n      return null;\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const updateStage = async (projectId: string, newStage: ProjectStage): Promise<boolean> => {\n    try {\n      setIsLoading(true);\n      setError(null);\n\n      const { error } = await supabase\n        .from('projects')\n        .update({ \n          status: newStage,\n          updated_at: new Date().toISOString()\n        })\n        .eq('id', projectId);\n\n      if (error) throw error;\n\n      setCurrentStage(newStage);\n      if (project) {\n        setProject({ ...project, status: newStage });\n      }\n      toast.success(`Stage updated to ${newStage}`);\n      return true;\n    } catch (err) {\n      const errorMessage = err instanceof Error ? err.message : 'Failed to update stage';\n      setError(errorMessage);\n      toast.error(errorMessage);\n      return false;\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const getStageContent = async (projectId: string, stageType: ProjectStage): Promise<any> => {\n    try {\n      setIsLoading(true);\n      setError(null);\n\n      const tableName = `${stageType}_content`;\n      const { data, error } = await supabase\n        .from(tableName)\n        .select('*')\n        .eq('project_id', projectId)\n        .single();\n\n      if (error && error.code !== 'PGRST116') { // PGRST116 is \"no rows found\"\n        throw error;\n      }\n\n      return data;\n    } catch (err) {\n      const errorMessage = err instanceof Error ? err.message : 'Failed to get content';\n      setError(errorMessage);\n      toast.error(errorMessage);\n      return null;\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const regenerateContent = async (\n    projectId: string, \n    stageType: ProjectStage, \n    params?: any\n  ): Promise<any> => {\n    try {\n      setIsLoading(true);\n      setError(null);\n\n      if (!project) {\n        throw new Error('No project loaded');\n      }\n\n      let response;\n      const baseParams = { keyword: project.keyword, ...params };\n\n      switch (stageType) {\n        case 'research':\n          response = await n8nService.generateResearch(project.keyword, projectId);\n          break;\n        case 'blog':\n          response = await n8nService.generateBlog(project.keyword, projectId, params?.researchData);\n          break;\n        case 'podcast_script':\n          response = await n8nService.generatePodcast(project.keyword, projectId, params?.blogContent);\n          break;\n        case 'audio':\n          response = await n8nService.generateAudio(project.keyword, projectId, params?.podcastScript);\n          break;\n        case 'images':\n          response = await n8nService.generateImages(project.keyword, projectId, params?.content);\n          break;\n        case 'social':\n          response = await n8nService.generateSocial(project.keyword, projectId, params?.content);\n          break;\n        default:\n          throw new Error(`Unknown stage type: ${stageType}`);\n      }\n\n      if (!response.success) {\n        throw new Error(response.error || 'Failed to generate content');\n      }\n\n      // Save to database\n      const tableName = `${stageType}_content`;\n      const contentData = {\n        project_id: projectId,\n        ...response.data,\n        created_at: new Date().toISOString(),\n        updated_at: new Date().toISOString(),\n      };\n\n      const { data, error } = await supabase\n        .from(tableName)\n        .upsert([contentData])\n        .select()\n        .single();\n\n      if (error) throw error;\n\n      toast.success(`${stageType} content generated successfully!`);\n      return data;\n    } catch (err) {\n      const errorMessage = err instanceof Error ? err.message : 'Failed to regenerate content';\n      setError(errorMessage);\n      toast.error(errorMessage);\n      return null;\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const clearProject = useCallback(() => {\n    setProject(null);\n    setCurrentStage('research');\n    localStorage.removeItem(LOCAL_STORAGE_KEY);\n  }, []);\n\n  return {\n    project,\n    currentStage,\n    isLoading,\n    error,\n    createProject,\n    updateStage,\n    getStageContent,\n    regenerateContent,\n    clearProject,\n  };\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}