{"ast":null,"code":"var _jsxFileName = \"/Users/will/Content Creation App/src/App.tsx\",\n  _s = $RefreshSig$();\n// App.tsx\nimport React, { useState, useEffect, useCallback } from 'react';\nimport { Toaster, toast } from 'react-hot-toast';\nimport { Menu } from 'lucide-react';\nimport { supabase } from './services/supabase.service';\nimport { clientService } from './services/client.service';\nimport { AppLayout } from './components/layout/AppLayout';\nimport { ClientDashboard } from './components/client/ClientDashboard';\nimport { KeywordInput } from './components/stages/KeywordInput';\nimport { ResearchDisplay } from './components/stages/ResearchDisplay';\nimport { BlogDisplay } from './components/stages/BlogDisplay';\nimport { PodcastDisplay } from './components/stages/PodcastDisplay';\nimport { AudioPlayer } from './components/stages/AudioPlayer';\nimport { ImageGallery } from './components/stages/ImageGallery';\nimport { SocialCaptions } from './components/stages/SocialCaptions';\nimport { ContentSummary } from './components/final/ContentSummary';\nimport { useProject } from './hooks/useProject';\nimport { useClientProject } from './hooks/useClientProject';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const {\n    project,\n    currentStage,\n    isLoading,\n    error,\n    createProject,\n    updateStage,\n    getStageContent,\n    regenerateContent\n  } = useProject();\n  const {\n    selectedContent,\n    autoSave\n  } = useClientProject();\n  const [stageContent, setStageContent] = useState({});\n  const [showDashboard, setShowDashboard] = useState(true);\n  const [activeContent, setActiveContent] = useState(null);\n\n  // Ensure we always start on the dashboard\n  useEffect(() => {\n    // Clear any saved state\n    localStorage.removeItem('currentProjectId');\n    localStorage.removeItem('currentContentId');\n\n    // Reset to dashboard\n    setShowDashboard(true);\n    setActiveContent(null);\n    setStageContent({});\n    console.log('App initialized - forcing dashboard view');\n  }, []);\n\n  // Test Supabase connection on component mount\n  useEffect(() => {\n    const testSupabaseConnection = async () => {\n      try {\n        console.log('Testing Supabase connection...');\n        const {\n          data,\n          error\n        } = await supabase.from('projects').select('*').limit(1);\n        console.log('Supabase test result:', {\n          data,\n          error\n        });\n        if (error) {\n          console.error('Supabase connection error:', error);\n        } else {\n          console.log('Supabase connected successfully');\n        }\n      } catch (err) {\n        console.error('Supabase test failed:', err);\n      }\n    };\n    testSupabaseConnection();\n  }, []);\n\n  // Handle content selection from dashboard\n  const handleContentSelected = useCallback(async contentId => {\n    // Handle quick start option\n    if (contentId === 'quick-start') {\n      setShowDashboard(false);\n      setActiveContent(null);\n      setStageContent({});\n      return;\n    }\n    try {\n      const content = await clientService.getProjectContent(contentId);\n      if (content) {\n        console.log('=== LOADING CONTENT ===');\n        console.log('Content:', content);\n        console.log('Stage data keys:', Object.keys(content.stage_data || {}));\n        setActiveContent(content);\n        setShowDashboard(false);\n\n        // Load stage data\n        if (content.stage_data) {\n          setStageContent(content.stage_data);\n          console.log('Loaded stage content:', Object.keys(content.stage_data));\n        } else {\n          console.log('No stage data found, starting fresh');\n          setStageContent({});\n        }\n      }\n    } catch (err) {\n      console.error('Failed to load content:', err);\n      toast.error('Failed to load content');\n    }\n  }, []);\n\n  // Auto-save when content changes\n  const handleContentUpdate = useCallback(async (stage, data) => {\n    console.log('=== CONTENT UPDATE DEBUG ===');\n    console.log('Stage:', stage);\n    console.log('Data keys:', Object.keys(data || {}));\n    console.log('Has activeContent:', !!activeContent);\n    console.log('Current stageContent keys:', Object.keys(stageContent));\n    if (!activeContent) {\n      console.log('No activeContent - using legacy project update');\n      // Fallback for legacy projects\n      setStageContent(prev => ({\n        ...prev,\n        [stage]: data\n      }));\n      return;\n    }\n\n    // Update local state immediately\n    const newStageContent = {\n      ...stageContent,\n      [stage]: data\n    };\n    setStageContent(newStageContent);\n    console.log('Updated local state, now auto-saving...');\n\n    // Auto-save to database using clientService directly\n    try {\n      if (activeContent) {\n        await clientService.autoSaveContent(activeContent.id, stage, newStageContent);\n        console.log('Auto-save completed successfully');\n      }\n    } catch (error) {\n      console.error('Auto-save failed:', error);\n    }\n  }, [activeContent, stageContent]);\n  const loadAllStageContent = useCallback(async () => {\n    if (!(project !== null && project !== void 0 && project.id)) return;\n    const stages = ['research', 'blog', 'podcast_script', 'audio', 'images', 'social'];\n    const content = {};\n    for (const stage of stages) {\n      const data = await getStageContent(project.id, stage);\n      if (data) {\n        content[stage] = data;\n      }\n    }\n    setStageContent(content);\n  }, [project === null || project === void 0 ? void 0 : project.id, getStageContent]);\n  useEffect(() => {\n    if (project !== null && project !== void 0 && project.id) {\n      loadAllStageContent();\n    }\n  }, [project === null || project === void 0 ? void 0 : project.id, loadAllStageContent]);\n  const handleKeywordSubmit = async keyword => {\n    if (activeContent) {\n      // If we have an active content from client dashboard, use that\n      await handleGenerateResearch(activeContent.id, keyword);\n    } else {\n      // Legacy flow - create a project directly\n      const newProject = await createProject(keyword);\n      if (newProject) {\n        await handleGenerateResearch(newProject.id, keyword);\n      }\n    }\n  };\n  const handleGenerateResearch = async (contentId, keyword) => {\n    const timeoutId = setTimeout(() => {\n      console.warn('Research is taking longer than expected... Still processing...');\n    }, 15000);\n    try {\n      const research = await regenerateContent(contentId, 'research', {\n        keyword\n      });\n      clearTimeout(timeoutId);\n      if (research) {\n        await handleContentUpdate('research', research);\n      }\n    } catch (error) {\n      clearTimeout(timeoutId);\n      throw error;\n    }\n  };\n  const handleGenerateBlog = async () => {\n    const projectId = (activeContent === null || activeContent === void 0 ? void 0 : activeContent.id) || (project === null || project === void 0 ? void 0 : project.id);\n    const keyword = (activeContent === null || activeContent === void 0 ? void 0 : activeContent.keyword) || (project === null || project === void 0 ? void 0 : project.keyword);\n    console.log('=== BLOG GENERATION DEBUG ===');\n    console.log('Project ID:', projectId);\n    console.log('Keyword:', keyword);\n    console.log('Has research data:', !!stageContent.research);\n    console.log('Research data keys:', stageContent.research ? Object.keys(stageContent.research) : 'None');\n    console.log('==============================');\n    if (!projectId || !stageContent.research) {\n      console.error('Missing required data for blog generation:', {\n        hasProjectId: !!projectId,\n        hasResearch: !!stageContent.research,\n        projectId,\n        keyword\n      });\n      toast.error('Missing required data. Please generate research first.');\n      return;\n    }\n    if (!keyword) {\n      console.error('Missing keyword for blog generation');\n      toast.error('Missing keyword. Please check your project setup.');\n      return;\n    }\n    try {\n      console.log('Starting blog generation...');\n      const blog = await regenerateContent(projectId, 'blog', {\n        keyword,\n        research: stageContent.research\n      });\n      console.log('Blog generation result:', blog);\n      if (blog) {\n        console.log('Updating content with blog data...');\n        await handleContentUpdate('blog', blog);\n\n        // Only update stage if we have a project (not for activeContent)\n        if (project !== null && project !== void 0 && project.id) {\n          await updateStage(projectId, 'blog');\n        }\n        console.log('Blog generation completed successfully');\n      } else {\n        console.error('Blog generation returned null/undefined');\n        toast.error('Blog generation failed - no content returned');\n      }\n    } catch (error) {\n      console.error('Blog generation error:', error);\n      toast.error(`Blog generation failed: ${error.message}`);\n    }\n  };\n  const handleGeneratePodcast = async () => {\n    const projectId = (activeContent === null || activeContent === void 0 ? void 0 : activeContent.id) || (project === null || project === void 0 ? void 0 : project.id);\n    const keyword = (activeContent === null || activeContent === void 0 ? void 0 : activeContent.keyword) || (project === null || project === void 0 ? void 0 : project.keyword);\n    console.log('=== PODCAST GENERATION DEBUG ===');\n    console.log('Project ID:', projectId);\n    console.log('Keyword:', keyword);\n    console.log('Has blog:', !!stageContent.blog);\n    console.log('Has research:', !!stageContent.research);\n    console.log('=================================');\n    if (!projectId || !stageContent.blog) {\n      console.error('Missing required data for podcast generation:', {\n        hasProjectId: !!projectId,\n        hasBlog: !!stageContent.blog,\n        hasResearch: !!stageContent.research\n      });\n      toast.error('Missing required data. Please generate blog content first.');\n      return;\n    }\n    if (!keyword) {\n      console.error('Missing keyword for podcast generation');\n      toast.error('Missing keyword. Please check your project setup.');\n      return;\n    }\n    try {\n      console.log('Starting podcast generation...');\n      const podcast = await regenerateContent(projectId, 'podcast_script', {\n        keyword,\n        research: stageContent.research,\n        blog: stageContent.blog\n      });\n      console.log('Podcast generation result:', podcast);\n      if (podcast) {\n        console.log('Updating content with podcast data...');\n        await handleContentUpdate('podcast_script', podcast);\n\n        // Only update stage if we have a project (not for activeContent)\n        if (project !== null && project !== void 0 && project.id) {\n          await updateStage(projectId, 'podcast_script');\n        }\n        console.log('Podcast generation completed successfully');\n      } else {\n        console.error('Podcast generation returned null/undefined');\n        toast.error('Podcast generation failed - no content returned');\n      }\n    } catch (error) {\n      console.error('Podcast generation error:', error);\n      toast.error(`Podcast generation failed: ${error.message}`);\n    }\n  };\n  const handleGenerateAudio = async () => {\n    const projectId = (activeContent === null || activeContent === void 0 ? void 0 : activeContent.id) || (project === null || project === void 0 ? void 0 : project.id);\n    const keyword = (activeContent === null || activeContent === void 0 ? void 0 : activeContent.keyword) || (project === null || project === void 0 ? void 0 : project.keyword);\n    console.log('=== AUDIO GENERATION DEBUG ===');\n    console.log('Project ID:', projectId);\n    console.log('Keyword:', keyword);\n    console.log('Has podcast script:', !!stageContent.podcast_script);\n    console.log('Current audio content:', stageContent.audio);\n    console.log('Is loading state:', isLoading);\n    console.log('===============================');\n    if (!projectId || !stageContent.podcast_script) {\n      console.error('Missing required data for audio generation:', {\n        hasProjectId: !!projectId,\n        hasPodcastScript: !!stageContent.podcast_script\n      });\n      toast.error('Missing required data. Please generate podcast script first.');\n      return;\n    }\n    if (!keyword) {\n      console.error('Missing keyword for audio generation');\n      toast.error('Missing keyword. Please check your project setup.');\n      return;\n    }\n    try {\n      console.log('Starting audio generation...');\n\n      // Clear existing audio to show loading state\n      await handleContentUpdate('audio', null);\n      const audio = await regenerateContent(projectId, 'audio', {\n        keyword,\n        podcastScript: stageContent.podcast_script\n      });\n      console.log('Audio generation result:', audio);\n      console.log('Audio result type:', typeof audio);\n      console.log('Audio result keys:', audio ? Object.keys(audio) : 'null');\n      if (audio) {\n        console.log('Updating content with audio data...');\n        await handleContentUpdate('audio', audio);\n\n        // Only update stage if we have a project (not for activeContent)\n        if (project !== null && project !== void 0 && project.id) {\n          await updateStage(projectId, 'audio');\n        }\n        console.log('Audio generation completed successfully');\n        toast.success('Audio generated successfully!');\n      } else {\n        console.error('Audio generation returned null/undefined');\n        toast.error('Audio generation failed - no content returned');\n      }\n    } catch (error) {\n      console.error('Audio generation error:', error);\n      console.error('Error stack:', error.stack);\n      toast.error(`Audio generation failed: ${error.message}`);\n    }\n  };\n  const handleGenerateImages = async () => {\n    const projectId = (activeContent === null || activeContent === void 0 ? void 0 : activeContent.id) || (project === null || project === void 0 ? void 0 : project.id);\n    if (!projectId || !stageContent.blog) return;\n    const images = await regenerateContent(projectId, 'images', {\n      keyword: (activeContent === null || activeContent === void 0 ? void 0 : activeContent.keyword) || (project === null || project === void 0 ? void 0 : project.keyword),\n      content: stageContent.blog\n    });\n    if (images) {\n      await handleContentUpdate('images', images);\n      await updateStage(projectId, 'images');\n    }\n  };\n  const handleGenerateSocial = async () => {\n    const projectId = (activeContent === null || activeContent === void 0 ? void 0 : activeContent.id) || (project === null || project === void 0 ? void 0 : project.id);\n    if (!projectId || !stageContent.blog) return;\n    const social = await regenerateContent(projectId, 'social', {\n      keyword: (activeContent === null || activeContent === void 0 ? void 0 : activeContent.keyword) || (project === null || project === void 0 ? void 0 : project.keyword),\n      content: stageContent.blog\n    });\n    if (social) {\n      await handleContentUpdate('social', social);\n      await updateStage(projectId, 'social');\n    }\n  };\n  const handleCompleteProject = async () => {\n    const projectId = (activeContent === null || activeContent === void 0 ? void 0 : activeContent.id) || (project === null || project === void 0 ? void 0 : project.id);\n    if (!projectId) return;\n    await updateStage(projectId, 'complete');\n  };\n  const getCurrentStage = () => {\n    if (activeContent) {\n      // Determine stage based on what content exists\n      if (stageContent.social) return 'social';\n      if (stageContent.images) return 'images';\n      if (stageContent.audio) return 'audio';\n      if (stageContent.podcast_script) return 'podcast_script';\n      if (stageContent.blog) return 'blog';\n      if (stageContent.research) return 'research';\n      return 'research'; // Default to research if no content\n    }\n    return currentStage;\n  };\n  const renderCurrentStage = () => {\n    const stage = getCurrentStage();\n    const keyword = (activeContent === null || activeContent === void 0 ? void 0 : activeContent.keyword) || (project === null || project === void 0 ? void 0 : project.keyword);\n    if (!keyword && !activeContent) {\n      return /*#__PURE__*/_jsxDEV(KeywordInput, {\n        onSubmit: handleKeywordSubmit,\n        isLoading: isLoading\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 435,\n        columnNumber: 14\n      }, this);\n    }\n    switch (stage) {\n      case 'research':\n        return /*#__PURE__*/_jsxDEV(ResearchDisplay, {\n          research: stageContent.research,\n          isLoading: isLoading,\n          onRegenerate: () => handleGenerateResearch((activeContent === null || activeContent === void 0 ? void 0 : activeContent.id) || (project === null || project === void 0 ? void 0 : project.id) || '', keyword || ''),\n          onContinue: handleGenerateBlog\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 441,\n          columnNumber: 11\n        }, this);\n      case 'blog':\n        return /*#__PURE__*/_jsxDEV(BlogDisplay, {\n          blog: stageContent.blog,\n          isLoading: isLoading,\n          onRegenerate: handleGenerateBlog,\n          onContinue: handleGeneratePodcast\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 451,\n          columnNumber: 11\n        }, this);\n      case 'podcast_script':\n        return /*#__PURE__*/_jsxDEV(PodcastDisplay, {\n          podcast: stageContent.podcast_script,\n          isLoading: isLoading,\n          onRegenerate: handleGeneratePodcast,\n          onContinue: handleGenerateAudio\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 461,\n          columnNumber: 11\n        }, this);\n      case 'audio':\n        return /*#__PURE__*/_jsxDEV(AudioPlayer, {\n          audio: stageContent.audio,\n          isLoading: isLoading,\n          onRegenerate: handleGenerateAudio,\n          onContinue: handleGenerateImages\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 471,\n          columnNumber: 11\n        }, this);\n      case 'images':\n        return /*#__PURE__*/_jsxDEV(ImageGallery, {\n          images: stageContent.images,\n          isLoading: isLoading,\n          onRegenerate: handleGenerateImages,\n          onContinue: handleGenerateSocial\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 481,\n          columnNumber: 11\n        }, this);\n      case 'social':\n        return /*#__PURE__*/_jsxDEV(SocialCaptions, {\n          social: stageContent.social,\n          isLoading: isLoading,\n          onRegenerate: handleGenerateSocial,\n          onContinue: handleCompleteProject\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 491,\n          columnNumber: 11\n        }, this);\n      case 'complete':\n        return /*#__PURE__*/_jsxDEV(ContentSummary, {\n          project: project || {\n            id: (activeContent === null || activeContent === void 0 ? void 0 : activeContent.id) || '',\n            keyword: keyword || '',\n            status: 'complete',\n            created_at: (activeContent === null || activeContent === void 0 ? void 0 : activeContent.created_at) || '',\n            updated_at: (activeContent === null || activeContent === void 0 ? void 0 : activeContent.updated_at) || ''\n          },\n          onNewProject: () => {\n            setShowDashboard(true);\n            setActiveContent(null);\n            setStageContent({});\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 501,\n          columnNumber: 11\n        }, this);\n      default:\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          children: \"Unknown stage\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 518,\n          columnNumber: 16\n        }, this);\n    }\n  };\n  if (showDashboard) {\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(ClientDashboard, {\n        onContentSelected: handleContentSelected\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 525,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Toaster, {\n        position: \"bottom-right\",\n        toastOptions: {\n          style: {\n            background: 'rgba(20, 20, 20, 0.9)',\n            color: '#fff',\n            backdropFilter: 'blur(10px)',\n            border: '1px solid rgba(255, 255, 255, 0.1)'\n          }\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 526,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"min-h-screen bg-gray-950 bg-gradient-to-br from-gray-900 via-gray-950 to-[#1a0d3d]\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"fixed top-6 left-6 right-6 z-50 flex items-center justify-between\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => {\n          setShowDashboard(true);\n          setActiveContent(null);\n          setStageContent({});\n        },\n        className: \"inline-flex items-center gap-2 px-4 py-2 bg-white/10 backdrop-blur-xl rounded-xl border border-white/20 hover:bg-white/20 transition-all duration-200\",\n        children: [/*#__PURE__*/_jsxDEV(Menu, {\n          className: \"w-5 h-5 text-white\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 554,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"text-white font-medium\",\n          children: \"Dashboard\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 555,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 546,\n        columnNumber: 9\n      }, this), activeContent && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"bg-white/10 backdrop-blur-xl rounded-xl px-4 py-2 border border-white/20\",\n        children: /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"text-white/80 text-sm\",\n          children: [/*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"text-white/60\",\n            children: \"Working on:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 562,\n            columnNumber: 15\n          }, this), \" \", activeContent.content_name]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 561,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 560,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 544,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(AppLayout, {\n      project: project || (activeContent ? {\n        id: activeContent.id,\n        keyword: activeContent.keyword,\n        status: activeContent.stage,\n        created_at: activeContent.created_at,\n        updated_at: activeContent.updated_at\n      } : null),\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"max-w-4xl mx-auto pt-20\",\n        children: [error && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"mb-6 p-4 bg-red-500/10 backdrop-blur-xl border border-red-500/20 rounded-2xl text-red-400\",\n          children: error\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 579,\n          columnNumber: 13\n        }, this), renderCurrentStage()]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 577,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 568,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Toaster, {\n      position: \"bottom-right\",\n      toastOptions: {\n        style: {\n          background: 'rgba(20, 20, 20, 0.9)',\n          color: '#fff',\n          backdropFilter: 'blur(10px)',\n          border: '1px solid rgba(255, 255, 255, 0.1)'\n        }\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 588,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 542,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"BnFl/0vmUp08v44Coudfeh0mkI8=\", false, function () {\n  return [useProject, useClientProject];\n});\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","useCallback","Toaster","toast","Menu","supabase","clientService","AppLayout","ClientDashboard","KeywordInput","ResearchDisplay","BlogDisplay","PodcastDisplay","AudioPlayer","ImageGallery","SocialCaptions","ContentSummary","useProject","useClientProject","jsxDEV","_jsxDEV","Fragment","_Fragment","App","_s","project","currentStage","isLoading","error","createProject","updateStage","getStageContent","regenerateContent","selectedContent","autoSave","stageContent","setStageContent","showDashboard","setShowDashboard","activeContent","setActiveContent","localStorage","removeItem","console","log","testSupabaseConnection","data","from","select","limit","err","handleContentSelected","contentId","content","getProjectContent","Object","keys","stage_data","handleContentUpdate","stage","prev","newStageContent","autoSaveContent","id","loadAllStageContent","stages","handleKeywordSubmit","keyword","handleGenerateResearch","newProject","timeoutId","setTimeout","warn","research","clearTimeout","handleGenerateBlog","projectId","hasProjectId","hasResearch","blog","message","handleGeneratePodcast","hasBlog","podcast","handleGenerateAudio","podcast_script","audio","hasPodcastScript","podcastScript","success","stack","handleGenerateImages","images","handleGenerateSocial","social","handleCompleteProject","getCurrentStage","renderCurrentStage","onSubmit","fileName","_jsxFileName","lineNumber","columnNumber","onRegenerate","onContinue","status","created_at","updated_at","onNewProject","children","onContentSelected","position","toastOptions","style","background","color","backdropFilter","border","className","onClick","content_name","_c","$RefreshReg$"],"sources":["/Users/will/Content Creation App/src/App.tsx"],"sourcesContent":["// App.tsx\nimport React, { useState, useEffect, useCallback } from 'react';\nimport { Toaster, toast } from 'react-hot-toast';\nimport { Menu } from 'lucide-react';\nimport { supabase } from './services/supabase.service';\nimport { clientService } from './services/client.service';\nimport { AppLayout } from './components/layout/AppLayout';\nimport { ClientDashboard } from './components/client/ClientDashboard';\nimport { KeywordInput } from './components/stages/KeywordInput';\nimport { ResearchDisplay } from './components/stages/ResearchDisplay';\nimport { BlogDisplay } from './components/stages/BlogDisplay';\nimport { PodcastDisplay } from './components/stages/PodcastDisplay';\nimport { AudioPlayer } from './components/stages/AudioPlayer';\nimport { ImageGallery } from './components/stages/ImageGallery';\nimport { SocialCaptions } from './components/stages/SocialCaptions';\nimport { ContentSummary } from './components/final/ContentSummary';\nimport { useProject } from './hooks/useProject';\nimport { useClientProject } from './hooks/useClientProject';\nimport { ProjectStage, ResearchContent } from './types/project.types';\nimport { ProjectContent } from './types/client.types';\n\nfunction App() {\n  const {\n    project,\n    currentStage,\n    isLoading,\n    error,\n    createProject,\n    updateStage,\n    getStageContent,\n    regenerateContent\n  } = useProject();\n\n  const {\n    selectedContent,\n    autoSave\n  } = useClientProject();\n\n  const [stageContent, setStageContent] = useState<Record<string, any>>({});\n  const [showDashboard, setShowDashboard] = useState(true);\n  const [activeContent, setActiveContent] = useState<ProjectContent | null>(null);\n\n  // Ensure we always start on the dashboard\n  useEffect(() => {\n    // Clear any saved state\n    localStorage.removeItem('currentProjectId');\n    localStorage.removeItem('currentContentId');\n    \n    // Reset to dashboard\n    setShowDashboard(true);\n    setActiveContent(null);\n    setStageContent({});\n    \n    console.log('App initialized - forcing dashboard view');\n  }, []);\n\n  // Test Supabase connection on component mount\n  useEffect(() => {\n    const testSupabaseConnection = async () => {\n      try {\n        console.log('Testing Supabase connection...');\n        const { data, error } = await supabase.from('projects').select('*').limit(1);\n        console.log('Supabase test result:', { data, error });\n        \n        if (error) {\n          console.error('Supabase connection error:', error);\n        } else {\n          console.log('Supabase connected successfully');\n        }\n      } catch (err) {\n        console.error('Supabase test failed:', err);\n      }\n    };\n    \n    testSupabaseConnection();\n  }, []);\n\n  // Handle content selection from dashboard\n  const handleContentSelected = useCallback(async (contentId: string) => {\n    // Handle quick start option\n    if (contentId === 'quick-start') {\n      setShowDashboard(false);\n      setActiveContent(null);\n      setStageContent({});\n      return;\n    }\n\n    try {\n      const content = await clientService.getProjectContent(contentId);\n      if (content) {\n        console.log('=== LOADING CONTENT ===');\n        console.log('Content:', content);\n        console.log('Stage data keys:', Object.keys(content.stage_data || {}));\n        \n        setActiveContent(content);\n        setShowDashboard(false);\n        \n        // Load stage data\n        if (content.stage_data) {\n          setStageContent(content.stage_data);\n          console.log('Loaded stage content:', Object.keys(content.stage_data));\n        } else {\n          console.log('No stage data found, starting fresh');\n          setStageContent({});\n        }\n      }\n    } catch (err) {\n      console.error('Failed to load content:', err);\n      toast.error('Failed to load content');\n    }\n  }, []);\n\n  // Auto-save when content changes\n  const handleContentUpdate = useCallback(async (stage: ProjectStage, data: any) => {\n    console.log('=== CONTENT UPDATE DEBUG ===');\n    console.log('Stage:', stage);\n    console.log('Data keys:', Object.keys(data || {}));\n    console.log('Has activeContent:', !!activeContent);\n    console.log('Current stageContent keys:', Object.keys(stageContent));\n    \n    if (!activeContent) {\n      console.log('No activeContent - using legacy project update');\n      // Fallback for legacy projects\n      setStageContent(prev => ({ ...prev, [stage]: data }));\n      return;\n    }\n\n    // Update local state immediately\n    const newStageContent = { ...stageContent, [stage]: data };\n    setStageContent(newStageContent);\n    \n    console.log('Updated local state, now auto-saving...');\n    \n    // Auto-save to database using clientService directly\n    try {\n      if (activeContent) {\n        await clientService.autoSaveContent(activeContent.id, stage, newStageContent);\n        console.log('Auto-save completed successfully');\n      }\n    } catch (error) {\n      console.error('Auto-save failed:', error);\n    }\n  }, [activeContent, stageContent]);\n\n  const loadAllStageContent = useCallback(async () => {\n    if (!project?.id) return;\n    \n    const stages: ProjectStage[] = [\n      'research', 'blog', 'podcast_script', \n      'audio', 'images', 'social'\n    ];\n    \n    const content: Record<string, any> = {};\n    \n    for (const stage of stages) {\n      const data = await getStageContent(project.id, stage);\n      if (data) {\n        content[stage] = data;\n      }\n    }\n    \n    setStageContent(content);\n  }, [project?.id, getStageContent]);\n\n  useEffect(() => {\n    if (project?.id) {\n      loadAllStageContent();\n    }\n  }, [project?.id, loadAllStageContent]);\n\n  const handleKeywordSubmit = async (keyword: string) => {\n    if (activeContent) {\n      // If we have an active content from client dashboard, use that\n      await handleGenerateResearch(activeContent.id, keyword);\n    } else {\n      // Legacy flow - create a project directly\n      const newProject = await createProject(keyword);\n      if (newProject) {\n        await handleGenerateResearch(newProject.id, keyword);\n      }\n    }\n  };\n\n  const handleGenerateResearch = async (contentId: string, keyword: string) => {\n    const timeoutId = setTimeout(() => {\n      console.warn('Research is taking longer than expected... Still processing...');\n    }, 15000);\n\n    try {\n      const research = await regenerateContent(contentId, 'research', { keyword });\n      clearTimeout(timeoutId);\n      \n      if (research) {\n        await handleContentUpdate('research', research);\n      }\n    } catch (error) {\n      clearTimeout(timeoutId);\n      throw error;\n    }\n  };\n\n  const handleGenerateBlog = async () => {\n    const projectId = activeContent?.id || project?.id;\n    const keyword = activeContent?.keyword || project?.keyword;\n    \n    console.log('=== BLOG GENERATION DEBUG ===');\n    console.log('Project ID:', projectId);\n    console.log('Keyword:', keyword);\n    console.log('Has research data:', !!stageContent.research);\n    console.log('Research data keys:', stageContent.research ? Object.keys(stageContent.research) : 'None');\n    console.log('==============================');\n    \n    if (!projectId || !stageContent.research) {\n      console.error('Missing required data for blog generation:', {\n        hasProjectId: !!projectId,\n        hasResearch: !!stageContent.research,\n        projectId,\n        keyword\n      });\n      toast.error('Missing required data. Please generate research first.');\n      return;\n    }\n    \n    if (!keyword) {\n      console.error('Missing keyword for blog generation');\n      toast.error('Missing keyword. Please check your project setup.');\n      return;\n    }\n    \n    try {\n      console.log('Starting blog generation...');\n      const blog = await regenerateContent(projectId, 'blog', {\n        keyword,\n        research: stageContent.research\n      });\n      \n      console.log('Blog generation result:', blog);\n      \n      if (blog) {\n        console.log('Updating content with blog data...');\n        await handleContentUpdate('blog', blog);\n        \n        // Only update stage if we have a project (not for activeContent)\n        if (project?.id) {\n          await updateStage(projectId, 'blog');\n        }\n        \n        console.log('Blog generation completed successfully');\n      } else {\n        console.error('Blog generation returned null/undefined');\n        toast.error('Blog generation failed - no content returned');\n      }\n    } catch (error: any) {\n      console.error('Blog generation error:', error);\n      toast.error(`Blog generation failed: ${error.message}`);\n    }\n  };\n\n  const handleGeneratePodcast = async () => {\n    const projectId = activeContent?.id || project?.id;\n    const keyword = activeContent?.keyword || project?.keyword;\n    \n    console.log('=== PODCAST GENERATION DEBUG ===');\n    console.log('Project ID:', projectId);\n    console.log('Keyword:', keyword);\n    console.log('Has blog:', !!stageContent.blog);\n    console.log('Has research:', !!stageContent.research);\n    console.log('=================================');\n    \n    if (!projectId || !stageContent.blog) {\n      console.error('Missing required data for podcast generation:', {\n        hasProjectId: !!projectId,\n        hasBlog: !!stageContent.blog,\n        hasResearch: !!stageContent.research\n      });\n      toast.error('Missing required data. Please generate blog content first.');\n      return;\n    }\n    \n    if (!keyword) {\n      console.error('Missing keyword for podcast generation');\n      toast.error('Missing keyword. Please check your project setup.');\n      return;\n    }\n    \n    try {\n      console.log('Starting podcast generation...');\n      const podcast = await regenerateContent(projectId, 'podcast_script', {\n        keyword,\n        research: stageContent.research,\n        blog: stageContent.blog\n      });\n      \n      console.log('Podcast generation result:', podcast);\n      \n      if (podcast) {\n        console.log('Updating content with podcast data...');\n        await handleContentUpdate('podcast_script', podcast);\n        \n        // Only update stage if we have a project (not for activeContent)\n        if (project?.id) {\n          await updateStage(projectId, 'podcast_script');\n        }\n        \n        console.log('Podcast generation completed successfully');\n      } else {\n        console.error('Podcast generation returned null/undefined');\n        toast.error('Podcast generation failed - no content returned');\n      }\n    } catch (error: any) {\n      console.error('Podcast generation error:', error);\n      toast.error(`Podcast generation failed: ${error.message}`);\n    }\n  };\n\n  const handleGenerateAudio = async () => {\n    const projectId = activeContent?.id || project?.id;\n    const keyword = activeContent?.keyword || project?.keyword;\n    \n    console.log('=== AUDIO GENERATION DEBUG ===');\n    console.log('Project ID:', projectId);\n    console.log('Keyword:', keyword);\n    console.log('Has podcast script:', !!stageContent.podcast_script);\n    console.log('Current audio content:', stageContent.audio);\n    console.log('Is loading state:', isLoading);\n    console.log('===============================');\n    \n    if (!projectId || !stageContent.podcast_script) {\n      console.error('Missing required data for audio generation:', {\n        hasProjectId: !!projectId,\n        hasPodcastScript: !!stageContent.podcast_script\n      });\n      toast.error('Missing required data. Please generate podcast script first.');\n      return;\n    }\n    \n    if (!keyword) {\n      console.error('Missing keyword for audio generation');\n      toast.error('Missing keyword. Please check your project setup.');\n      return;\n    }\n    \n    try {\n      console.log('Starting audio generation...');\n      \n      // Clear existing audio to show loading state\n      await handleContentUpdate('audio', null);\n      \n      const audio = await regenerateContent(projectId, 'audio', {\n        keyword,\n        podcastScript: stageContent.podcast_script\n      });\n      \n      console.log('Audio generation result:', audio);\n      console.log('Audio result type:', typeof audio);\n      console.log('Audio result keys:', audio ? Object.keys(audio) : 'null');\n      \n      if (audio) {\n        console.log('Updating content with audio data...');\n        await handleContentUpdate('audio', audio);\n        \n        // Only update stage if we have a project (not for activeContent)\n        if (project?.id) {\n          await updateStage(projectId, 'audio');\n        }\n        \n        console.log('Audio generation completed successfully');\n        toast.success('Audio generated successfully!');\n      } else {\n        console.error('Audio generation returned null/undefined');\n        toast.error('Audio generation failed - no content returned');\n      }\n    } catch (error: any) {\n      console.error('Audio generation error:', error);\n      console.error('Error stack:', error.stack);\n      toast.error(`Audio generation failed: ${error.message}`);\n    }\n  };\n\n  const handleGenerateImages = async () => {\n    const projectId = activeContent?.id || project?.id;\n    if (!projectId || !stageContent.blog) return;\n    \n    const images = await regenerateContent(projectId, 'images', {\n      keyword: activeContent?.keyword || project?.keyword,\n      content: stageContent.blog\n    });\n    \n    if (images) {\n      await handleContentUpdate('images', images);\n      await updateStage(projectId, 'images');\n    }\n  };\n\n  const handleGenerateSocial = async () => {\n    const projectId = activeContent?.id || project?.id;\n    if (!projectId || !stageContent.blog) return;\n    \n    const social = await regenerateContent(projectId, 'social', {\n      keyword: activeContent?.keyword || project?.keyword,\n      content: stageContent.blog\n    });\n    \n    if (social) {\n      await handleContentUpdate('social', social);\n      await updateStage(projectId, 'social');\n    }\n  };\n\n  const handleCompleteProject = async () => {\n    const projectId = activeContent?.id || project?.id;\n    if (!projectId) return;\n    await updateStage(projectId, 'complete');\n  };\n\n  const getCurrentStage = () => {\n    if (activeContent) {\n      // Determine stage based on what content exists\n      if (stageContent.social) return 'social';\n      if (stageContent.images) return 'images';\n      if (stageContent.audio) return 'audio';\n      if (stageContent.podcast_script) return 'podcast_script';\n      if (stageContent.blog) return 'blog';\n      if (stageContent.research) return 'research';\n      return 'research'; // Default to research if no content\n    }\n    return currentStage;\n  };\n\n  const renderCurrentStage = () => {\n    const stage = getCurrentStage();\n    const keyword = activeContent?.keyword || project?.keyword;\n\n    if (!keyword && !activeContent) {\n      return <KeywordInput onSubmit={handleKeywordSubmit} isLoading={isLoading} />;\n    }\n\n    switch (stage) {\n      case 'research':\n        return (\n          <ResearchDisplay\n            research={stageContent.research}\n            isLoading={isLoading}\n            onRegenerate={() => handleGenerateResearch(activeContent?.id || project?.id || '', keyword || '')}\n            onContinue={handleGenerateBlog}\n          />\n        );\n      \n      case 'blog':\n        return (\n          <BlogDisplay\n            blog={stageContent.blog}\n            isLoading={isLoading}\n            onRegenerate={handleGenerateBlog}\n            onContinue={handleGeneratePodcast}\n          />\n        );\n\n      case 'podcast_script':\n        return (\n          <PodcastDisplay\n            podcast={stageContent.podcast_script}\n            isLoading={isLoading}\n            onRegenerate={handleGeneratePodcast}\n            onContinue={handleGenerateAudio}\n          />\n        );\n\n      case 'audio':\n        return (\n          <AudioPlayer\n            audio={stageContent.audio}\n            isLoading={isLoading}\n            onRegenerate={handleGenerateAudio}\n            onContinue={handleGenerateImages}\n          />\n        );\n\n      case 'images':\n        return (\n          <ImageGallery\n            images={stageContent.images}\n            isLoading={isLoading}\n            onRegenerate={handleGenerateImages}\n            onContinue={handleGenerateSocial}\n          />\n        );\n\n      case 'social':\n        return (\n          <SocialCaptions\n            social={stageContent.social}\n            isLoading={isLoading}\n            onRegenerate={handleGenerateSocial}\n            onContinue={handleCompleteProject}\n          />\n        );\n\n      case 'complete':\n        return (\n          <ContentSummary\n            project={project || { \n              id: activeContent?.id || '', \n              keyword: keyword || '',\n              status: 'complete',\n              created_at: activeContent?.created_at || '',\n              updated_at: activeContent?.updated_at || ''\n            }}\n            onNewProject={() => {\n              setShowDashboard(true);\n              setActiveContent(null);\n              setStageContent({});\n            }}\n          />\n        );\n      \n      default:\n        return <div>Unknown stage</div>;\n    }\n  };\n\n  if (showDashboard) {\n    return (\n      <>\n        <ClientDashboard onContentSelected={handleContentSelected} />\n        <Toaster \n          position=\"bottom-right\"\n          toastOptions={{\n            style: {\n              background: 'rgba(20, 20, 20, 0.9)',\n              color: '#fff',\n              backdropFilter: 'blur(10px)',\n              border: '1px solid rgba(255, 255, 255, 0.1)',\n            },\n          }}\n        />\n      </>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-gray-950 bg-gradient-to-br from-gray-900 via-gray-950 to-[#1a0d3d]\">\n      {/* Navigation Bar */}\n      <div className=\"fixed top-6 left-6 right-6 z-50 flex items-center justify-between\">\n        {/* Home/Dashboard Button */}\n        <button\n          onClick={() => {\n            setShowDashboard(true);\n            setActiveContent(null);\n            setStageContent({});\n          }}\n          className=\"inline-flex items-center gap-2 px-4 py-2 bg-white/10 backdrop-blur-xl rounded-xl border border-white/20 hover:bg-white/20 transition-all duration-200\"\n        >\n          <Menu className=\"w-5 h-5 text-white\" />\n          <span className=\"text-white font-medium\">Dashboard</span>\n        </button>\n\n        {/* Current Content Info */}\n        {activeContent && (\n          <div className=\"bg-white/10 backdrop-blur-xl rounded-xl px-4 py-2 border border-white/20\">\n            <p className=\"text-white/80 text-sm\">\n              <span className=\"text-white/60\">Working on:</span> {activeContent.content_name}\n            </p>\n          </div>\n        )}\n      </div>\n\n      <AppLayout \n        project={project || (activeContent ? {\n          id: activeContent.id,\n          keyword: activeContent.keyword,\n          status: activeContent.stage as ProjectStage,\n          created_at: activeContent.created_at,\n          updated_at: activeContent.updated_at\n        } : null)}\n      >\n        <div className=\"max-w-4xl mx-auto pt-20\">\n          {error && (\n            <div className=\"mb-6 p-4 bg-red-500/10 backdrop-blur-xl border border-red-500/20 rounded-2xl text-red-400\">\n              {error}\n            </div>\n          )}\n          \n          {renderCurrentStage()}\n        </div>\n      </AppLayout>\n      \n      <Toaster \n        position=\"bottom-right\"\n        toastOptions={{\n          style: {\n            background: 'rgba(20, 20, 20, 0.9)',\n            color: '#fff',\n            backdropFilter: 'blur(10px)',\n            border: '1px solid rgba(255, 255, 255, 0.1)',\n          },\n        }}\n      />\n    </div>\n  );\n}\n\nexport default App;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}