{"ast":null,"code":"// services/content.service.ts\nimport { perplexityService } from './ai/perplexity.service';\nimport { supabase } from './supabase.service';\nexport class ContentService {\n  async generateResearch(projectId, keyword) {\n    try {\n      console.log('Generating deep research for:', keyword);\n\n      // Call Perplexity API\n      const research = await perplexityService.generateResearch(keyword);\n\n      // Save to Supabase\n      await this.saveContent(projectId, 'research', research);\n      return research;\n    } catch (error) {\n      console.error('Research generation failed:', error);\n      throw new Error(error.message || 'Failed to generate research');\n    }\n  }\n  async saveContent(projectId, stageType, content) {\n    // Mark previous versions as not current\n    await supabase.from('content_stages').update({\n      is_current: false\n    }).eq('project_id', projectId).eq('stage_type', stageType);\n\n    // Insert new version\n    const {\n      error\n    } = await supabase.from('content_stages').insert({\n      project_id: projectId,\n      stage_type: stageType,\n      content,\n      is_current: true\n    });\n    if (error) throw error;\n  }\n}\nexport const contentService = new ContentService();","map":{"version":3,"names":["perplexityService","supabase","ContentService","generateResearch","projectId","keyword","console","log","research","saveContent","error","Error","message","stageType","content","from","update","is_current","eq","insert","project_id","stage_type","contentService"],"sources":["/Users/will/Content Creation App/src/services/content.service.ts"],"sourcesContent":["// services/content.service.ts\nimport { perplexityService } from './ai/perplexity.service';\nimport { supabase } from './supabase.service';\nimport { ResearchContent } from '../types/project.types';\n\nexport class ContentService {\n  async generateResearch(projectId: string, keyword: string): Promise<ResearchContent> {\n    try {\n      console.log('Generating deep research for:', keyword);\n      \n      // Call Perplexity API\n      const research = await perplexityService.generateResearch(keyword);\n      \n      // Save to Supabase\n      await this.saveContent(projectId, 'research', research);\n      \n      return research;\n    } catch (error: any) {\n      console.error('Research generation failed:', error);\n      throw new Error(error.message || 'Failed to generate research');\n    }\n  }\n\n  private async saveContent(\n    projectId: string,\n    stageType: string,\n    content: any\n  ): Promise<void> {\n    // Mark previous versions as not current\n    await supabase\n      .from('content_stages')\n      .update({ is_current: false })\n      .eq('project_id', projectId)\n      .eq('stage_type', stageType);\n\n    // Insert new version\n    const { error } = await supabase\n      .from('content_stages')\n      .insert({\n        project_id: projectId,\n        stage_type: stageType,\n        content,\n        is_current: true\n      });\n\n    if (error) throw error;\n  }\n}\n\nexport const contentService = new ContentService();"],"mappings":"AAAA;AACA,SAASA,iBAAiB,QAAQ,yBAAyB;AAC3D,SAASC,QAAQ,QAAQ,oBAAoB;AAG7C,OAAO,MAAMC,cAAc,CAAC;EAC1B,MAAMC,gBAAgBA,CAACC,SAAiB,EAAEC,OAAe,EAA4B;IACnF,IAAI;MACFC,OAAO,CAACC,GAAG,CAAC,+BAA+B,EAAEF,OAAO,CAAC;;MAErD;MACA,MAAMG,QAAQ,GAAG,MAAMR,iBAAiB,CAACG,gBAAgB,CAACE,OAAO,CAAC;;MAElE;MACA,MAAM,IAAI,CAACI,WAAW,CAACL,SAAS,EAAE,UAAU,EAAEI,QAAQ,CAAC;MAEvD,OAAOA,QAAQ;IACjB,CAAC,CAAC,OAAOE,KAAU,EAAE;MACnBJ,OAAO,CAACI,KAAK,CAAC,6BAA6B,EAAEA,KAAK,CAAC;MACnD,MAAM,IAAIC,KAAK,CAACD,KAAK,CAACE,OAAO,IAAI,6BAA6B,CAAC;IACjE;EACF;EAEA,MAAcH,WAAWA,CACvBL,SAAiB,EACjBS,SAAiB,EACjBC,OAAY,EACG;IACf;IACA,MAAMb,QAAQ,CACXc,IAAI,CAAC,gBAAgB,CAAC,CACtBC,MAAM,CAAC;MAAEC,UAAU,EAAE;IAAM,CAAC,CAAC,CAC7BC,EAAE,CAAC,YAAY,EAAEd,SAAS,CAAC,CAC3Bc,EAAE,CAAC,YAAY,EAAEL,SAAS,CAAC;;IAE9B;IACA,MAAM;MAAEH;IAAM,CAAC,GAAG,MAAMT,QAAQ,CAC7Bc,IAAI,CAAC,gBAAgB,CAAC,CACtBI,MAAM,CAAC;MACNC,UAAU,EAAEhB,SAAS;MACrBiB,UAAU,EAAER,SAAS;MACrBC,OAAO;MACPG,UAAU,EAAE;IACd,CAAC,CAAC;IAEJ,IAAIP,KAAK,EAAE,MAAMA,KAAK;EACxB;AACF;AAEA,OAAO,MAAMY,cAAc,GAAG,IAAIpB,cAAc,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}