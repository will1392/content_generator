{"ast":null,"code":"// services/ai/gemini.service.ts\nimport axios from 'axios';\nconst GEMINI_API_KEY = process.env.REACT_APP_GEMINI_API_KEY;\nconst GEMINI_API_URL = 'https://generativelanguage.googleapis.com/v1beta/models/gemini-2.5-pro-preview-06-05:generateContent';\nexport class GeminiService {\n  async makeRequest(prompt) {\n    console.log('=== GEMINI API REQUEST ===');\n    console.log('API Key exists:', !!GEMINI_API_KEY);\n    console.log('API Key length:', (GEMINI_API_KEY === null || GEMINI_API_KEY === void 0 ? void 0 : GEMINI_API_KEY.length) || 0);\n    console.log('API Key preview:', (GEMINI_API_KEY === null || GEMINI_API_KEY === void 0 ? void 0 : GEMINI_API_KEY.substring(0, 10)) + '...' || 'None');\n    console.log('API URL:', GEMINI_API_URL);\n    console.log('Prompt length:', prompt.length);\n    if (!GEMINI_API_KEY) {\n      throw new Error('Gemini API key is not configured. Please add REACT_APP_GEMINI_API_KEY to your .env file.');\n    }\n    try {\n      console.time('Gemini API Call');\n      const requestBody = {\n        contents: [{\n          parts: [{\n            text: prompt\n          }]\n        }],\n        generationConfig: {\n          temperature: 0.7,\n          topK: 40,\n          topP: 0.95,\n          maxOutputTokens: 4096\n        }\n      };\n      console.log('Request body prepared for Gemini API');\n      const response = await axios.post(`${GEMINI_API_URL}?key=${GEMINI_API_KEY}`, requestBody, {\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        timeout: 120000 // 2 minute timeout\n      });\n      console.timeEnd('Gemini API Call');\n      console.log('API response status:', response.status);\n      console.log('API response data keys:', Object.keys(response.data || {}));\n      console.log('Full API response data:', JSON.stringify(response.data, null, 2));\n      if (!response.data) {\n        console.error('Response data is null/undefined');\n        throw new Error('No data in API response');\n      }\n      if (!response.data.candidates || !Array.isArray(response.data.candidates)) {\n        console.error('Missing candidates field in response');\n        console.log('Available fields:', Object.keys(response.data));\n        throw new Error('No candidates field in API response');\n      }\n      if (response.data.candidates.length === 0) {\n        console.error('Candidates array is empty');\n        throw new Error('No candidates in API response');\n      }\n      const candidate = response.data.candidates[0];\n      if (!candidate.content || !candidate.content.parts || !Array.isArray(candidate.content.parts)) {\n        console.error('Invalid candidate structure');\n        console.log('Candidate structure:', JSON.stringify(candidate, null, 2));\n        throw new Error('Invalid candidate content structure');\n      }\n      if (candidate.content.parts.length === 0 || !candidate.content.parts[0].text) {\n        console.error('No text content in candidate');\n        throw new Error('No text content in API response');\n      }\n      const textContent = candidate.content.parts[0].text;\n      console.log('Successfully extracted text, length:', textContent.length);\n      console.log('Text preview:', textContent.substring(0, 200) + '...');\n      return textContent;\n    } catch (error) {\n      var _error$response, _error$response2, _error$response3, _error$response4, _error$response5, _error$response6, _error$response7, _error$response9, _error$response9$data, _error$response9$data2;\n      console.error('=== GEMINI API ERROR ===');\n      console.error('Error type:', error.constructor.name);\n      console.error('Error message:', error.message);\n      console.error('Error code:', error.code);\n      console.error('Error status:', (_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.status);\n      console.error('Error status text:', (_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : _error$response2.statusText);\n      console.error('Error response headers:', (_error$response3 = error.response) === null || _error$response3 === void 0 ? void 0 : _error$response3.headers);\n      console.error('Error response data:', JSON.stringify((_error$response4 = error.response) === null || _error$response4 === void 0 ? void 0 : _error$response4.data, null, 2));\n      console.error('Is network error:', error.message.includes('Network Error'));\n      console.error('Is timeout:', error.code === 'ECONNABORTED');\n      console.error('Full error stack:', error.stack);\n      console.error('===========================');\n      if (error.code === 'ECONNABORTED') {\n        throw new Error('Request timed out - please try again');\n      }\n      if (error.message.includes('Network Error')) {\n        throw new Error('Network error connecting to Gemini API. Please check your internet connection.');\n      }\n      if (((_error$response5 = error.response) === null || _error$response5 === void 0 ? void 0 : _error$response5.status) === 401) {\n        throw new Error('Invalid API key. Please check your Gemini API key configuration.');\n      }\n      if (((_error$response6 = error.response) === null || _error$response6 === void 0 ? void 0 : _error$response6.status) === 429) {\n        throw new Error('Rate limit exceeded. Please wait a moment and try again.');\n      }\n      if (((_error$response7 = error.response) === null || _error$response7 === void 0 ? void 0 : _error$response7.status) === 400) {\n        var _error$response8, _error$response8$data, _error$response8$data2;\n        throw new Error(`Bad request: ${((_error$response8 = error.response) === null || _error$response8 === void 0 ? void 0 : (_error$response8$data = _error$response8.data) === null || _error$response8$data === void 0 ? void 0 : (_error$response8$data2 = _error$response8$data.error) === null || _error$response8$data2 === void 0 ? void 0 : _error$response8$data2.message) || 'Invalid request format'}`);\n      }\n      const errorMessage = ((_error$response9 = error.response) === null || _error$response9 === void 0 ? void 0 : (_error$response9$data = _error$response9.data) === null || _error$response9$data === void 0 ? void 0 : (_error$response9$data2 = _error$response9$data.error) === null || _error$response9$data2 === void 0 ? void 0 : _error$response9$data2.message) || error.message || 'Failed to generate content';\n      throw new Error(errorMessage);\n    }\n  }\n  async generateAudio(podcastScript) {\n    var _podcastScript$script;\n    console.log('Generating audio for podcast:', podcastScript.title);\n    console.log('Script length:', ((_podcastScript$script = podcastScript.script) === null || _podcastScript$script === void 0 ? void 0 : _podcastScript$script.length) || 0);\n\n    // Note: Gemini Pro doesn't actually generate audio files directly\n    // This is a simulation that would typically integrate with a text-to-speech service\n    // For now, we'll generate audio instructions/metadata\n\n    const prompt = `Based on the following podcast script, generate detailed audio production instructions and metadata for creating high-quality audio content.\n\nPODCAST SCRIPT:\n${podcastScript.script}\n\nPODCAST DETAILS:\n- Title: ${podcastScript.title}\n- Duration: ${podcastScript.duration} minutes\n- Hosts: Alex (analytical voice) and Jordan (casual voice)\n\nGenerate detailed instructions for:\n1. Voice characteristics for each host\n2. Pacing and timing guidelines\n3. Sound effects and music cues\n4. Audio production notes\n5. Quality specifications\n\nAlso generate a simulated audio file metadata response.\n\nFORMAT YOUR RESPONSE AS JSON:\n{\n  \"audioInstructions\": {\n    \"alexVoice\": \"Detailed voice characteristics for Alex\",\n    \"jordanVoice\": \"Detailed voice characteristics for Jordan\", \n    \"pacing\": \"Pacing and timing guidelines\",\n    \"soundEffects\": [\"effect1\", \"effect2\"],\n    \"musicCues\": [\"intro music\", \"transition music\", \"outro music\"],\n    \"productionNotes\": \"Detailed production guidelines\"\n  },\n  \"audioMetadata\": {\n    \"duration\": ${podcastScript.duration * 60},\n    \"format\": \"mp3\",\n    \"bitrate\": \"192kbps\",\n    \"sampleRate\": \"44.1kHz\",\n    \"estimatedSize\": \"${Math.round(podcastScript.duration * 1.5)}MB\"\n  },\n  \"transcript\": \"Clean transcript version of the podcast script without speaker names\",\n  \"audioUrl\": \"https://example.com/generated-audio.mp3\"\n}\n\nGenerate comprehensive audio production guidance for this podcast episode.`;\n    try {\n      const response = await this.makeRequest(prompt);\n      console.log('=== AUDIO GENERATION RESPONSE DEBUG ===');\n      console.log('Raw response length:', (response === null || response === void 0 ? void 0 : response.length) || 0);\n      console.log('Response preview:', (response === null || response === void 0 ? void 0 : response.substring(0, 300)) || 'No response');\n      console.log('==============================');\n      if (!response || response.length === 0) {\n        throw new Error('Empty response from Gemini API');\n      }\n\n      // Try to parse the response\n      try {\n        var _audioData$audioMetad, _audioData$audioMetad2, _audioData$audioMetad3, _audioData$audioMetad4;\n        const audioData = JSON.parse(response);\n        console.log('Parsed audio data keys:', Object.keys(audioData || {}));\n\n        // Create final audio content structure\n        const audioContent = {\n          audioUrl: audioData.audioUrl || `https://example.com/podcast-${Date.now()}.mp3`,\n          duration: ((_audioData$audioMetad = audioData.audioMetadata) === null || _audioData$audioMetad === void 0 ? void 0 : _audioData$audioMetad.duration) || podcastScript.duration * 60,\n          format: ((_audioData$audioMetad2 = audioData.audioMetadata) === null || _audioData$audioMetad2 === void 0 ? void 0 : _audioData$audioMetad2.format) || 'mp3',\n          size: parseInt(((_audioData$audioMetad3 = audioData.audioMetadata) === null || _audioData$audioMetad3 === void 0 ? void 0 : (_audioData$audioMetad4 = _audioData$audioMetad3.estimatedSize) === null || _audioData$audioMetad4 === void 0 ? void 0 : _audioData$audioMetad4.replace('MB', '')) || '15') * 1024 * 1024,\n          transcript: audioData.transcript || podcastScript.script || ''\n        };\n        console.log('Final audio content structure:', {\n          hasAudioUrl: !!audioContent.audioUrl,\n          duration: audioContent.duration,\n          format: audioContent.format,\n          sizeInMB: Math.round(audioContent.size / (1024 * 1024))\n        });\n        return audioContent;\n      } catch (parseError) {\n        console.error('Failed to parse audio JSON response:', parseError);\n        console.log('Attempting to create fallback audio content...');\n\n        // Fallback: create basic audio content structure\n        console.log('Using fallback audio structure');\n        return {\n          audioUrl: `https://example.com/podcast-${Date.now()}.mp3`,\n          duration: podcastScript.duration * 60,\n          format: 'mp3',\n          size: podcastScript.duration * 1.5 * 1024 * 1024,\n          // Estimate 1.5MB per minute\n          transcript: podcastScript.script || ''\n        };\n      }\n    } catch (error) {\n      console.error('=== AUDIO GENERATION ERROR ===');\n      console.error('Error type:', error.constructor.name);\n      console.error('Error message:', error.message);\n      console.error('Error stack:', error.stack);\n      console.error('================================');\n      throw error;\n    }\n  }\n}\nexport const geminiService = new GeminiService();","map":{"version":3,"names":["axios","GEMINI_API_KEY","process","env","REACT_APP_GEMINI_API_KEY","GEMINI_API_URL","GeminiService","makeRequest","prompt","console","log","length","substring","Error","time","requestBody","contents","parts","text","generationConfig","temperature","topK","topP","maxOutputTokens","response","post","headers","timeout","timeEnd","status","Object","keys","data","JSON","stringify","error","candidates","Array","isArray","candidate","content","textContent","_error$response","_error$response2","_error$response3","_error$response4","_error$response5","_error$response6","_error$response7","_error$response9","_error$response9$data","_error$response9$data2","constructor","name","message","code","statusText","includes","stack","_error$response8","_error$response8$data","_error$response8$data2","errorMessage","generateAudio","podcastScript","_podcastScript$script","title","script","duration","Math","round","_audioData$audioMetad","_audioData$audioMetad2","_audioData$audioMetad3","_audioData$audioMetad4","audioData","parse","audioContent","audioUrl","Date","now","audioMetadata","format","size","parseInt","estimatedSize","replace","transcript","hasAudioUrl","sizeInMB","parseError","geminiService"],"sources":["/Users/will/Content Creation App/src/services/ai/gemini.service.ts"],"sourcesContent":["// services/ai/gemini.service.ts\nimport axios from 'axios';\nimport { PodcastContent } from '../../types/project.types';\n\nconst GEMINI_API_KEY = process.env.REACT_APP_GEMINI_API_KEY;\nconst GEMINI_API_URL = 'https://generativelanguage.googleapis.com/v1beta/models/gemini-2.5-pro-preview-06-05:generateContent';\n\nexport interface AudioContent {\n  audioUrl: string;\n  duration: number;\n  format: string;\n  size: number;\n  transcript: string;\n}\n\nexport class GeminiService {\n  private async makeRequest(prompt: string): Promise<string> {\n    console.log('=== GEMINI API REQUEST ===');\n    console.log('API Key exists:', !!GEMINI_API_KEY);\n    console.log('API Key length:', GEMINI_API_KEY?.length || 0);\n    console.log('API Key preview:', GEMINI_API_KEY?.substring(0, 10) + '...' || 'None');\n    console.log('API URL:', GEMINI_API_URL);\n    console.log('Prompt length:', prompt.length);\n    \n    if (!GEMINI_API_KEY) {\n      throw new Error('Gemini API key is not configured. Please add REACT_APP_GEMINI_API_KEY to your .env file.');\n    }\n    \n    try {\n      console.time('Gemini API Call');\n      \n      const requestBody = {\n        contents: [{\n          parts: [{\n            text: prompt\n          }]\n        }],\n        generationConfig: {\n          temperature: 0.7,\n          topK: 40,\n          topP: 0.95,\n          maxOutputTokens: 4096,\n        }\n      };\n      \n      console.log('Request body prepared for Gemini API');\n      \n      const response = await axios.post(\n        `${GEMINI_API_URL}?key=${GEMINI_API_KEY}`,\n        requestBody,\n        {\n          headers: {\n            'Content-Type': 'application/json',\n          },\n          timeout: 120000, // 2 minute timeout\n        }\n      );\n\n      console.timeEnd('Gemini API Call');\n      console.log('API response status:', response.status);\n      console.log('API response data keys:', Object.keys(response.data || {}));\n      console.log('Full API response data:', JSON.stringify(response.data, null, 2));\n      \n      if (!response.data) {\n        console.error('Response data is null/undefined');\n        throw new Error('No data in API response');\n      }\n      \n      if (!response.data.candidates || !Array.isArray(response.data.candidates)) {\n        console.error('Missing candidates field in response');\n        console.log('Available fields:', Object.keys(response.data));\n        throw new Error('No candidates field in API response');\n      }\n      \n      if (response.data.candidates.length === 0) {\n        console.error('Candidates array is empty');\n        throw new Error('No candidates in API response');\n      }\n      \n      const candidate = response.data.candidates[0];\n      if (!candidate.content || !candidate.content.parts || !Array.isArray(candidate.content.parts)) {\n        console.error('Invalid candidate structure');\n        console.log('Candidate structure:', JSON.stringify(candidate, null, 2));\n        throw new Error('Invalid candidate content structure');\n      }\n      \n      if (candidate.content.parts.length === 0 || !candidate.content.parts[0].text) {\n        console.error('No text content in candidate');\n        throw new Error('No text content in API response');\n      }\n      \n      const textContent = candidate.content.parts[0].text;\n      console.log('Successfully extracted text, length:', textContent.length);\n      console.log('Text preview:', textContent.substring(0, 200) + '...');\n      return textContent;\n    } catch (error: any) {\n      console.error('=== GEMINI API ERROR ===');\n      console.error('Error type:', error.constructor.name);\n      console.error('Error message:', error.message);\n      console.error('Error code:', error.code);\n      console.error('Error status:', error.response?.status);\n      console.error('Error status text:', error.response?.statusText);\n      console.error('Error response headers:', error.response?.headers);\n      console.error('Error response data:', JSON.stringify(error.response?.data, null, 2));\n      console.error('Is network error:', error.message.includes('Network Error'));\n      console.error('Is timeout:', error.code === 'ECONNABORTED');\n      console.error('Full error stack:', error.stack);\n      console.error('===========================');\n      \n      if (error.code === 'ECONNABORTED') {\n        throw new Error('Request timed out - please try again');\n      }\n      \n      if (error.message.includes('Network Error')) {\n        throw new Error('Network error connecting to Gemini API. Please check your internet connection.');\n      }\n      \n      if (error.response?.status === 401) {\n        throw new Error('Invalid API key. Please check your Gemini API key configuration.');\n      }\n      \n      if (error.response?.status === 429) {\n        throw new Error('Rate limit exceeded. Please wait a moment and try again.');\n      }\n      \n      if (error.response?.status === 400) {\n        throw new Error(`Bad request: ${error.response?.data?.error?.message || 'Invalid request format'}`);\n      }\n      \n      const errorMessage = error.response?.data?.error?.message || error.message || 'Failed to generate content';\n      throw new Error(errorMessage);\n    }\n  }\n\n  async generateAudio(podcastScript: PodcastContent): Promise<AudioContent> {\n    console.log('Generating audio for podcast:', podcastScript.title);\n    console.log('Script length:', podcastScript.script?.length || 0);\n\n    // Note: Gemini Pro doesn't actually generate audio files directly\n    // This is a simulation that would typically integrate with a text-to-speech service\n    // For now, we'll generate audio instructions/metadata\n    \n    const prompt = `Based on the following podcast script, generate detailed audio production instructions and metadata for creating high-quality audio content.\n\nPODCAST SCRIPT:\n${podcastScript.script}\n\nPODCAST DETAILS:\n- Title: ${podcastScript.title}\n- Duration: ${podcastScript.duration} minutes\n- Hosts: Alex (analytical voice) and Jordan (casual voice)\n\nGenerate detailed instructions for:\n1. Voice characteristics for each host\n2. Pacing and timing guidelines\n3. Sound effects and music cues\n4. Audio production notes\n5. Quality specifications\n\nAlso generate a simulated audio file metadata response.\n\nFORMAT YOUR RESPONSE AS JSON:\n{\n  \"audioInstructions\": {\n    \"alexVoice\": \"Detailed voice characteristics for Alex\",\n    \"jordanVoice\": \"Detailed voice characteristics for Jordan\", \n    \"pacing\": \"Pacing and timing guidelines\",\n    \"soundEffects\": [\"effect1\", \"effect2\"],\n    \"musicCues\": [\"intro music\", \"transition music\", \"outro music\"],\n    \"productionNotes\": \"Detailed production guidelines\"\n  },\n  \"audioMetadata\": {\n    \"duration\": ${podcastScript.duration * 60},\n    \"format\": \"mp3\",\n    \"bitrate\": \"192kbps\",\n    \"sampleRate\": \"44.1kHz\",\n    \"estimatedSize\": \"${Math.round(podcastScript.duration * 1.5)}MB\"\n  },\n  \"transcript\": \"Clean transcript version of the podcast script without speaker names\",\n  \"audioUrl\": \"https://example.com/generated-audio.mp3\"\n}\n\nGenerate comprehensive audio production guidance for this podcast episode.`;\n\n    try {\n      const response = await this.makeRequest(prompt);\n      \n      console.log('=== AUDIO GENERATION RESPONSE DEBUG ===');\n      console.log('Raw response length:', response?.length || 0);\n      console.log('Response preview:', response?.substring(0, 300) || 'No response');\n      console.log('==============================');\n      \n      if (!response || response.length === 0) {\n        throw new Error('Empty response from Gemini API');\n      }\n      \n      // Try to parse the response\n      try {\n        const audioData = JSON.parse(response);\n        \n        console.log('Parsed audio data keys:', Object.keys(audioData || {}));\n        \n        // Create final audio content structure\n        const audioContent: AudioContent = {\n          audioUrl: audioData.audioUrl || `https://example.com/podcast-${Date.now()}.mp3`,\n          duration: audioData.audioMetadata?.duration || podcastScript.duration * 60,\n          format: audioData.audioMetadata?.format || 'mp3',\n          size: parseInt(audioData.audioMetadata?.estimatedSize?.replace('MB', '') || '15') * 1024 * 1024,\n          transcript: audioData.transcript || podcastScript.script || ''\n        };\n        \n        console.log('Final audio content structure:', {\n          hasAudioUrl: !!audioContent.audioUrl,\n          duration: audioContent.duration,\n          format: audioContent.format,\n          sizeInMB: Math.round(audioContent.size / (1024 * 1024))\n        });\n        \n        return audioContent;\n      } catch (parseError) {\n        console.error('Failed to parse audio JSON response:', parseError);\n        console.log('Attempting to create fallback audio content...');\n        \n        // Fallback: create basic audio content structure\n        console.log('Using fallback audio structure');\n        return {\n          audioUrl: `https://example.com/podcast-${Date.now()}.mp3`,\n          duration: podcastScript.duration * 60,\n          format: 'mp3',\n          size: podcastScript.duration * 1.5 * 1024 * 1024, // Estimate 1.5MB per minute\n          transcript: podcastScript.script || ''\n        };\n      }\n    } catch (error: any) {\n      console.error('=== AUDIO GENERATION ERROR ===');\n      console.error('Error type:', error.constructor.name);\n      console.error('Error message:', error.message);\n      console.error('Error stack:', error.stack);\n      console.error('================================');\n      throw error;\n    }\n  }\n}\n\nexport const geminiService = new GeminiService();"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}