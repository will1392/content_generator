{"ast":null,"code":"// services/ai/perplexity.service.ts\nimport axios from 'axios';\nconst PERPLEXITY_API_KEY = process.env.REACT_APP_PERPLEXITY_API_KEY;\nconst PERPLEXITY_API_URL = 'https://api.perplexity.ai/chat/completions';\nexport class PerplexityService {\n  async makeRequest(messages) {\n    console.log('Making Perplexity API request...');\n    console.log('API Key exists:', !!PERPLEXITY_API_KEY);\n    console.log('Messages length:', messages.length);\n    if (!PERPLEXITY_API_KEY) {\n      throw new Error('Perplexity API key is not configured');\n    }\n    try {\n      const requestBody = {\n        model: 'sonar-pro',\n        messages,\n        temperature: 0.2,\n        max_tokens: 4000\n      };\n      console.log('Request body prepared, making API call...');\n      const response = await axios.post(PERPLEXITY_API_URL, requestBody, {\n        headers: {\n          'Authorization': `Bearer ${PERPLEXITY_API_KEY}`,\n          'Content-Type': 'application/json'\n        },\n        timeout: 120000 // 2 minute timeout\n      });\n      console.log('API response received, status:', response.status);\n      console.log('Response data structure:', Object.keys(response.data));\n      if (!response.data.choices || !response.data.choices[0]) {\n        throw new Error('Invalid API response structure');\n      }\n      return response.data.choices[0].message.content;\n    } catch (error) {\n      var _error$response, _error$response2, _error$response3, _error$response3$data, _error$response3$data2;\n      console.error('Perplexity API error details:', {\n        message: error.message,\n        response: (_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.data,\n        status: (_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : _error$response2.status,\n        isTimeout: error.code === 'ECONNABORTED'\n      });\n      if (error.code === 'ECONNABORTED') {\n        throw new Error('Request timed out - please try again');\n      }\n      throw new Error(((_error$response3 = error.response) === null || _error$response3 === void 0 ? void 0 : (_error$response3$data = _error$response3.data) === null || _error$response3$data === void 0 ? void 0 : (_error$response3$data2 = _error$response3$data.error) === null || _error$response3$data2 === void 0 ? void 0 : _error$response3$data2.message) || error.message || 'Failed to get research data');\n    }\n  }\n  async generateResearch(keyword) {\n    console.time('Perplexity Research Time');\n    console.log('Starting Perplexity research for:', keyword);\n    const systemPrompt = `You are an expert SEO research analyst focused on E-E-A-T (Experience, Expertise, Authoritativeness, Trustworthiness). \n    Your research will be used to create content that ranks well on Google by demonstrating real expertise and authority.\n    Always provide specific, verifiable data with sources. Focus on unique insights that demonstrate deep understanding.`;\n    const userPrompt = `Research \"${keyword}\" and provide comprehensive information in JSON format.\n\nInclude:\n1. Definition and overview\n2. Current trends and statistics\n3. Common questions people ask\n4. Related topics and applications\n5. Key challenges and opportunities\n\nFormat as JSON:\n{\n  \"definition\": \"Clear definition of ${keyword}\",\n  \"overview\": \"Comprehensive overview\",\n  \"currentTrends\": [\"trend1\", \"trend2\", \"trend3\"],\n  \"statistics\": [\"stat1 with source\", \"stat2 with source\"],\n  \"commonQuestions\": [\n    {\"question\": \"What is ${keyword}?\", \"answer\": \"detailed answer\"},\n    {\"question\": \"How does ${keyword} work?\", \"answer\": \"detailed answer\"}\n  ],\n  \"relatedTopics\": [\"topic1\", \"topic2\", \"topic3\"],\n  \"applications\": [\"application1\", \"application2\"],\n  \"challenges\": [\"challenge1\", \"challenge2\"],\n  \"opportunities\": [\"opportunity1\", \"opportunity2\"],\n  \"futureOutlook\": \"Analysis of future trends\"\n}\n\nReturn only valid JSON.`;\n    const messages = [{\n      role: 'system',\n      content: systemPrompt\n    }, {\n      role: 'user',\n      content: userPrompt\n    }];\n    const response = await this.makeRequest(messages);\n    console.timeEnd('Perplexity Research Time');\n    console.log('Perplexity response received, length:', response.length);\n    try {\n      const researchData = JSON.parse(response);\n      console.log('Research data parsed successfully');\n      return researchData;\n    } catch (parseError) {\n      console.timeEnd('Perplexity Research Time');\n      console.error('Failed to parse research response:', parseError);\n      console.log('Raw response:', response.substring(0, 500) + '...');\n      const jsonMatch = response.match(/\\{[\\s\\S]*\\}/);\n      if (jsonMatch) {\n        return JSON.parse(jsonMatch[0]);\n      }\n      throw new Error('Failed to parse research data');\n    }\n  }\n  async generateBlog(keyword, research) {\n    console.log('Generating SEO-optimized blog for:', keyword);\n    console.log('Research data:', research);\n    const systemPrompt = `You are an expert SEO content writer who creates highly engaging, authoritative content that ranks well on Google. \n    You follow E-E-A-T principles and write content that demonstrates real expertise, experience, authority, and trustworthiness.\n    Your content is comprehensive, well-structured, and naturally incorporates keywords for optimal SEO performance.\n    \n    IMPORTANT: Write at an 8th-grade reading level using:\n    - Short sentences (15-20 words max)\n    - Simple, common words\n    - Active voice\n    - Clear, direct language\n    - One idea per sentence\n    - Avoid jargon unless necessary (and explain it when used)`;\n\n    // Build research summary from available data\n    let researchSummary = '';\n    if (research) {\n      if (research.definition) researchSummary += `\\nDefinition: ${research.definition}`;\n      if (research.overview) researchSummary += `\\nOverview: ${research.overview}`;\n      if (research.currentTrends) researchSummary += `\\nTrends: ${Array.isArray(research.currentTrends) ? research.currentTrends.join(', ') : research.currentTrends}`;\n      if (research.statistics) researchSummary += `\\nStatistics: ${JSON.stringify(research.statistics).slice(0, 500)}`;\n      if (research.commonQuestions) researchSummary += `\\nCommon Questions: ${JSON.stringify(research.commonQuestions).slice(0, 500)}`;\n      if (research.applications) researchSummary += `\\nApplications: ${Array.isArray(research.applications) ? research.applications.join(', ') : research.applications}`;\n    }\n    if (!researchSummary) {\n      researchSummary = JSON.stringify(research, null, 2).slice(0, 2000);\n    }\n    const userPrompt = `Create a comprehensive, SEO-optimized blog post about \"${keyword}\" using the provided research data.\n\nRESEARCH DATA:${researchSummary}\n\nBLOG POST REQUIREMENTS:\n\n1. Create a blog post that is 1,500-2,000 words long\n2. Include an SEO-optimized title that naturally includes \"${keyword}\"\n3. Write a compelling meta description (155-160 characters)\n4. Structure with:\n   - Engaging introduction with a hook\n   - 5-7 main sections with H2 headings\n   - Subsections with H3 headings where appropriate\n   - Conclusion with clear call-to-action\n\n5. SEO Optimization:\n   - Use \"${keyword}\" naturally 5-7 times throughout\n   - Include semantic variations and related terms\n   - Target potential featured snippets with clear, concise answers\n   - Write in an easy-to-read style (8th-grade level)\n\n6. READABILITY REQUIREMENTS (8th Grade Level):\n   - Use short sentences (15-20 words maximum)\n   - Choose simple, everyday words over complex ones\n   - Write in active voice (\"We tested\" not \"It was tested\")\n   - Break complex ideas into simple steps\n   - Use transition words (First, Next, However, Therefore)\n   - Define technical terms in simple language\n   - Use concrete examples to explain abstract concepts\n\n7. Demonstrate E-E-A-T:\n   - Show expertise through accurate information\n   - Include statistics and data points from the research\n   - Reference authoritative sources\n   - Provide practical, actionable advice\n\n8. Engagement:\n   - Use short paragraphs (2-3 sentences)\n   - Include bullet points and lists\n   - Add examples and analogies\n   - Keep the tone conversational but professional\n   - Ask rhetorical questions to engage readers\n   - Use \"you\" to speak directly to the reader\n\nFORMAT YOUR RESPONSE AS JSON:\n{\n  \"title\": \"SEO-optimized title with keyword\",\n  \"metaDescription\": \"Compelling meta description 155-160 characters with keyword\",\n  \"content\": \"Full blog post in Markdown format with ## for H2 and ### for H3 headings\",\n  \"wordCount\": 1800,\n  \"readingTime\": 8,\n  \"targetKeywords\": [\"main keyword\", \"related keyword 1\", \"related keyword 2\"],\n  \"readabilityScore\": \"Grade 8\"\n}\n\nRemember: Write clearly and simply. If a 13-year-old can understand it, you're doing it right.`;\n    const messages = [{\n      role: 'system',\n      content: systemPrompt\n    }, {\n      role: 'user',\n      content: userPrompt\n    }];\n    const response = await this.makeRequest(messages);\n    try {\n      const blogData = JSON.parse(response);\n\n      // Ensure required fields\n      if (!blogData.wordCount) {\n        blogData.wordCount = blogData.content ? blogData.content.split(/\\s+/).length : 1500;\n      }\n      if (!blogData.readingTime) {\n        blogData.readingTime = Math.ceil(blogData.wordCount / 200);\n      }\n      if (!blogData.targetKeywords) {\n        blogData.targetKeywords = [keyword];\n      }\n      if (!blogData.readabilityScore) {\n        blogData.readabilityScore = \"Grade 8\";\n      }\n      return blogData;\n    } catch (parseError) {\n      console.error('Failed to parse blog response:', parseError);\n      const jsonMatch = response.match(/\\{[\\s\\S]*\\}/);\n      if (jsonMatch) {\n        const extracted = JSON.parse(jsonMatch[0]);\n        if (!extracted.wordCount) extracted.wordCount = 1500;\n        if (!extracted.readingTime) extracted.readingTime = 8;\n        if (!extracted.targetKeywords) extracted.targetKeywords = [keyword];\n        if (!extracted.readabilityScore) extracted.readabilityScore = \"Grade 8\";\n        return extracted;\n      }\n      throw new Error('Failed to parse blog data');\n    }\n  }\n}\nexport const perplexityService = new PerplexityService();","map":{"version":3,"names":["axios","PERPLEXITY_API_KEY","process","env","REACT_APP_PERPLEXITY_API_KEY","PERPLEXITY_API_URL","PerplexityService","makeRequest","messages","console","log","length","Error","requestBody","model","temperature","max_tokens","response","post","headers","timeout","status","Object","keys","data","choices","message","content","error","_error$response","_error$response2","_error$response3","_error$response3$data","_error$response3$data2","isTimeout","code","generateResearch","keyword","time","systemPrompt","userPrompt","role","timeEnd","researchData","JSON","parse","parseError","substring","jsonMatch","match","generateBlog","research","researchSummary","definition","overview","currentTrends","Array","isArray","join","statistics","stringify","slice","commonQuestions","applications","blogData","wordCount","split","readingTime","Math","ceil","targetKeywords","readabilityScore","extracted","perplexityService"],"sources":["/Users/will/Content Creation App/src/services/ai/perplexity.service.ts"],"sourcesContent":["// services/ai/perplexity.service.ts\nimport axios from 'axios';\nimport { ResearchContent } from '../../types/project.types';\n\nconst PERPLEXITY_API_KEY = process.env.REACT_APP_PERPLEXITY_API_KEY;\nconst PERPLEXITY_API_URL = 'https://api.perplexity.ai/chat/completions';\n\ninterface PerplexityResponse {\n  id: string;\n  model: string;\n  choices: Array<{\n    message: {\n      role: string;\n      content: string;\n    };\n    finish_reason: string;\n  }>;\n}\n\nexport class PerplexityService {\n  private async makeRequest(messages: any[]): Promise<string> {\n    console.log('Making Perplexity API request...');\n    console.log('API Key exists:', !!PERPLEXITY_API_KEY);\n    console.log('Messages length:', messages.length);\n    \n    if (!PERPLEXITY_API_KEY) {\n      throw new Error('Perplexity API key is not configured');\n    }\n    \n    try {\n      const requestBody = {\n        model: 'sonar-pro',\n        messages,\n        temperature: 0.2,\n        max_tokens: 4000,\n      };\n      \n      console.log('Request body prepared, making API call...');\n      \n      const response = await axios.post<PerplexityResponse>(\n        PERPLEXITY_API_URL,\n        requestBody,\n        {\n          headers: {\n            'Authorization': `Bearer ${PERPLEXITY_API_KEY}`,\n            'Content-Type': 'application/json',\n          },\n          timeout: 120000, // 2 minute timeout\n        }\n      );\n\n      console.log('API response received, status:', response.status);\n      console.log('Response data structure:', Object.keys(response.data));\n      \n      if (!response.data.choices || !response.data.choices[0]) {\n        throw new Error('Invalid API response structure');\n      }\n\n      return response.data.choices[0].message.content;\n    } catch (error: any) {\n      console.error('Perplexity API error details:', {\n        message: error.message,\n        response: error.response?.data,\n        status: error.response?.status,\n        isTimeout: error.code === 'ECONNABORTED'\n      });\n      \n      if (error.code === 'ECONNABORTED') {\n        throw new Error('Request timed out - please try again');\n      }\n      \n      throw new Error(error.response?.data?.error?.message || error.message || 'Failed to get research data');\n    }\n  }\n\n  async generateResearch(keyword: string): Promise<ResearchContent> {\n    console.time('Perplexity Research Time');\n    console.log('Starting Perplexity research for:', keyword);\n    \n    const systemPrompt = `You are an expert SEO research analyst focused on E-E-A-T (Experience, Expertise, Authoritativeness, Trustworthiness). \n    Your research will be used to create content that ranks well on Google by demonstrating real expertise and authority.\n    Always provide specific, verifiable data with sources. Focus on unique insights that demonstrate deep understanding.`;\n\n    const userPrompt = `Research \"${keyword}\" and provide comprehensive information in JSON format.\n\nInclude:\n1. Definition and overview\n2. Current trends and statistics\n3. Common questions people ask\n4. Related topics and applications\n5. Key challenges and opportunities\n\nFormat as JSON:\n{\n  \"definition\": \"Clear definition of ${keyword}\",\n  \"overview\": \"Comprehensive overview\",\n  \"currentTrends\": [\"trend1\", \"trend2\", \"trend3\"],\n  \"statistics\": [\"stat1 with source\", \"stat2 with source\"],\n  \"commonQuestions\": [\n    {\"question\": \"What is ${keyword}?\", \"answer\": \"detailed answer\"},\n    {\"question\": \"How does ${keyword} work?\", \"answer\": \"detailed answer\"}\n  ],\n  \"relatedTopics\": [\"topic1\", \"topic2\", \"topic3\"],\n  \"applications\": [\"application1\", \"application2\"],\n  \"challenges\": [\"challenge1\", \"challenge2\"],\n  \"opportunities\": [\"opportunity1\", \"opportunity2\"],\n  \"futureOutlook\": \"Analysis of future trends\"\n}\n\nReturn only valid JSON.`;\n\n    const messages = [\n      { role: 'system', content: systemPrompt },\n      { role: 'user', content: userPrompt }\n    ];\n\n    const response = await this.makeRequest(messages);\n    console.timeEnd('Perplexity Research Time');\n    console.log('Perplexity response received, length:', response.length);\n    \n    try {\n      const researchData = JSON.parse(response);\n      console.log('Research data parsed successfully');\n      return researchData as ResearchContent;\n    } catch (parseError) {\n      console.timeEnd('Perplexity Research Time');\n      console.error('Failed to parse research response:', parseError);\n      console.log('Raw response:', response.substring(0, 500) + '...');\n      const jsonMatch = response.match(/\\{[\\s\\S]*\\}/);\n      if (jsonMatch) {\n        return JSON.parse(jsonMatch[0]) as ResearchContent;\n      }\n      throw new Error('Failed to parse research data');\n    }\n  }\n\n  async generateBlog(keyword: string, research: any): Promise<any> {\n    console.log('Generating SEO-optimized blog for:', keyword);\n    console.log('Research data:', research);\n\n    const systemPrompt = `You are an expert SEO content writer who creates highly engaging, authoritative content that ranks well on Google. \n    You follow E-E-A-T principles and write content that demonstrates real expertise, experience, authority, and trustworthiness.\n    Your content is comprehensive, well-structured, and naturally incorporates keywords for optimal SEO performance.\n    \n    IMPORTANT: Write at an 8th-grade reading level using:\n    - Short sentences (15-20 words max)\n    - Simple, common words\n    - Active voice\n    - Clear, direct language\n    - One idea per sentence\n    - Avoid jargon unless necessary (and explain it when used)`;\n\n    // Build research summary from available data\n    let researchSummary = '';\n    if (research) {\n      if (research.definition) researchSummary += `\\nDefinition: ${research.definition}`;\n      if (research.overview) researchSummary += `\\nOverview: ${research.overview}`;\n      if (research.currentTrends) researchSummary += `\\nTrends: ${Array.isArray(research.currentTrends) ? research.currentTrends.join(', ') : research.currentTrends}`;\n      if (research.statistics) researchSummary += `\\nStatistics: ${JSON.stringify(research.statistics).slice(0, 500)}`;\n      if (research.commonQuestions) researchSummary += `\\nCommon Questions: ${JSON.stringify(research.commonQuestions).slice(0, 500)}`;\n      if (research.applications) researchSummary += `\\nApplications: ${Array.isArray(research.applications) ? research.applications.join(', ') : research.applications}`;\n    }\n\n    if (!researchSummary) {\n      researchSummary = JSON.stringify(research, null, 2).slice(0, 2000);\n    }\n\n    const userPrompt = `Create a comprehensive, SEO-optimized blog post about \"${keyword}\" using the provided research data.\n\nRESEARCH DATA:${researchSummary}\n\nBLOG POST REQUIREMENTS:\n\n1. Create a blog post that is 1,500-2,000 words long\n2. Include an SEO-optimized title that naturally includes \"${keyword}\"\n3. Write a compelling meta description (155-160 characters)\n4. Structure with:\n   - Engaging introduction with a hook\n   - 5-7 main sections with H2 headings\n   - Subsections with H3 headings where appropriate\n   - Conclusion with clear call-to-action\n\n5. SEO Optimization:\n   - Use \"${keyword}\" naturally 5-7 times throughout\n   - Include semantic variations and related terms\n   - Target potential featured snippets with clear, concise answers\n   - Write in an easy-to-read style (8th-grade level)\n\n6. READABILITY REQUIREMENTS (8th Grade Level):\n   - Use short sentences (15-20 words maximum)\n   - Choose simple, everyday words over complex ones\n   - Write in active voice (\"We tested\" not \"It was tested\")\n   - Break complex ideas into simple steps\n   - Use transition words (First, Next, However, Therefore)\n   - Define technical terms in simple language\n   - Use concrete examples to explain abstract concepts\n\n7. Demonstrate E-E-A-T:\n   - Show expertise through accurate information\n   - Include statistics and data points from the research\n   - Reference authoritative sources\n   - Provide practical, actionable advice\n\n8. Engagement:\n   - Use short paragraphs (2-3 sentences)\n   - Include bullet points and lists\n   - Add examples and analogies\n   - Keep the tone conversational but professional\n   - Ask rhetorical questions to engage readers\n   - Use \"you\" to speak directly to the reader\n\nFORMAT YOUR RESPONSE AS JSON:\n{\n  \"title\": \"SEO-optimized title with keyword\",\n  \"metaDescription\": \"Compelling meta description 155-160 characters with keyword\",\n  \"content\": \"Full blog post in Markdown format with ## for H2 and ### for H3 headings\",\n  \"wordCount\": 1800,\n  \"readingTime\": 8,\n  \"targetKeywords\": [\"main keyword\", \"related keyword 1\", \"related keyword 2\"],\n  \"readabilityScore\": \"Grade 8\"\n}\n\nRemember: Write clearly and simply. If a 13-year-old can understand it, you're doing it right.`;\n\n    const messages = [\n      { role: 'system', content: systemPrompt },\n      { role: 'user', content: userPrompt }\n    ];\n\n    const response = await this.makeRequest(messages);\n    \n    try {\n      const blogData = JSON.parse(response);\n      \n      // Ensure required fields\n      if (!blogData.wordCount) {\n        blogData.wordCount = blogData.content ? blogData.content.split(/\\s+/).length : 1500;\n      }\n      if (!blogData.readingTime) {\n        blogData.readingTime = Math.ceil(blogData.wordCount / 200);\n      }\n      if (!blogData.targetKeywords) {\n        blogData.targetKeywords = [keyword];\n      }\n      if (!blogData.readabilityScore) {\n        blogData.readabilityScore = \"Grade 8\";\n      }\n      \n      return blogData;\n    } catch (parseError) {\n      console.error('Failed to parse blog response:', parseError);\n      const jsonMatch = response.match(/\\{[\\s\\S]*\\}/);\n      if (jsonMatch) {\n        const extracted = JSON.parse(jsonMatch[0]);\n        if (!extracted.wordCount) extracted.wordCount = 1500;\n        if (!extracted.readingTime) extracted.readingTime = 8;\n        if (!extracted.targetKeywords) extracted.targetKeywords = [keyword];\n        if (!extracted.readabilityScore) extracted.readabilityScore = \"Grade 8\";\n        return extracted;\n      }\n      throw new Error('Failed to parse blog data');\n    }\n  }\n}\n\nexport const perplexityService = new PerplexityService();"],"mappings":"AAAA;AACA,OAAOA,KAAK,MAAM,OAAO;AAGzB,MAAMC,kBAAkB,GAAGC,OAAO,CAACC,GAAG,CAACC,4BAA4B;AACnE,MAAMC,kBAAkB,GAAG,4CAA4C;AAcvE,OAAO,MAAMC,iBAAiB,CAAC;EAC7B,MAAcC,WAAWA,CAACC,QAAe,EAAmB;IAC1DC,OAAO,CAACC,GAAG,CAAC,kCAAkC,CAAC;IAC/CD,OAAO,CAACC,GAAG,CAAC,iBAAiB,EAAE,CAAC,CAACT,kBAAkB,CAAC;IACpDQ,OAAO,CAACC,GAAG,CAAC,kBAAkB,EAAEF,QAAQ,CAACG,MAAM,CAAC;IAEhD,IAAI,CAACV,kBAAkB,EAAE;MACvB,MAAM,IAAIW,KAAK,CAAC,sCAAsC,CAAC;IACzD;IAEA,IAAI;MACF,MAAMC,WAAW,GAAG;QAClBC,KAAK,EAAE,WAAW;QAClBN,QAAQ;QACRO,WAAW,EAAE,GAAG;QAChBC,UAAU,EAAE;MACd,CAAC;MAEDP,OAAO,CAACC,GAAG,CAAC,2CAA2C,CAAC;MAExD,MAAMO,QAAQ,GAAG,MAAMjB,KAAK,CAACkB,IAAI,CAC/Bb,kBAAkB,EAClBQ,WAAW,EACX;QACEM,OAAO,EAAE;UACP,eAAe,EAAE,UAAUlB,kBAAkB,EAAE;UAC/C,cAAc,EAAE;QAClB,CAAC;QACDmB,OAAO,EAAE,MAAM,CAAE;MACnB,CACF,CAAC;MAEDX,OAAO,CAACC,GAAG,CAAC,gCAAgC,EAAEO,QAAQ,CAACI,MAAM,CAAC;MAC9DZ,OAAO,CAACC,GAAG,CAAC,0BAA0B,EAAEY,MAAM,CAACC,IAAI,CAACN,QAAQ,CAACO,IAAI,CAAC,CAAC;MAEnE,IAAI,CAACP,QAAQ,CAACO,IAAI,CAACC,OAAO,IAAI,CAACR,QAAQ,CAACO,IAAI,CAACC,OAAO,CAAC,CAAC,CAAC,EAAE;QACvD,MAAM,IAAIb,KAAK,CAAC,gCAAgC,CAAC;MACnD;MAEA,OAAOK,QAAQ,CAACO,IAAI,CAACC,OAAO,CAAC,CAAC,CAAC,CAACC,OAAO,CAACC,OAAO;IACjD,CAAC,CAAC,OAAOC,KAAU,EAAE;MAAA,IAAAC,eAAA,EAAAC,gBAAA,EAAAC,gBAAA,EAAAC,qBAAA,EAAAC,sBAAA;MACnBxB,OAAO,CAACmB,KAAK,CAAC,+BAA+B,EAAE;QAC7CF,OAAO,EAAEE,KAAK,CAACF,OAAO;QACtBT,QAAQ,GAAAY,eAAA,GAAED,KAAK,CAACX,QAAQ,cAAAY,eAAA,uBAAdA,eAAA,CAAgBL,IAAI;QAC9BH,MAAM,GAAAS,gBAAA,GAAEF,KAAK,CAACX,QAAQ,cAAAa,gBAAA,uBAAdA,gBAAA,CAAgBT,MAAM;QAC9Ba,SAAS,EAAEN,KAAK,CAACO,IAAI,KAAK;MAC5B,CAAC,CAAC;MAEF,IAAIP,KAAK,CAACO,IAAI,KAAK,cAAc,EAAE;QACjC,MAAM,IAAIvB,KAAK,CAAC,sCAAsC,CAAC;MACzD;MAEA,MAAM,IAAIA,KAAK,CAAC,EAAAmB,gBAAA,GAAAH,KAAK,CAACX,QAAQ,cAAAc,gBAAA,wBAAAC,qBAAA,GAAdD,gBAAA,CAAgBP,IAAI,cAAAQ,qBAAA,wBAAAC,sBAAA,GAApBD,qBAAA,CAAsBJ,KAAK,cAAAK,sBAAA,uBAA3BA,sBAAA,CAA6BP,OAAO,KAAIE,KAAK,CAACF,OAAO,IAAI,6BAA6B,CAAC;IACzG;EACF;EAEA,MAAMU,gBAAgBA,CAACC,OAAe,EAA4B;IAChE5B,OAAO,CAAC6B,IAAI,CAAC,0BAA0B,CAAC;IACxC7B,OAAO,CAACC,GAAG,CAAC,mCAAmC,EAAE2B,OAAO,CAAC;IAEzD,MAAME,YAAY,GAAG;AACzB;AACA,yHAAyH;IAErH,MAAMC,UAAU,GAAG,aAAaH,OAAO;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uCAAuCA,OAAO;AAC9C;AACA;AACA;AACA;AACA,4BAA4BA,OAAO;AACnC,6BAA6BA,OAAO;AACpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB;IAEpB,MAAM7B,QAAQ,GAAG,CACf;MAAEiC,IAAI,EAAE,QAAQ;MAAEd,OAAO,EAAEY;IAAa,CAAC,EACzC;MAAEE,IAAI,EAAE,MAAM;MAAEd,OAAO,EAAEa;IAAW,CAAC,CACtC;IAED,MAAMvB,QAAQ,GAAG,MAAM,IAAI,CAACV,WAAW,CAACC,QAAQ,CAAC;IACjDC,OAAO,CAACiC,OAAO,CAAC,0BAA0B,CAAC;IAC3CjC,OAAO,CAACC,GAAG,CAAC,uCAAuC,EAAEO,QAAQ,CAACN,MAAM,CAAC;IAErE,IAAI;MACF,MAAMgC,YAAY,GAAGC,IAAI,CAACC,KAAK,CAAC5B,QAAQ,CAAC;MACzCR,OAAO,CAACC,GAAG,CAAC,mCAAmC,CAAC;MAChD,OAAOiC,YAAY;IACrB,CAAC,CAAC,OAAOG,UAAU,EAAE;MACnBrC,OAAO,CAACiC,OAAO,CAAC,0BAA0B,CAAC;MAC3CjC,OAAO,CAACmB,KAAK,CAAC,oCAAoC,EAAEkB,UAAU,CAAC;MAC/DrC,OAAO,CAACC,GAAG,CAAC,eAAe,EAAEO,QAAQ,CAAC8B,SAAS,CAAC,CAAC,EAAE,GAAG,CAAC,GAAG,KAAK,CAAC;MAChE,MAAMC,SAAS,GAAG/B,QAAQ,CAACgC,KAAK,CAAC,aAAa,CAAC;MAC/C,IAAID,SAAS,EAAE;QACb,OAAOJ,IAAI,CAACC,KAAK,CAACG,SAAS,CAAC,CAAC,CAAC,CAAC;MACjC;MACA,MAAM,IAAIpC,KAAK,CAAC,+BAA+B,CAAC;IAClD;EACF;EAEA,MAAMsC,YAAYA,CAACb,OAAe,EAAEc,QAAa,EAAgB;IAC/D1C,OAAO,CAACC,GAAG,CAAC,oCAAoC,EAAE2B,OAAO,CAAC;IAC1D5B,OAAO,CAACC,GAAG,CAAC,gBAAgB,EAAEyC,QAAQ,CAAC;IAEvC,MAAMZ,YAAY,GAAG;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+DAA+D;;IAE3D;IACA,IAAIa,eAAe,GAAG,EAAE;IACxB,IAAID,QAAQ,EAAE;MACZ,IAAIA,QAAQ,CAACE,UAAU,EAAED,eAAe,IAAI,iBAAiBD,QAAQ,CAACE,UAAU,EAAE;MAClF,IAAIF,QAAQ,CAACG,QAAQ,EAAEF,eAAe,IAAI,eAAeD,QAAQ,CAACG,QAAQ,EAAE;MAC5E,IAAIH,QAAQ,CAACI,aAAa,EAAEH,eAAe,IAAI,aAAaI,KAAK,CAACC,OAAO,CAACN,QAAQ,CAACI,aAAa,CAAC,GAAGJ,QAAQ,CAACI,aAAa,CAACG,IAAI,CAAC,IAAI,CAAC,GAAGP,QAAQ,CAACI,aAAa,EAAE;MAChK,IAAIJ,QAAQ,CAACQ,UAAU,EAAEP,eAAe,IAAI,iBAAiBR,IAAI,CAACgB,SAAS,CAACT,QAAQ,CAACQ,UAAU,CAAC,CAACE,KAAK,CAAC,CAAC,EAAE,GAAG,CAAC,EAAE;MAChH,IAAIV,QAAQ,CAACW,eAAe,EAAEV,eAAe,IAAI,uBAAuBR,IAAI,CAACgB,SAAS,CAACT,QAAQ,CAACW,eAAe,CAAC,CAACD,KAAK,CAAC,CAAC,EAAE,GAAG,CAAC,EAAE;MAChI,IAAIV,QAAQ,CAACY,YAAY,EAAEX,eAAe,IAAI,mBAAmBI,KAAK,CAACC,OAAO,CAACN,QAAQ,CAACY,YAAY,CAAC,GAAGZ,QAAQ,CAACY,YAAY,CAACL,IAAI,CAAC,IAAI,CAAC,GAAGP,QAAQ,CAACY,YAAY,EAAE;IACpK;IAEA,IAAI,CAACX,eAAe,EAAE;MACpBA,eAAe,GAAGR,IAAI,CAACgB,SAAS,CAACT,QAAQ,EAAE,IAAI,EAAE,CAAC,CAAC,CAACU,KAAK,CAAC,CAAC,EAAE,IAAI,CAAC;IACpE;IAEA,MAAMrB,UAAU,GAAG,0DAA0DH,OAAO;AACxF;AACA,gBAAgBe,eAAe;AAC/B;AACA;AACA;AACA;AACA,6DAA6Df,OAAO;AACpE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAYA,OAAO;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+FAA+F;IAE3F,MAAM7B,QAAQ,GAAG,CACf;MAAEiC,IAAI,EAAE,QAAQ;MAAEd,OAAO,EAAEY;IAAa,CAAC,EACzC;MAAEE,IAAI,EAAE,MAAM;MAAEd,OAAO,EAAEa;IAAW,CAAC,CACtC;IAED,MAAMvB,QAAQ,GAAG,MAAM,IAAI,CAACV,WAAW,CAACC,QAAQ,CAAC;IAEjD,IAAI;MACF,MAAMwD,QAAQ,GAAGpB,IAAI,CAACC,KAAK,CAAC5B,QAAQ,CAAC;;MAErC;MACA,IAAI,CAAC+C,QAAQ,CAACC,SAAS,EAAE;QACvBD,QAAQ,CAACC,SAAS,GAAGD,QAAQ,CAACrC,OAAO,GAAGqC,QAAQ,CAACrC,OAAO,CAACuC,KAAK,CAAC,KAAK,CAAC,CAACvD,MAAM,GAAG,IAAI;MACrF;MACA,IAAI,CAACqD,QAAQ,CAACG,WAAW,EAAE;QACzBH,QAAQ,CAACG,WAAW,GAAGC,IAAI,CAACC,IAAI,CAACL,QAAQ,CAACC,SAAS,GAAG,GAAG,CAAC;MAC5D;MACA,IAAI,CAACD,QAAQ,CAACM,cAAc,EAAE;QAC5BN,QAAQ,CAACM,cAAc,GAAG,CAACjC,OAAO,CAAC;MACrC;MACA,IAAI,CAAC2B,QAAQ,CAACO,gBAAgB,EAAE;QAC9BP,QAAQ,CAACO,gBAAgB,GAAG,SAAS;MACvC;MAEA,OAAOP,QAAQ;IACjB,CAAC,CAAC,OAAOlB,UAAU,EAAE;MACnBrC,OAAO,CAACmB,KAAK,CAAC,gCAAgC,EAAEkB,UAAU,CAAC;MAC3D,MAAME,SAAS,GAAG/B,QAAQ,CAACgC,KAAK,CAAC,aAAa,CAAC;MAC/C,IAAID,SAAS,EAAE;QACb,MAAMwB,SAAS,GAAG5B,IAAI,CAACC,KAAK,CAACG,SAAS,CAAC,CAAC,CAAC,CAAC;QAC1C,IAAI,CAACwB,SAAS,CAACP,SAAS,EAAEO,SAAS,CAACP,SAAS,GAAG,IAAI;QACpD,IAAI,CAACO,SAAS,CAACL,WAAW,EAAEK,SAAS,CAACL,WAAW,GAAG,CAAC;QACrD,IAAI,CAACK,SAAS,CAACF,cAAc,EAAEE,SAAS,CAACF,cAAc,GAAG,CAACjC,OAAO,CAAC;QACnE,IAAI,CAACmC,SAAS,CAACD,gBAAgB,EAAEC,SAAS,CAACD,gBAAgB,GAAG,SAAS;QACvE,OAAOC,SAAS;MAClB;MACA,MAAM,IAAI5D,KAAK,CAAC,2BAA2B,CAAC;IAC9C;EACF;AACF;AAEA,OAAO,MAAM6D,iBAAiB,GAAG,IAAInE,iBAAiB,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}